0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer28372, $r2)
		Method: <p.d0.j.c: javax.net.ssl.SSLContext h()>
		SHA-256: 8451800736db1f44f008dfb391ff0838851284ca7672d5edca9f7f6bd299a99d
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer57589)
		Method: <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String g(o.a.b.a,oauth.signpost.http.HttpParameters)>
		SHA-256: 6c6beeeca43bec6d8141a0539ae70f4fc6b29213cdee9ec3b9ffab2e4358736
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer28371, $r2)
		Method: <p.d0.j.c: javax.net.ssl.SSLContext h()>
		SHA-256: 9f025cf8a9160479ef9bbbb81322352a0ba5af75fd4e9afbb33e929805b564e5
		Secure: false
	Object:
		Variable: $r28
		Type: byte[]
		Statement: $r28 = virtualinvoke $r56.<java.security.MessageDigest: byte[] digest()>()
		Method: <j.c.b.e.j: j.c.a.h b()>
		SHA-256: a86f3574e786bc8b07f5420a02be9546ed4caa6d27f3e159cd584a315058a90
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.MessageDigest
		Statement: $r24 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer43356)
		Method: <j.c.b.c.d.r: byte[] c(java.io.Writer,boolean)>
		SHA-256: d0816772eb63fd25a2abf4b883899b7fe3d298709f6e5eef26169e0a5294dc28
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28369)
		Method: <p.d0.j.b: javax.net.ssl.SSLContext h()>
		SHA-256: a2733524b7cd07863168dd4f84f9214adbb63a5a2113bf3610ab3123ff8433d7
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2)
		Method: <j.k.a.m: p.u$b U(p.u$b)>
		SHA-256: d1e98803f011d736f5c96bf01bc2d7b8705dfd85c4a0a3e348b7e7540c045de0
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer27034)
		Method: <k.a.a.n2.y: java.lang.String d(java.lang.String)>
		SHA-256: c21bd694cd6648910fe7841f37a059fc3bf447e9a6e50abd03c1dcdd78ee3857
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28368)
		Method: <p.d0.j.b: javax.net.ssl.SSLContext h()>
		SHA-256: 102cf662bfb0395ae501ffebe16ac40431e09b572947bfd1ab24c1acfcf5f63e
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <org.acra.security.BaseKeyStoreFactory: java.security.KeyStore create(android.content.Context)>
		SHA-256: 22a183d5116504e02ad96ba67561ecf0f83bf3a7f2bfba4ad5fe01efac8fa773
		Secure: true
	Object:
		Variable: $r17
		Type: javax.net.ssl.TrustManager[]
		Statement: $r17 = virtualinvoke $r16.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <p.u: void <init>(p.u$b)>
		SHA-256: 8792f8c3bb30e1ed3ef84812fb7b262c401616a3f031d06d353d673e9cea81a2
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28375)
		Method: <p.d0.j.g: javax.net.ssl.SSLContext h()>
		SHA-256: f037f9bfe35d119d26d95e3097acbe82be8a2c898f52933f5b670daf5f0109bb
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25211)
		Method: <org.mozilla.javascript.tools.shell.Main: byte[] getDigest(java.lang.Object)>
		SHA-256: f375e250623c2677ff2f424f756ccd4229f74400e386862fe701106eabad6740
		Secure: false
	Object:
		Variable: $r21
		Type: byte[]
		Statement: $i2 = virtualinvoke $r24.<java.security.MessageDigest: int digest(byte[],int,int)>($r21, varReplacer43365, varReplacer43366)
		Method: <j.c.b.c.d.r: byte[] c(java.io.Writer,boolean)>
		SHA-256: 1308fd9908a8b450ead8dd2de0f92fe554b7a94f12679f7b6f28581305d44253
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.MessageDigest
		Statement: $r24 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11164)
		Method: <de.blau.android.presets.Preset: void <init>(android.content.Context,java.io.File,java.lang.String,boolean)>
		SHA-256: d8cef84574073b8907691eda0a70f68c7b9d4852080c4ae966cee5c76fe080e9
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2)
		Method: <r.a.l.a: void a(javax.net.ssl.HttpsURLConnection)>
		SHA-256: b658b0f4126f1dbd5bb8212c2600b52441d4d9c74c084ff29cbc60181bf78d6f
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okio.ByteString: okio.ByteString h(java.lang.String)>
		SHA-256: f4a0ee9793c4a59d0e40b93fef20584b28e935ac2cfd2890f9ac34b2d7d55d5f
		Secure: true
	Object:
		Variable: $r18
		Type: javax.net.ssl.SSLContext
		Statement: $r18 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer65640)
		Method: <r.a.l.a: void a(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 8a01f1a7e797d65e1253bcde09ac60cce4308fb90651fa577ce6ed2a3af63735
		Secure: false
	Object:
		Variable: varReplacer57589
		Type: java.lang.String
		Statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer57589)
		Method: <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String g(o.a.b.a,oauth.signpost.http.HttpParameters)>
		SHA-256: eef4458ced4876dbea85e0f8c105a19e566025901b56e3a7bcd07f2187f5f6bc
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.ByteString: okio.ByteString h(java.lang.String)>
		SHA-256: 96bfe08b2e7e2b8127af4566c307e1adc57b9ba5a4652ec61a4c526655ec600d
		Secure: true
	Object:
		Variable: $r40
		Type: java.security.DigestInputStream
		Statement: specialinvoke $r40.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r12, $r24)
		Method: <de.blau.android.presets.Preset: void <init>(android.content.Context,java.io.File,java.lang.String,boolean)>
		SHA-256: 33af666ebea44f1639ae7e7b1b5ed9883678137010d956d28d623599d47fe37
		Secure: false
	Object:
		Variable: $r56
		Type: java.security.MessageDigest
		Statement: $r56 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer50784)
		Method: <j.c.b.e.j: j.c.a.h b()>
		SHA-256: ab2a89f36f0197e560ba7a586aebd3716258f7111eccf4d09b463eaeb6302485
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.mozilla.javascript.tools.shell.Main: byte[] getDigest(java.lang.Object)>
		SHA-256: 8111502de4599a5f2e2873af90bfc06b5c7b639ef0f085cce7581d5a6e44a17c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.cert.CertificateFactory
		Statement: $r7 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>($r4)
		Method: <org.acra.security.BaseKeyStoreFactory: java.security.KeyStore create(android.content.Context)>
		SHA-256: c364f3ab4fd9572173a0ab9c8c197c8c571d14111d9406cd9aee236b0d0d2a01
		Secure: false
	Object:
		Variable: $r19
		Type: javax.net.ssl.TrustManager[]
		Statement: $r19 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <r.a.l.a: void a(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 8793b844901270c6136055a084ba0083458210a555eb6729a1dee2618c43c7f2
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.Mac
		Statement: $r7 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer57590)
		Method: <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String g(o.a.b.a,oauth.signpost.http.HttpParameters)>
		SHA-256: ec0977c333c591470ebfa76660243f58a8398788ffbb452ae03c6f14ec45cef3
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4038)
		Method: <j.k.a.m: p.u$b U(p.u$b)>
		SHA-256: 5e443c6e0ec6be16ae2c8f7e3e6d71a4f22a30495c23ce70847e8cec85c13cff
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <k.a.a.n2.y: java.lang.String d(java.lang.String)>
		SHA-256: 2258bd24b4afea0c7419944a01171bfd56d71d435166d6a71654e6e90fb27d61
		Secure: true
	Object:
		Variable: $r16
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r15)
		Method: <p.u: void <init>(p.u$b)>
		SHA-256: 3d52d7d7454cec7548273129f5832c74ad227bfa11d1964204d0beeae62df01c
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28377)
		Method: <p.d0.j.g: javax.net.ssl.SSLContext h()>
		SHA-256: d25345d0d629e397fdc14909529362b291f04486a5b06e9329be629298143050
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManager[]
		Statement: $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <j.k.a.m: p.u$b U(p.u$b)>
		SHA-256: 2b1f9cc0719420440e7362a94ccb3233b73e7c35be383561156a11565deb811c
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r7.<javax.crypto.Mac: byte[] doFinal(byte[])>($r5)
		Method: <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String g(o.a.b.a,oauth.signpost.http.HttpParameters)>
		SHA-256: b92eb7ab5d207b7ca6f17b8d334c1162f66d3c9d200603bea40ac94a3bd69687
		Secure: false

Findings in Java Class: de.blau.android.presets.Preset

	 in Method: void <init>(android.content.Context,java.io.File,java.lang.String,boolean)
		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #33af666ebea44f1639ae7e7b1b5ed9883678137010d956d28d623599d47fe37)
			Operation on object of type java.security.DigestInputStream object not completed. Expected call to read
			at statement: specialinvoke $r40.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r12, $r24)


Findings in Java Class: org.mozilla.javascript.tools.shell.Main

	 in Method: byte[] getDigest(java.lang.Object)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f375e250623c2677ff2f424f756ccd4229f74400e386862fe701106eabad6740)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25211)


Findings in Java Class: p.d0.j.b

	 in Method: javax.net.ssl.SSLContext h()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #a2733524b7cd07863168dd4f84f9214adbb63a5a2113bf3610ab3123ff8433d7)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28369)


Findings in Java Class: p.d0.j.c

	 in Method: javax.net.ssl.SSLContext h()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #9f025cf8a9160479ef9bbbb81322352a0ba5af75fd4e9afbb33e929805b564e5)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer28371, $r2)


Findings in Java Class: p.d0.j.g

	 in Method: javax.net.ssl.SSLContext h()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #f037f9bfe35d119d26d95e3097acbe82be8a2c898f52933f5b670daf5f0109bb)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28375)


Findings in Java Class: j.c.b.c.d.r

	 in Method: byte[] c(java.io.Writer,boolean)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #d0816772eb63fd25a2abf4b883899b7fe3d298709f6e5eef26169e0a5294dc28)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r24 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer43356)


Findings in Java Class: j.c.b.e.j

	 in Method: j.c.a.h b()
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #ab2a89f36f0197e560ba7a586aebd3716258f7111eccf4d09b463eaeb6302485)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r28 = virtualinvoke $r56.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ab2a89f36f0197e560ba7a586aebd3716258f7111eccf4d09b463eaeb6302485)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r56 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer50784)


Findings in Java Class: oauth.signpost.signature.HmacSha1MessageSigner

	 in Method: java.lang.String g(o.a.b.a,oauth.signpost.http.HttpParameters)
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #6c6beeeca43bec6d8141a0539ae70f4fc6b29213cdee9ec3b9ffab2e4358736)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer57589)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer57589)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Mac: void init(java.security.Key)>($r6)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #ec0977c333c591470ebfa76660243f58a8398788ffbb452ae03c6f14ec45cef3)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r7 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer57590)


Findings in Java Class: r.a.l.a

	 in Method: void a(javax.net.ssl.HttpsURLConnection)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r18.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer65641, $r19, varReplacer65641)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #8a01f1a7e797d65e1253bcde09ac60cce4308fb90651fa577ce6ed2a3af63735)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r18 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer65640)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r18.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer65641, $r19, varReplacer65641)


Findings in Java Class: org.acra.security.BaseKeyStoreFactory

	 in Method: java.security.KeyStore create(android.content.Context)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #c364f3ab4fd9572173a0ab9c8c197c8c571d14111d9406cd9aee236b0d0d2a01)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCRL
			at statement: $r8 = virtualinvoke $r7.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)


Findings in Java Class: p.u

	 in Method: void <init>(p.u$b)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r21.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer12327, $r17, varReplacer12327)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r21.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer12327, $r17, varReplacer12327)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r21.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer12327, $r17, varReplacer12327)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r16.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer12326)


Findings in Java Class: j.k.a.m

	 in Method: p.u$b U(p.u$b)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4035, varReplacer4035, varReplacer4035)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4035, varReplacer4035, varReplacer4035)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4035, varReplacer4035, varReplacer4035)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer4031)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 32

	CryptoAnalysis found the following violations. For details see description above.
	TypestateError: 1
	ConstraintError: 9
	RequiredPredicateError: 12
	IncompleteOperationError: 2
=====================================================================
