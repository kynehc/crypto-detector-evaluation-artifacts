0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: varReplacer17009
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17009)
		Method: <com.beemdevelopment.aegis.vault.slots.Slot: com.beemdevelopment.aegis.crypto.MasterKey getKey(javax.crypto.Cipher)>
		SHA-256: 318cd5842cf4a738154b039782505d24c550d3aab36ff47456aa5395d5e68e93
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(varReplacer4986, $r1)
		Method: <androidx.preference.R$style: javax.crypto.Cipher createCipher(javax.crypto.SecretKey,int,byte[])>
		SHA-256: a03498c99b8149c7c492cf7764c39e5739558fb06496aef817c09639cb5f208
		Secure: false
	Object:
		Variable: $r16
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer23500)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: ed5400d628e82e8fcc1d0c65aa57fc791575ce579cb29dbf3fcdba56cbf8c71c
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r8.<javax.crypto.Mac: byte[] doFinal(byte[])>($r12)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: 2f057877a951848704203b73b829bb5b1585b22919e18a7d5bf785c7d2680010
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: f12ba3938b7a039c2bbf5e4c68235b474dfd184db4865958f912a371af165374
		Secure: false
	Object:
		Variable: $r10
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r10)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: 47d12ae344fb08b37dc1672533653f3c06a0f04d4f46e762bbd6cb2320fd1be4
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, $r10)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: 7c92626196e8cba6b22aaa304ab2240f90cec23fe876372591dc1604470cd4fc
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1)
		Method: <androidx.preference.R$style: com.beemdevelopment.aegis.crypto.otp.OTP generateOTP(byte[],java.lang.String,int,long)>
		SHA-256: d4e28e50b3363015c4a9093588b109ed54d12aa31fd85b27eeadd9767da7f142
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: c94db0bc2550afda73dd55a15fa862f6cc59e00282c6c9954970001316c62606
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer25604)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: d7e7eb870c3a25a7096b8bc598d92b2f4198b35cdccf2d3217d0c116164f8f5
		Secure: false
	Object:
		Variable: varReplacer25605
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r4, $i0, varReplacer25605)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: 68db5ee6befd6301fe0cd93de1294b9b7ee642aaf62e338d0d56f1a89c97820a
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer26083)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: 272577457a343a0635c4f255a5d7097ca8f6fe8f0f469e1e31ae0c5e9b3ac87f
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.beemdevelopment.aegis.vault.VaultFileCredentials: void <init>()>
		SHA-256: 415e3bef6aeace0c9e4ebfba6a0dd3256ec2a82ddbe6bd7c88cb371be3abd88b
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r10)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: 50feb6c7637a66953a6f52cb7a47b79c62cefc56e76d70883ac79e56f8268ff4
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4987)
		Method: <androidx.preference.R$style: javax.crypto.Cipher createCipher(javax.crypto.SecretKey,int,byte[])>
		SHA-256: 2b2f057340320abcd07373b9d0dde5f7d4a34731d901c7586658ffc41f83720b
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.Cipher
		Statement: $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer23494)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: 4f399ec93236da1c7ab75ba8a0bae737bea19096c549e27cd34a753e05387544
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Key
		Statement: $r4 = virtualinvoke $r0.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(varReplacer1550, varReplacer1551)
		Method: <androidx.appcompat.R$string: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 63577810f98d466455e6754dce5ab20ea36fec8daee61ce90198a97c42dcd27f
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.SecretKeyFactory
		Statement: $r1 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer25603)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: e8f0f72cb91612668e10532e13e4f195ffd5540b886a8fe217fa92b02a2ff128
		Secure: false
	Object:
		Variable: $r10
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, $r10)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: b4e97668a6f09ed51e9f922d450ac95eae97a3fe6281e19c962cf42711426ef
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer1561, varReplacer1562)
		Method: <androidx.appcompat.R$string: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: a6201e646815631a48b51deeaca601585cba317e92dfafcc0e31b77b50995ac4
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <com.beemdevelopment.aegis.ui.tasks.KeyDerivationTask: java.lang.Object doInBackground(java.lang.Object[])>
		SHA-256: 422099f9d28a738c772f612685c7385956d2ff84facdca4a388a7d8ba4e6f36
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$EncryptedState: com.beemdevelopment.aegis.importers.AndOtpImporter$DecryptedState decryptOldFormat(char[])>
		SHA-256: 44b119cbb8d4b5fa7dba9b3de9ce2fe30e9564a0d73b0ee75d4b313e8cdcc0a
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.Mac
		Statement: $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)
		Method: <androidx.preference.R$style: com.beemdevelopment.aegis.crypto.otp.OTP generateOTP(byte[],java.lang.String,int,long)>
		SHA-256: 461883015452a1874a814801e828d2490f76c0fa2594c70789d35fd8625929f8
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer17458)
		Method: <androidx.preference.R$style: com.beemdevelopment.aegis.crypto.otp.OTP generateOTP(byte[],java.lang.String,int,long)>
		SHA-256: 8af1363cdfdd6ad991a4881b2de3e58c4151000b93aa1fb7b435060079edebb
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer21402)
		Method: <com.bumptech.glide.load.engine.cache.SafeKeyGenerator$1: java.lang.Object create()>
		SHA-256: 9a58000801311255e902f21628015215de192c09f9b45a004991ae0a126611ab
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.KeyStore
		Statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer1552)
		Method: <androidx.appcompat.R$string: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: bd924f661b4e495b728eefa99fa6eb3c7b2d4323fb08d23c48e05b638a90b6d0
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.Key
		Statement: $r5 = virtualinvoke $r4.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r3, varReplacer1413)
		Method: <com.beemdevelopment.aegis.crypto.KeyStoreHandle: javax.crypto.SecretKey getKey(java.lang.String)>
		SHA-256: 76fa2f30a96b164d037983f1c90281027b11bc0ab56b3147a2fab190aacba28b
		Secure: false
	Object:
		Variable: varReplacer17458
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer17458)
		Method: <androidx.preference.R$style: com.beemdevelopment.aegis.crypto.otp.OTP generateOTP(byte[],java.lang.String,int,long)>
		SHA-256: 80213383d0d6527fe7bfbc615d805ad4b9c221df3692e6b66a08c7a9ae589a3a
		Secure: false
	Object:
		Variable: varReplacer23500
		Type: java.lang.String
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer23500)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: 666d4b3e9e2a5f2260456eb3d1d144b010cd8ea0d5494111472fbd737b596add
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r1.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: b7b568896b80c6d9e82ec6b93b5b139ef3efa12af02293da8670657cf64bb255
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer1410)
		Method: <com.beemdevelopment.aegis.crypto.KeyStoreHandle: void <init>()>
		SHA-256: a9395747dc6ed9e66427367879641d8ccb316c88d0ef6dcc947c9bc7fc2e6147
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.SecretKeyFactory
		Statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer23495)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: c7125a7e7fa347a26dfb4ba7fa3f73be138795d116219bac9ffdbaf6c82c3b0d
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1558)
		Method: <androidx.appcompat.R$string: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 2869225ceec69ea5811bf961128cc539f020c8de06df75ccf328897deed578bc
		Secure: false
	Object:
		Variable: varReplacer22719
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r0, varReplacer22718, $i2, varReplacer22719)
		Method: <androidx.preference.R$style: javax.crypto.SecretKey deriveKey(byte[],com.beemdevelopment.aegis.crypto.SCryptParameters)>
		SHA-256: ee0adb9fbde941864ef70444e372ed278b698172f75c064b9f7e0c2a65001b5
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17009)
		Method: <com.beemdevelopment.aegis.vault.slots.Slot: com.beemdevelopment.aegis.crypto.MasterKey getKey(javax.crypto.Cipher)>
		SHA-256: 5bc40a2627da14a2d27b3602b7282c384845f5103d5fef030558e13a6474ca21
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.beemdevelopment.aegis.crypto.KeyStoreHandle: javax.crypto.SecretKey generateKey(java.lang.String)>
		SHA-256: c95627639bab80b4f732a33974f470ec64e2f175a5b2e43148db983f2bce0173
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r5)
		Method: <com.beemdevelopment.aegis.ui.tasks.KeyDerivationTask: java.lang.Object doInBackground(java.lang.Object[])>
		SHA-256: db72048c9cec3f9de4486073762f372b640616f17453c3e872505e2e6fb3e4b
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1412)
		Method: <com.beemdevelopment.aegis.crypto.KeyStoreHandle: javax.crypto.SecretKey getKey(java.lang.String)>
		SHA-256: da5ddc44dfb6043783a7f3fdf51408d1edc9ad75eeb2b8942c05922b00effcce
		Secure: false
	Object:
		Variable: varReplacer27057
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer27057)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$EncryptedState: com.beemdevelopment.aegis.importers.AndOtpImporter$DecryptedState decryptOldFormat(char[])>
		SHA-256: 34c8d763bfe7366435a7127d42ee634ebf4567c6ae5be77e101e7a44386dd3e9
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer20822)
		Method: <com.beemdevelopment.aegis.vault.VaultFileCredentials: void <init>()>
		SHA-256: f141a7cea38375beae61f0ff51663ff9bf3b6fa0ab6a8e79d8afc76351f65725
		Secure: true
	Object:
		Variable: $r17
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r17.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: db315e05cd0b18336dfac21414586c1e955302b21a9e0fc0ebf9c52a8ebb29ed
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer27059)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$EncryptedState: com.beemdevelopment.aegis.importers.AndOtpImporter$DecryptedState decryptOldFormat(char[])>
		SHA-256: 633d51135cb60cf99ecc998a1edcdb837b560d6c8888ce03d4c1ad8de5a61675
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r0, varReplacer22718, $i2, varReplacer22719)
		Method: <androidx.preference.R$style: javax.crypto.SecretKey deriveKey(byte[],com.beemdevelopment.aegis.crypto.SCryptParameters)>
		SHA-256: dc9085e5a4c99b9e30c3783ba2542fb6443189256c7ae8e0641290ccc0f8028a
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)
		Method: <net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>
		SHA-256: fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e
		Secure: false
	Object:
		Variable: $r14
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer26084)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: af818961a4c9ecae9eb5f9a460b4631b5984d538a831937acb76537b66241994
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer26079)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: 30bf304befb4c789fcdbb0a7ba007320a88db5942d26e798cdced62abeab52de
		Secure: false
	Object:
		Variable: varReplacer25604
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer25604)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: 95a15497d034577808bec257c5bc62c7de5f684fc4fe13808f4af69239d78b55
		Secure: false
	Object:
		Variable: varReplacer23491
		Type: int
		Statement: specialinvoke $r15.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r7, varReplacer23490, varReplacer23491)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: ca19129f7b9a33649cde392ff7f5a7750f86816eff8492eb43545f8207b5437a
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r5 = virtualinvoke $r8.<javax.crypto.Mac: byte[] doFinal(byte[])>($r12)
		Method: <net.lingala.zip4j.crypto.AESDecrypter: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])>
		SHA-256: 3b1a5a962fdde4620ae88a743c556f97eef3040e8cb039a2a9c762574e0326ee
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer27057)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$EncryptedState: com.beemdevelopment.aegis.importers.AndOtpImporter$DecryptedState decryptOldFormat(char[])>
		SHA-256: 3afb54ddfafac82461ec7bf9b7cbf70b8adb9fd6adb586143d661fbc7eeddfab
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r4, $i0, varReplacer25605)
		Method: <com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)>
		SHA-256: 1c9a6d026403d9e1e671a5924b5bab998698fb1adf97d34f606152f231cafdf4
		Secure: false
	Object:
		Variable: varReplacer26084
		Type: java.lang.String
		Statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer26084)
		Method: <com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])>
		SHA-256: c1ecc59565d86c5e9e61b527cd1308ecbc18700b061ce9d49f4062d35509e7e5
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.SecretKey
		Statement: $r10 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r9)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: ebb18bacdfd17d84369ab98b81c564e4bd6c22ee344e84cbb88ba9568c0f49f2
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r15.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r7, varReplacer23490, varReplacer23491)
		Method: <com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])>
		SHA-256: c0b5a2b9776255d27b7c94d6822cf791290e9587f1d0154866071dece020d4af
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer22650, varReplacer22651)
		Method: <com.beemdevelopment.aegis.crypto.KeyStoreHandle: javax.crypto.SecretKey generateKey(java.lang.String)>
		SHA-256: dbc2172025c435913adfc9d4bf41aa948893060fa2b452193128613f7b89190b
		Secure: true

Findings in Java Class: com.beemdevelopment.aegis.crypto.KeyStoreHandle

	 in Method: void <init>()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #a9395747dc6ed9e66427367879641d8ccb316c88d0ef6dcc947c9bc7fc2e6147)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer1410)


	 in Method: javax.crypto.SecretKey getKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1411, $r6)


Findings in Java Class: androidx.appcompat.R$string

	 in Method: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #2869225ceec69ea5811bf961128cc539f020c8de06df75ccf328897deed578bc)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1558)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #bd924f661b4e495b728eefa99fa6eb3c7b2d4323fb08d23c48e05b638a90b6d0)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer1552)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1560, $r5)


Findings in Java Class: androidx.preference.R$style

	 in Method: com.beemdevelopment.aegis.crypto.CryptResult encrypt(byte[],javax.crypto.Cipher)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #2b2f057340320abcd07373b9d0dde5f7d4a34731d901c7586658ffc41f83720b)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r2 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)


	 in Method: com.beemdevelopment.aegis.crypto.otp.OTP generateOTP(byte[],java.lang.String,int,long)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer17458)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #8af1363cdfdd6ad991a4881b2de3e58c4151000b93aa1fb7b435060079edebb)
			Second parameter (with value "RAW") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer17458)


	 in Method: javax.crypto.Cipher createCipher(javax.crypto.SecretKey,int,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedGCM
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($i0, $r0, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(varReplacer4986, $r1)


	 in Method: javax.crypto.SecretKey deriveKey(byte[],com.beemdevelopment.aegis.crypto.SCryptParameters)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r0, varReplacer22718, $i2, varReplacer22719)


Findings in Java Class: com.beemdevelopment.aegis.importers.AuthyImporter$EncryptedState

	 in Method: com.beemdevelopment.aegis.importers.AuthyImporter$DecryptedState decrypt(char[])
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r10 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r9)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r15.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r7, varReplacer23490, varReplacer23491)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer23500)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #c0b5a2b9776255d27b7c94d6822cf791290e9587f1d0154866071dece020d4af)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: specialinvoke $r15.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r7, varReplacer23490, varReplacer23491)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer23501, $r11, $r13)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #c7125a7e7fa347a26dfb4ba7fa3f73be138795d116219bac9ffdbaf6c82c3b0d)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer23495)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #4f399ec93236da1c7ab75ba8a0bae737bea19096c549e27cd34a753e05387544)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r5 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r17.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #c0b5a2b9776255d27b7c94d6822cf791290e9587f1d0154866071dece020d4af)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r15.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r7, varReplacer23490, varReplacer23491)


Findings in Java Class: com.beemdevelopment.aegis.importers.AndOtpImporter$AndOtpKeyDerivationTask

	 in Method: javax.crypto.SecretKey deriveKey(com.beemdevelopment.aegis.importers.AndOtpImporter$KeyDerivationParams)
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #e8f0f72cb91612668e10532e13e4f195ffd5540b886a8fe217fa92b02a2ff128)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r1 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer25603)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r5 = virtualinvoke $r1.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #1c9a6d026403d9e1e671a5924b5bab998698fb1adf97d34f606152f231cafdf4)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r1.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r4, $i0, varReplacer25605)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer25604)


Findings in Java Class: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$EncryptedState

	 in Method: com.beemdevelopment.aegis.importers.TotpAuthenticatorImporter$DecryptedState decrypt(char[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer26084)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer26080, $r4, $r6)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #30bf304befb4c789fcdbb0a7ba007320a88db5942d26e798cdced62abeab52de)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r3 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)


Findings in Java Class: net.lingala.zip4j.crypto.AESDecrypter

	 in Method: void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #50feb6c7637a66953a6f52cb7a47b79c62cefc56e76d70883ac79e56f8268ff4)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r10)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: virtualinvoke $r8.<javax.crypto.Mac: void init(java.security.Key)>($r9)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, $r10)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Unexpected call to method doFinal on object of type javax.crypto.Mac.
			at statement: $r5 = virtualinvoke $r8.<javax.crypto.Mac: byte[] doFinal(byte[])>($r12)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r8.<javax.crypto.Mac: void init(java.security.Key)>($r9)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to javax.crypto.Mac: byte[] doFinal(byte[]), update
			at statement: $r5 = virtualinvoke $r8.<javax.crypto.Mac: byte[] doFinal(byte[])>($r12)


Findings in Java Class: net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF

	 in Method: void <init>(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)


Findings in Java Class: net.lingala.zip4j.io.inputstream.ZipInputStream

	 in Method: net.lingala.zip4j.model.LocalFileHeader getNextEntry(net.lingala.zip4j.model.FileHeader)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r26.<net.lingala.zip4j.io.inputstream.NoCipherInputStream: void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[])>($r20, $r3, $r21)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r28.<net.lingala.zip4j.io.inputstream.ZipStandardCipherInputStream: void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[])>($r20, $r3, $r21)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r27.<net.lingala.zip4j.io.inputstream.AesCipherInputStream: void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[])>($r20, $r3, $r21)


Findings in Java Class: net.lingala.zip4j.io.inputstream.CipherInputStream

	 in Method: void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $r1 = virtualinvoke r0.<net.lingala.zip4j.io.inputstream.CipherInputStream: net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[])>($r3, $r4)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $r1 = virtualinvoke r0.<net.lingala.zip4j.io.inputstream.CipherInputStream: net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[])>($r3, $r4)


Findings in Java Class: com.beemdevelopment.aegis.vault.slots.Slot

	 in Method: com.beemdevelopment.aegis.crypto.MasterKey getKey(javax.crypto.Cipher)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17009)


Findings in Java Class: com.beemdevelopment.aegis.importers.AndOtpImporter$EncryptedState

	 in Method: com.beemdevelopment.aegis.importers.AndOtpImporter$DecryptedState decryptOldFormat(char[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer27057)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 55

	CryptoAnalysis found the following violations. For details see description above.
	RequiredPredicateError: 22
	IncompleteOperationError: 9
	ConstraintError: 9
	TypestateError: 4
=====================================================================
