0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer32525)
		Method: <com.bumptech.glide.load.engine.cache.SafeKeyGenerator$1: com.bumptech.glide.load.engine.cache.SafeKeyGenerator$PoolableDigestContainer create()>
		SHA-256: 836cefc310deb8b899e63c069f2ebc4a707f34e7074a081ae8fce4028f861f1
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21895)
		Method: <okhttp3.internal.platform.AndroidPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 3733d69ef989f84c47fd3f5c10d971a80b70f18aaead8e01b55ba2d32be432c1
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer23746)
		Method: <org.tukaani.xz.check.SHA256: void <init>()>
		SHA-256: dfc19a6b16919040fe2370e4f46a8063ef84a6fccd2e2a821dd30454be771b37
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.cert.CertificateFactory
		Statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer42143)
		Method: <okhttp3.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>
		SHA-256: 84010ea3878845380214dc61d1bca2d2ab1cd5a47b7398629553ef89d7b065c3
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.emdev.utils.StringUtils: java.lang.String md5(java.lang.String)>
		SHA-256: 8fd11f28bf56ef200ee20dec6722d7cbcb926c1686e038d533564b3db530a33b
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.MessageDigest
		Statement: $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: eb63fefa95742168a00acdc72021a94eab16a30bd204f692ee72300e4331c302
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <net.lingala.zip4j.crypto.AESEncrypter: void <init>(char[],net.lingala.zip4j.model.enums.AesKeyStrength)>
		SHA-256: 8c3e20028e341789af0d8034e796017bac8527097697a9864ed11b0bcd06dbe
		Secure: true
	Object:
		Variable: $r15
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r15.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r14)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: fdb075ac877fbb7fc2a3e54b34488e52c830c63b41bfdfce05e140664635520
		Secure: false
	Object:
		Variable: $i1
		Type: int
		Statement: $i1 = virtualinvoke $r2.<java.security.SecureRandom: int nextInt(int)>(varReplacer43673)
		Method: <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes()>
		SHA-256: 76caad40dfbf72f86398e01c7149d3e15484a59ae483664a89eb7d712bc616a6
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer21892, $r2)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: ca9ec2100e8d79d0927ea38bd06520ed3d48e3b631a718cd4d055902ab5b6a1f
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)
		Method: <net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>
		SHA-256: fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e
		Secure: false
	Object:
		Variable: $r2
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)
		Method: <net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>
		SHA-256: 1af3e375106d10b26ea6034ef73b9c61e751ef18cab8bd19d427ede96b1bf3f8
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0)
		Method: <okhttp3.internal.Util: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: a8764d384e0e6acd4407dba0e4c2025660362892494036c03c4b52a40e75c66b
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer28333)
		Method: <org.emdev.utils.StringUtils: java.lang.String md5(java.lang.String)>
		SHA-256: 54f84e576077be73d38c3af07a4a080d41b0af4c5cb01dca92e661ef7fd7e3ed
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r13.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: 1723b90c13cfc56d59f6e2d077ac876629cd0653eb6661f7f9f415d8a2594542
		Secure: false
	Object:
		Variable: $r4
		Type: java.lang.String
		Statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, $r4)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: a2dd4ae104a12459a203c988b195352bbaaee3e0cf2bf255750761382c7a5569
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: java.security.MessageDigest createMessageDigest(java.lang.String)>
		SHA-256: 14eb46eab652d50965e01340ecbfb56d8cf1ef61e2203a758f85742db28dc4
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)
		Method: <de.rtner.security.auth.spi.MacBasedPRF: byte[] doFinal(byte[])>
		SHA-256: 1d6d7521ca30973fba926ddd40a80c0789b657f0d2fe66908725c8ffdc37c7cf
		Secure: false
	Object:
		Variable: $r25
		Type: byte[]
		Statement: $r25 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r25)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: com.burgstaller.okhttp.digest.fromhttpclient.NameValuePair createDigestHeader(com.burgstaller.okhttp.digest.Credentials,okhttp3.Request,java.util.Map)>
		SHA-256: 4541c708604a6cf6dbc5ba4188e209c8e33ac74abc51bff6d642f86700c425d2
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)
		Method: <de.rtner.security.auth.spi.MacBasedPRF: void init(byte[])>
		SHA-256: 2c8b6542a35e929698f4560c93b5cf68fb53e0b3268e298dc399955f0bfa617b
		Secure: false
	Object:
		Variable: $r25
		Type: byte[]
		Statement: $r25 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r25)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: com.burgstaller.okhttp.digest.fromhttpclient.NameValuePair createDigestHeader(com.burgstaller.okhttp.digest.Credentials,okhttp3.Request,java.util.Map)>
		SHA-256: 4541c708604a6cf6dbc5ba4188e209c8e33ac74abc51bff6d642f86700c425d2
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest(byte[])>($r7)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: 920cbe099d130fea0f5d26b057da0a193cf9b76ec79e0704a2c5aa81373d5ea4
		Secure: true
	Object:
		Variable: $r25
		Type: byte[]
		Statement: $r25 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r25)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: com.burgstaller.okhttp.digest.fromhttpclient.NameValuePair createDigestHeader(com.burgstaller.okhttp.digest.Credentials,okhttp3.Request,java.util.Map)>
		SHA-256: 4541c708604a6cf6dbc5ba4188e209c8e33ac74abc51bff6d642f86700c425d2
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)
		Method: <de.rtner.security.auth.spi.MacBasedPRF: void <init>(java.lang.String)>
		SHA-256: fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21886)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 1447cf3d9c406eb64a8763b710d561ec742ad789e864f229238760af0a13fc6b
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.Util: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: dea0af93b06734ae35228a014521e6e031131dd2b357359826afa61f9a6de1b
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: a79a1700ae9d8d44f13ea218f751e7024f8f1222b1b2ae17cdbab7b56d352181
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21893)
		Method: <okhttp3.internal.platform.AndroidPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: fbc95ff87b3ef0e99fe38f096a249f28a2dce6ab6ac61f323611c29ed98d2b23
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: java.lang.String createCnonce()>
		SHA-256: eb8d3aa2e42033fc25655252df0affb8e39f5b2a2a8ebd2a50bac3d122d83d93
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer21890, $r2)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 188a3acd7d8de5ec02be41bac3927689c76c3c047b56b56a0f13fba9eacd8b41
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, $r4)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: 91c06d0ff6c24b0737f86e6b15bbb4511cb8b4b54459f0d17cbc4ebe6f6b42cf
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)
		Method: <net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>
		SHA-256: 2c8b6542a35e929698f4560c93b5cf68fb53e0b3268e298dc399955f0bfa617b
		Secure: false
	Object:
		Variable: $r25
		Type: byte[]
		Statement: $r25 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r25)
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: com.burgstaller.okhttp.digest.fromhttpclient.NameValuePair createDigestHeader(com.burgstaller.okhttp.digest.Credentials,okhttp3.Request,java.util.Map)>
		SHA-256: 4541c708604a6cf6dbc5ba4188e209c8e33ac74abc51bff6d642f86700c425d2
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21887)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 4cbd157be7165ab772521512926e3505c9f9d727c057e95575811e623a590731
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.burgstaller.okhttp.digest.DigestAuthenticator: java.lang.String createCnonce()>
		SHA-256: 8985c74cd004a0a07d8ab1a0d2848482ebdf5dab7c7cfbf52cd4cd18b131d7f2
		Secure: true
	Object:
		Variable: $r2
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)
		Method: <de.rtner.security.auth.spi.MacBasedPRF: void init(byte[])>
		SHA-256: 1af3e375106d10b26ea6034ef73b9c61e751ef18cab8bd19d427ede96b1bf3f8
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes()>
		SHA-256: d961953c78d34693f818ac9205ed8531fc233acc6454da15aaacebefe5f342b6
		Secure: true
	Object:
		Variable: $r14
		Type: javax.crypto.Cipher
		Statement: $r14 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)>
		SHA-256: 1c5cb91138ceacd90f0626dbd258e5437580d2c08d366ff5755767b7cee0707b
		Secure: false

Findings in Java Class: okhttp3.internal.platform.Platform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #4cbd157be7165ab772521512926e3505c9f9d727c057e95575811e623a590731)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21887)


Findings in Java Class: okhttp3.internal.platform.ConscryptPlatform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ca9ec2100e8d79d0927ea38bd06520ed3d48e3b631a718cd4d055902ab5b6a1f)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer21892, $r2)


Findings in Java Class: okhttp3.internal.platform.AndroidPlatform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #fbc95ff87b3ef0e99fe38f096a249f28a2dce6ab6ac61f323611c29ed98d2b23)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21893)


Findings in Java Class: org.tukaani.xz.check.SHA256

	 in Method: void <init>()
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #dfc19a6b16919040fe2370e4f46a8063ef84a6fccd2e2a821dd30454be771b37)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer23746)


Findings in Java Class: org.emdev.utils.StringUtils

	 in Method: java.lang.String md5(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #54f84e576077be73d38c3af07a4a080d41b0af4c5cb01dca92e661ef7fd7e3ed)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer28333)


Findings in Java Class: okio.ByteString

	 in Method: okio.ByteString digest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: at.stefl.opendocument.java.odf.OpenDocumentFile

	 in Method: java.io.InputStream getFileStream(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #fdb075ac877fbb7fc2a3e54b34488e52c830c63b41bfdfce05e140664635520)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to read
			at statement: specialinvoke $r5.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r2, $r6)


Findings in Java Class: com.burgstaller.okhttp.digest.DigestAuthenticator

	 in Method: java.security.MessageDigest createMessageDigest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #14eb46eab652d50965e01340ecbfb56d8cf1ef61e2203a758f85742db28dc4)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: de.rtner.security.auth.spi.MacBasedPRF

	 in Method: void <init>(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)


	 in Method: byte[] doFinal(byte[])
		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Unexpected call to method doFinal on object of type javax.crypto.Mac.
			at statement: $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)


	 in Method: void init(byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #2c8b6542a35e929698f4560c93b5cf68fb53e0b3268e298dc399955f0bfa617b)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)


Findings in Java Class: at.stefl.opendocument.java.odf.OpenDocumentCryptoUtil

	 in Method: java.io.InputStream getDecryptedInputStream(java.io.InputStream,at.stefl.opendocument.java.odf.EncryptionParameter,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r14.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer40505, $r12, $r13)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r13.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedOAEP
			at statement: virtualinvoke $r14.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer40505, $r12, $r13)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $r7 = virtualinvoke $r11.<de.rtner.security.auth.spi.PBKDF2Engine: byte[] deriveKey(byte[],int)>($r7, $i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedGCM
			at statement: virtualinvoke $r14.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer40505, $r12, $r13)


Findings in Java Class: okhttp3.Cache$Entry

	 in Method: java.util.List readCertificateList(okio.BufferedSource)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #84010ea3878845380214dc61d1bca2d2ab1cd5a47b7398629553ef89d7b065c3)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCertificate, generateCRL
			at statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer42143)

		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #84010ea3878845380214dc61d1bca2d2ab1cd5a47b7398629553ef89d7b065c3)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #84010ea3878845380214dc61d1bca2d2ab1cd5a47b7398629553ef89d7b065c3)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCRL, java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)


Findings in Java Class: net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF

	 in Method: void <init>(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #fe86d6df4f79d1062ebbc1599317d6572713990c2d231593223a215eef0fe89e)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)


	 in Method: void init(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13629, $r7, varReplacer13629)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13629, $r7, varReplacer13629)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13629, $r7, varReplacer13629)


Findings in Java Class: okhttp3.internal.Util

	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer13631)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 39

	CryptoAnalysis found the following violations. For details see description above.
	IncompleteOperationError: 5
	TypestateError: 2
	RequiredPredicateError: 12
	ConstraintError: 10
=====================================================================
