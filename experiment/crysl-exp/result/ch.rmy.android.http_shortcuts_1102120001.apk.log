0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r10
		Type: javax.net.ssl.SSLContext
		Statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>(varReplacer30935, varReplacer30936)
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: ca64ac5453048339d1293ec7703699d1154e45ee78c1b649d8b3b3ad9023e459
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.Mac
		Statement: $r12 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <d.a.a.a.m.h.b.o: java.lang.Object call()>
		SHA-256: 6ddbc8bfdbcfd668395381621165f38b953907c4bf520cc471da48f48a2c4fa0
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer21445, $r3)
		Method: <j.m0.l.d: javax.net.ssl.SSLSocketFactory m(javax.net.ssl.X509TrustManager)>
		SHA-256: 798930cd580dcebb35c601a5f5d503a7146f00ca3add37ace03c41490ab5fa50
		Secure: false
	Object:
		Variable: $r47
		Type: java.security.SecureRandom
		Statement: specialinvoke $r47.<java.security.SecureRandom: void <init>()>()
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: 4a5b16f7ea4da96b9a2f238d96ed7d18024f592f8623fe47701af62c34eb487b
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <b.d.a.a.b: java.security.MessageDigest c(java.lang.String)>
		SHA-256: a6dc49bbcde5e1a9421977d2ecc9cdb3c8e8779e0d9aae62a8b7422922e56f0d
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, $r5)
		Method: <d.a.a.a.m.h.b.o: java.lang.Object call()>
		SHA-256: 1c08cf1d80c60ce51a7c0e50a2d0eedee94f3a722a864f047220cfe1fe6887f1
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r9)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 7ac05a324707752a8fcdd9787a5fcda4e6af85c295ea6bb9f2ffcf779c41a30d
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer27751, $r2)
		Method: <j.m0.l.g: javax.net.ssl.SSLContext l()>
		SHA-256: 7e5aad53170fceccdbb9303ec4417509900d9b97ce0649610bcbb34cc8f3d9ae
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <j.m0.l.d: javax.net.ssl.X509TrustManager n()>
		SHA-256: c0fb4072786944a7edfd8a23b7f5429f6796a990fd729cc019d35773310a60fc
		Secure: false
	Object:
		Variable: $r33
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r33 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer30946)
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: de99b2b847c6c37d07521ec7e856ae512a8c76df895fb1651bee9ce306985e10
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r13.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r9, $r12, $r4, $i1)
		Method: <org.conscrypt.OpenSSLECGroupContext: java.security.spec.ECParameterSpec getECParameterSpec()>
		SHA-256: 7223ae8f08ed0dba3dafb06f8e07e30310aca7c9be856d88494b5d1bd531fdf8
		Secure: true
	Object:
		Variable: $r29
		Type: byte[]
		Statement: $r29 = virtualinvoke $r30.<java.security.MessageDigest: byte[] digest(byte[])>($r29)
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: ba0624881687c64a5db2c50bdb5d59857037cf729d64090485e7e961cc676f1a
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.bson.types.ObjectId: void <clinit>()>
		SHA-256: a346c1ce2497e0f2dff2c4f0eddc971b17bb523960b0ca5b48d250d4b7490939
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)>($r1, $r2)
		Method: <j.m0.l.g: javax.net.ssl.X509TrustManager n()>
		SHA-256: 87b81b483151d336e88af40798ae6eafe46adf12b6d13d93bfa76095184b1d96
		Secure: false
	Object:
		Variable: $r46
		Type: java.security.SecureRandom
		Statement: specialinvoke $r46.<java.security.SecureRandom: void <init>()>()
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: cf1d4b2d24a9f06ca4a959ee0bfe491e1beda0b0df76e3fd58da5e44b067ca72
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManager[]
		Statement: $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <j.m0.l.g: javax.net.ssl.X509TrustManager n()>
		SHA-256: c46441860ffe4c189dd537a2511173f61360c7baa17e3be41803ef763b36f821
		Secure: false
	Object:
		Variable: $r29
		Type: byte[]
		Statement: virtualinvoke $r46.<java.security.SecureRandom: void nextBytes(byte[])>($r29)
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: e8995094f63b6f680fb8cbcf65d5ed5af428dd35bce8bdcc1b56c332ea024dbc
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <j.m0.l.d: javax.net.ssl.X509TrustManager n()>
		SHA-256: ecc19ff0fec1a975d82fe0bde3b33e1e87c3d8d266649df9526784037e1751e3
		Secure: false
	Object:
		Variable: $i0
		Type: int
		Statement: $i0 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt(int)>(varReplacer14018)
		Method: <org.bson.types.ObjectId: void <clinit>()>
		SHA-256: 5f6f23f65f7f9e6b325f4e77468f0c6bb2f6a2ec1f1544586a946912868d59ab
		Secure: true
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r5)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: d02affd279e8743b6fd64cdf0e2dd47c30a5603be2e61d5718cf63d25b2d1a15
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r4, $r2)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: 4b73d9ea47b70e095beb17e2b4e8c62bcb1a3b70cdd913b654094befd6fbd016
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer27757, $r2)
		Method: <j.m0.l.d: javax.net.ssl.SSLContext l()>
		SHA-256: 156c43e0002597cfd56e567072973d40aafd0bf2ff3e21e17fe3b0cc120d30df
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <d.a.a.a.b.k0.r: java.lang.Object n(java.lang.Object)>
		SHA-256: 33d0c040ed3e2565e4ec648ae131383eff4298f595314a2482087a9e00f6ded5
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>
		SHA-256: 3a839c53a2e73deca07bbaf6104910cef5aa9fd6a0877ab2fecd0b969b6bc376
		Secure: false
	Object:
		Variable: $r10
		Type: javax.net.ssl.SSLContext
		Statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30955)
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: 810bd7a34e777dc0690755b07895306b6ec6d31c08cfd917b8fd6d664d13bbc9
		Secure: false
	Object:
		Variable: $r29
		Type: byte[]
		Statement: $r29 = virtualinvoke $r30.<java.security.MessageDigest: byte[] digest(byte[])>($r29)
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: ba0624881687c64a5db2c50bdb5d59857037cf729d64090485e7e961cc676f1a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <k.i: k.i b(java.lang.String)>
		SHA-256: dca818cc6224580ef9f68104e02314a35aa440c7cca3ebd42281be3017a81005
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r12.<javax.crypto.Mac: byte[] doFinal(byte[])>($r11)
		Method: <d.a.a.a.m.h.b.o: java.lang.Object call()>
		SHA-256: 42b121cd907afe48dd51cb463f680d3ce14ebc352f5b22898f0efd0cf9becccc
		Secure: false
	Object:
		Variable: $r29
		Type: byte[]
		Statement: $r29 = virtualinvoke $r23.<java.security.MessageDigest: byte[] digest(byte[])>($r29)
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: bccf890ed673149605fabaf3177c1ee79cc65236ea8cf76541400a375575acad
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <j.m0.l.h: javax.net.ssl.X509TrustManager n()>
		SHA-256: c180547faa36e648e7c8c3c296d52765e42b8a21e4f86f3efe5030fdfa87b655
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, $r5)
		Method: <d.a.a.a.m.h.b.o: java.lang.Object call()>
		SHA-256: 52b1a375a755bdfbaeb3f4c38717005b7e596ba46b5e985cf77067b599ef5ba5
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer27753)
		Method: <j.m0.l.h: javax.net.ssl.SSLContext l()>
		SHA-256: 16cefd224359511e940a43470e90863b93fd717df748cf0149f9eb9d5dcaae5c
		Secure: false
	Object:
		Variable: $r8
		Type: java.lang.String
		Statement: $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r8)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: fb24971f565cb4681c3c1e192adc31a35b4a987353817f6def6d3d265ac75389
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>(varReplacer21424, varReplacer21425)
		Method: <j.m0.l.c: javax.net.ssl.X509TrustManager n()>
		SHA-256: 4d7ab24ceaa250e711dd8f93f5e407071564f6974a3f42c71ebf8bcefd871f6a
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.bson.types.ObjectId: void <clinit>()>
		SHA-256: a346c1ce2497e0f2dff2c4f0eddc971b17bb523960b0ca5b48d250d4b7490939
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <k.i: k.i b(java.lang.String)>
		SHA-256: d3f5caf22661a936ed4bb469723774d415b659e664da0c1e791bfef8c9c1d613
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <d.a.a.a.b.k0.r: java.lang.Object n(java.lang.Object)>
		SHA-256: a09b80d15a5c3a83fc45c99c08b45a9bf403ff434be964833dc60998093dcc44
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r9)
		Method: <d.a.a.a.m.h.b.n: java.lang.Object call()>
		SHA-256: 4d4d4eb70eef6f4158251c9956898bfa11cc59c90271ec8d1cfead5a2e28c4ed
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.PublicKey
		Statement: $r7 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 9d110d3f3943f5f1538d33e3d18932b71ca7accf2f86c174ab417a2b10712fb0
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager createDefaultX509TrustManager()>
		SHA-256: d7db0678768c97735c68979285b1a6b89957fe1ed86537609dd118ad4f4be8cb
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyFactory
		Statement: $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r8)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 6635af12fb8498a7bf018ada279831a6e3024bb07fe12c7daed2b6fbc372e6bb
		Secure: false
	Object:
		Variable: $r29
		Type: byte[]
		Statement: $r29 = virtualinvoke $r30.<java.security.MessageDigest: byte[] digest(byte[])>($r29)
		Method: <b.d.a.a.b: j.f0 b(j.k0,j.f0,java.util.Map)>
		SHA-256: ba0624881687c64a5db2c50bdb5d59857037cf729d64090485e7e961cc676f1a
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r4)
		Method: <d.a.a.a.m.h.b.n: java.lang.Object call()>
		SHA-256: 231e598907399453145d493cdbc6580f254ed143308b805230a2907bc9ccfdf0
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <k.v: k.i b(java.lang.String)>
		SHA-256: a9929c1e06096381e5db51114b820676d47635f42e718b00d513e859e40864a3
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r5)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: e75571d33abb1b5e330ac5b78fcc009ac5fa3b4053acda20dad8234c0598d879
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r8 = virtualinvoke $r12.<javax.crypto.Mac: byte[] doFinal(byte[])>($r11)
		Method: <d.a.a.a.m.h.b.o: java.lang.Object call()>
		SHA-256: 37cb4c43ea8b44fa4caaa752a0618da392af349755a73fa9a2067eff36b9fef6
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <j.m0.l.c: javax.net.ssl.X509TrustManager n()>
		SHA-256: dc3a86eafd13c758a63011e26df9c84907fb163756e08e23102ad1f795f9669a
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <k.v: k.i b(java.lang.String)>
		SHA-256: ce72dccb85895cfe260cd0ea5268506c81b08f60e3bb535602b1813a53dba369
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.cert.CertificateFactory
		Statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer37162)
		Method: <j.d$b: java.util.List a(k.h)>
		SHA-256: 9d6dc145d416fc24d87d2650a98fa10d8c499465fe21de74d8d94606733573f8
		Secure: false
	Object:
		Variable: $r27
		Type: java.security.KeyStore
		Statement: $r27 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer30948)
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: 67882a3c7e6c095a3b0acf92d3952d6c8a0be211d1ecc726ee80e2041b75bb70
		Secure: false
	Object:
		Variable: $r9
		Type: java.lang.Object[]
		Statement: $r9 = virtualinvoke $r33.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <d.a.a.a.h.r: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)>
		SHA-256: a843684469efd32d1c5c209bcdb602e1bc44e5097b468550917faf4cc58c29bd
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager createDefaultX509TrustManager()>
		SHA-256: 51a4d7e795f8c02c7f226c20bdba0f2b13e84b47ee14a16329aae58ca503ab1
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <j.m0.l.h: javax.net.ssl.X509TrustManager n()>
		SHA-256: fa8efaa709169a1debb60b5d666124f668f083d671d462f58199fc5bc48e35a6
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.cert.CertificateFactory
		Statement: $r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer38116)
		Method: <org.conscrypt.SSLUtils: java.security.cert.CertificateFactory getCertificateFactory()>
		SHA-256: 7a7bb7cefa4a00555e75349222dd8ae765ad5ef6c1fe8d13c0ac2c597b7c298b
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer27755, $r2)
		Method: <j.m0.l.c: javax.net.ssl.SSLContext l()>
		SHA-256: 39dddd09248c7adf32fae4add2bef7190c77fb913e24b3da9137383cc9849e90
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: f325059ee6f08c9776202e677308b0f19ca0767a6821e36b4f64a531d072fa45
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer38788)
		Method: <com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>
		SHA-256: 2d5a3b5eb9a8ea4196b7451be7117a8929f8a06cdef8cbdd83b1ae4c2e59c30d
		Secure: false
	Object:
		Variable: $i0
		Type: int
		Statement: $i0 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt(int)>(varReplacer14019)
		Method: <org.bson.types.ObjectId: void <clinit>()>
		SHA-256: 4c229d6aa3940da5f3579cb9abe0a8d53d6bc883dc2df8c9284b23c11d50cdfe
		Secure: true

Findings in Java Class: j.m0.l.d

	 in Method: javax.net.ssl.SSLSocketFactory m(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21439, $r6, varReplacer21439)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21439, $r6, varReplacer21439)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21439, $r6, varReplacer21439)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #798930cd580dcebb35c601a5f5d503a7146f00ca3add37ace03c41490ab5fa50)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer21445, $r3)


	 in Method: javax.net.ssl.SSLContext l()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #156c43e0002597cfd56e567072973d40aafd0bf2ff3e21e17fe3b0cc120d30df)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer27757, $r2)


	 in Method: javax.net.ssl.X509TrustManager n()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer21429)


Findings in Java Class: j.m0.l.h

	 in Method: javax.net.ssl.SSLContext l()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #16cefd224359511e940a43470e90863b93fd717df748cf0149f9eb9d5dcaae5c)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer27753)


	 in Method: javax.net.ssl.X509TrustManager n()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer21417)


	 in Method: javax.net.ssl.SSLSocketFactory m(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21434, $r10, varReplacer21434)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21434, $r10, varReplacer21434)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21434, $r10, varReplacer21434)


Findings in Java Class: j.m0.l.c

	 in Method: javax.net.ssl.SSLContext l()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #39dddd09248c7adf32fae4add2bef7190c77fb913e24b3da9137383cc9849e90)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer27755, $r2)


	 in Method: javax.net.ssl.X509TrustManager n()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer21423)


Findings in Java Class: d.a.a.a.h.r

	 in Method: j.d0 a(android.content.Context,ch.rmy.android.http_shortcuts.data.models.ClientCertParams,boolean,java.lang.String,java.lang.String,boolean,long,java.lang.String,java.lang.Integer,j.r)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ca64ac5453048339d1293ec7703699d1154e45ee78c1b649d8b3b3ad9023e459)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>(varReplacer30935, varReplacer30936)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ca64ac5453048339d1293ec7703699d1154e45ee78c1b649d8b3b3ad9023e459)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>(varReplacer30935, varReplacer30936)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #67882a3c7e6c095a3b0acf92d3952d6c8a0be211d1ecc726ee80e2041b75bb70)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r27.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r29, $r31)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #67882a3c7e6c095a3b0acf92d3952d6c8a0be211d1ecc726ee80e2041b75bb70)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r27.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r29, $r31)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #de99b2b847c6c37d07521ec7e856ae512a8c76df895fb1651bee9ce306985e10)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r33.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r27, $r31)

		ConstraintError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #de99b2b847c6c37d07521ec7e856ae512a8c76df895fb1651bee9ce306985e10)
			First parameter (with value "X509") should be any of {PKIX, SunX509}
			at statement: $r33 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer30946)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #de99b2b847c6c37d07521ec7e856ae512a8c76df895fb1651bee9ce306985e10)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r33.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r27, $r31)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #810bd7a34e777dc0690755b07895306b6ec6d31c08cfd917b8fd6d664d13bbc9)
			First parameter (with value "SSL") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30955)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r34, $r37, varReplacer30943)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r34, $r37, varReplacer30943)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r33.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r27, $r31)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r34, $r37, varReplacer30943)


Findings in Java Class: k.v

	 in Method: k.i b(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #a9929c1e06096381e5db51114b820676d47635f42e718b00d513e859e40864a3)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r5 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a9929c1e06096381e5db51114b820676d47635f42e718b00d513e859e40864a3)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: k.i

	 in Method: k.i b(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #d3f5caf22661a936ed4bb469723774d415b659e664da0c1e791bfef8c9c1d613)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: j.d$b

	 in Method: java.util.List a(k.h)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #9d6dc145d416fc24d87d2650a98fa10d8c499465fe21de74d8d94606733573f8)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCRL, java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)
			at statement: $r10 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r9)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #9d6dc145d416fc24d87d2650a98fa10d8c499465fe21de74d8d94606733573f8)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertificate, generateCertPath, generateCRL
			at statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer37162)

		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #9d6dc145d416fc24d87d2650a98fa10d8c499465fe21de74d8d94606733573f8)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r10 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r9)


Findings in Java Class: org.conscrypt.SSLUtils

	 in Method: java.security.cert.X509Certificate decodeX509Certificate(java.security.cert.CertificateFactory,byte[])
		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #7a7bb7cefa4a00555e75349222dd8ae765ad5ef6c1fe8d13c0ac2c597b7c298b)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)


	 in Method: java.security.cert.X509Certificate[] decodeX509CertificateChain(byte[][])
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #7a7bb7cefa4a00555e75349222dd8ae765ad5ef6c1fe8d13c0ac2c597b7c298b)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertificate, generateCertPath, generateCRL
			at statement: $r4 = staticinvoke <org.conscrypt.SSLUtils: java.security.cert.X509Certificate decodeX509Certificate(java.security.cert.CertificateFactory,byte[])>($r2, $r3)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #7a7bb7cefa4a00555e75349222dd8ae765ad5ef6c1fe8d13c0ac2c597b7c298b)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertificate, generateCertPath, generateCRL
			at statement: $r2 = staticinvoke <org.conscrypt.SSLUtils: java.security.cert.CertificateFactory getCertificateFactory()>()


Findings in Java Class: b.d.a.a.b

	 in Method: java.security.MessageDigest c(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a6dc49bbcde5e1a9421977d2ecc9cdb3c8e8779e0d9aae62a8b7422922e56f0d)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


Findings in Java Class: com.facebook.stetho.websocket.WebSocketHandler

	 in Method: java.lang.String generateServerKey(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #2d5a3b5eb9a8ea4196b7451be7117a8929f8a06cdef8cbdd83b1ae4c2e59c30d)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer38788)


Findings in Java Class: d.a.a.a.m.h.b.o

	 in Method: java.lang.Object call()
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r12.<javax.crypto.Mac: void init(java.security.Key)>($r13)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, $r5)


Findings in Java Class: org.conscrypt.OpenSSLX509Certificate

	 in Method: java.security.PublicKey getPublicKey()
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r7 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)

		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r9)


	 in Method: void verifyInternal(java.security.PublicKey,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)


Findings in Java Class: org.conscrypt.SSLParametersImpl

	 in Method: javax.net.ssl.X509TrustManager createDefaultX509TrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer31036)


Findings in Java Class: j.m0.l.g

	 in Method: javax.net.ssl.X509TrustManager n()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer21411)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 58

	CryptoAnalysis found the following violations. For details see description above.
	IncompleteOperationError: 5
	HardCodedError: 2
	NeverTypeOfError: 2
	TypestateError: 3
	ConstraintError: 11
	RequiredPredicateError: 20
=====================================================================
