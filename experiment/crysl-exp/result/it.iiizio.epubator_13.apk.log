0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.itextpdf.text.pdf.PdfEncryption: boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])>
		SHA-256: 60975a21a684b2ba2d1b73e0c2f27e9b61f2fa7bf035dbf5b1d7b3b4e4f33eca
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4792)
		Method: <com.itextpdf.text.pdf.PdfEncryption: boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])>
		SHA-256: 853e01e8db220fa841c0965443e4945a43b8e06e5f72c227f8dafabbe7fa7d53
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.itextpdf.text.pdf.PdfPublicKeySecurityHandler: void <init>()>
		SHA-256: dd6b1c4917e70c51ad4099a7151e602f2c5913dbb831d77fc5974257d09cf92f
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <com.itextpdf.text.pdf.PdfPublicKeySecurityHandler: void <init>()>
		SHA-256: 94a72c58557b7499ae339ccaddc26783d4e8f2479f98c3b8aaa1a96b1bd4d44d
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4773)
		Method: <com.itextpdf.text.pdf.PdfEncryption: void <init>()>
		SHA-256: aca3997534a9af937cc30a8402fcdce185300dc2360eeab97930e03fd5390753
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.itextpdf.text.pdf.PdfEncryption: boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])>
		SHA-256: b3b91eab8239bbfcda01bcaea00fa23f9b73e4fabb8c0b23c951b8c48b428d39
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.KeyGenerator
		Statement: $r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer5085)
		Method: <com.itextpdf.text.pdf.PdfPublicKeySecurityHandler: void <init>()>
		SHA-256: d013ee93dcd13eb2987c296b2675cdc2c93bd7a9133fc301e3ee6cef00199387
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.itextpdf.text.pdf.PdfEncryption: boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])>
		SHA-256: a5e66ba229dd8d2b39b8d2011d17706bebc0f99bc44fa8bc8159ee04d404702d
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = interfaceinvoke $r5.<javax.crypto.SecretKey: byte[] getEncoded()>()
		Method: <com.itextpdf.text.pdf.PdfPublicKeySecurityHandler: void <init>()>
		SHA-256: 5c4027fccf0850b161d93b65f1f920f18da22ac322d752c79ece6284995a0be
		Secure: true
	Object:
		Variable: $r39
		Type: java.security.MessageDigest
		Statement: $r39 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4477)
		Method: <com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>
		SHA-256: 5886b0c3361d44daa5bca0b401187084698d341910245c20837c43a51165659b
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.itextpdf.text.pdf.PdfEncryption: boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])>
		SHA-256: a5e66ba229dd8d2b39b8d2011d17706bebc0f99bc44fa8bc8159ee04d404702d
		Secure: true
	Object:
		Variable: $r39
		Type: java.security.MessageDigest
		Statement: $r39 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4483)
		Method: <com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>
		SHA-256: 38beed61cebf1624a4ca40778f79777bbf8cb7b20e79a07edce124f62f1bb208
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r39.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>
		SHA-256: fd57d6a2cedf7e919cfdeffd8b62eb2ef2c704660190d45f3e5a6b7b5e341ecf
		Secure: true

Findings in Java Class: com.itextpdf.text.pdf.PdfReader

	 in Method: void readDecryptedDocObj()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #5886b0c3361d44daa5bca0b401187084698d341910245c20837c43a51165659b)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r39 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4477)


Findings in Java Class: com.itextpdf.text.pdf.PdfEncryption

	 in Method: void <init>()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #aca3997534a9af937cc30a8402fcdce185300dc2360eeab97930e03fd5390753)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4773)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 13

	CryptoAnalysis found the following violations. For details see description above.
	ConstraintError: 2
=====================================================================
