0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Alive 23084  5000
Alive 22381  5000
Alive 20289  5000
Alive 20151  5000
Alive 19880  5000
Alive 19139  5000
Alive 22104  5000
Alive 19316  5000
Alive 19789  5000
Alive 19928  5000
Alive 21662  5000
Alive 20582  5000
Alive 17902  5000
Alive 21161  5000
Alive 17598  5000
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: java.security.KeyPair generateKeyPair()>
		SHA-256: 3a1d36d3c64d37bef412d8d08277872b765276abf2e860fb8890730752d0021a
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char)>
		SHA-256: f6029f09e7eaad0a79299673ca4a747029813212ccf99c394d2770a03fc5295a
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.SecureRandom
		Statement: specialinvoke $r8.<java.security.SecureRandom: void <init>()>()
		Method: <org.tron.common.crypto.ECKey: void <clinit>()>
		SHA-256: b55aa454218ad11183e19415b20bfa1e41175f6fd7f50c286d80bcc9240f86f3
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)
		Method: <org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 7e607f2b0148a3c2f0cc3a50502aa1d8d622c22ef1a312f9fed011b06d0c82f4
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 98a4790d5b450989feffa0477bd080ce5bfcb475d8b6c0f0cc215a227bfbb3dc
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: c9e1ff5450f21aae65af053d6ed29f81c5a7b267991078defbfa3059af0e266a
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 7331639808f0d8733f5df0230ac3a48eecf3cff3ed703c4c0022f9cd7cd80756
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: b0d1ba3da8064ca082b6ab923adae7a1f903b06296e62e14fc3b962758995d3f
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.KeyPair
		Statement: $r5 = virtualinvoke $r4.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.tron.common.crypto.ECKey: void <init>(java.security.Provider,java.security.SecureRandom)>
		SHA-256: 125bdff1fb4e40bb0dea77d4bfdc361b644a25d0c6057713ec6c2305c5e06107
		Secure: false
	Object:
		Variable: varReplacer458
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer458)
		Method: <com.eletac.tronwallet.bip39.BIP39: java.lang.String encode(byte[],java.lang.String)>
		SHA-256: c8e87a8ecfc637dc9c95af55fb44a2247f97348b5d84c2265a7168a78abe93a
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher: com.google.common.hash.HashCode hash()>
		SHA-256: 498aa274b0e0dc658a96e5b82797c2ef859caa8cc0a4a03329fbcf0be8023051
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: a9c19b12994234db6ec00ed5b541d5738b556e23d3870b731ea4245dbf932de7
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>
		SHA-256: 3a839c53a2e73deca07bbaf6104910cef5aa9fd6a0877ab2fecd0b969b6bc376
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r12, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,java.security.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: c7c434ba14780f6c3b9eb57cd97eaba20db8827ea32cddaaa5681baa0f5c9353
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: varReplacer48769
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer48769)
		Method: <com.eletac.tronwallet.bip39.BIP39: byte[] decode(java.lang.String,java.lang.String)>
		SHA-256: e0569799b5c6da9f2bb99c0ad7fa0173396f090a221e96e5147632d211ffd826
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer48769)
		Method: <com.eletac.tronwallet.bip39.BIP39: byte[] decode(java.lang.String,java.lang.String)>
		SHA-256: 2d95acb47d9152a8c8ad2251606ad28042b72baa7cb22998edf12b0bad72f07b
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 52666556eb0b9e0106968c3639d610cef0bbf743129b6a2f13e952dd3c4ccbd6
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer179)
		Method: <org.tron.common.crypto.SymmEncoder: byte[] AesEcbDecode(byte[],javax.crypto.SecretKey)>
		SHA-256: 6d1107c7146298c0938e66bac07b6aeb0068652330e7974c7ccaf69bb143b55e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>($r1, $r2)
		Method: <org.tron.common.crypto.Hash: byte[] sha3(byte[])>
		SHA-256: 21c58cd7e18963e3bd35671de8099bef246da9c509ce2cd10da7db090a7b2405
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50278)
		Method: <org.tron.common.crypto.jce.ECKeyPairGenerator: void <clinit>()>
		SHA-256: a55ffeee085a5afbbf38cb4076c921584c89c2a1ee2a370c6c4185e8d3a2b5c2
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECGOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: caabe0390e3d2386e10c04d6d72b0b44e335e1623efc6992e7ef060aaafe4388
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer456)
		Method: <com.eletac.tronwallet.bip39.BIP39: java.lang.String encode(byte[],java.lang.String)>
		SHA-256: af6e8c5aac02eaf16ece1b1e65b59eb7261eee37c8042d5b20fe5e12a7ecdcc0
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 6b8822e70d4604e23c0ea07692bf2c9c1daaa36d64fb48b6df14aae465189041
		Secure: true
	Object:
		Variable: $r9
		Type: javax.net.ssl.SSLContext
		Statement: $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer23496, $r8)
		Method: <io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSocketFactory()>
		SHA-256: 5c2edd4af4250d38a077db33523ab835d9934799e8f8d2d0abef86eafbbed2b2
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.tron.common.crypto.Hash: byte[] sha3(byte[])>
		SHA-256: 67283e653545271d0e8770f690f635be03e6e71867323eeb371ae75fb01b6132
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: 533790f741ccce52b37b13a1f5b15685cf6be9dbae4d3ca5f2ae063c0b550248
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r2, $r5, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>
		SHA-256: 8afc5c7eb96b36d8829bf9167e10c334a2090367af9364094726e410dd8ac903
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()>
		SHA-256: 10e44a13b9673e028d0f4d3f5109fabf59dadb06c9f99ca163ca28c77d5be0de
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer44893)
		Method: <com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>
		SHA-256: a8caf0f116d651cb8159f64ac15567e79b60ed83fa52a719100249de1b3fa22
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r13
		Type: java.security.SecureRandom
		Statement: $r13 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>(varReplacer23501, $r8)
		Method: <io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSocketFactory()>
		SHA-256: 526badbdc03775174fe9a4cabf7b742d81df134b1a59058217249114ac37caf9
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.google.common.hash.MessageDigestHashFunction: java.security.MessageDigest getMessageDigest(java.lang.String)>
		SHA-256: f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r12
		Type: javax.net.ssl.TrustManager[]
		Statement: $r12 = virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSocketFactory()>
		SHA-256: 3c7ffcd841efbdc27935afb2d30c382354e5d1567a1f7a5e571b1d700584d6b5
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <org.spongycastle.crypto.signers.PSSSigner: byte[] generateSignature()>
		SHA-256: 7bb46be8410927887679833b3436133d228350583bc65057a371d925a6056b6c
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: c298353e5545f70cbdb99b3ca11ca15c9b136f9fad09c5830e7caf4e4e6a61a9
		Secure: true
	Object:
		Variable: $r9
		Type: javax.net.ssl.SSLContext
		Statement: $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer23500, $r8)
		Method: <io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSocketFactory()>
		SHA-256: e8f74801817affca30cb23d09cf54fbe702fd0975832c6d29fb2685150f97e2d
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: e8268e06cdec9b55dd4e3a8d37eef42c3e6d25c634d5bfaad5469f6fbc26035f
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r3, $r6, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey: void <init>(org.spongycastle.crypto.params.DHPrivateKeyParameters)>
		SHA-256: 2a4b346577c9be66b1ecc846096673fb16cf25cfe658c92b9a2f9f8f9ed3a857
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50611)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: dde11d5c0dfb04f4e9376c692faf54fa6a81bd1c70dde30f84a3ad6f1ab84f21
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>
		SHA-256: ff685f32e7a7f750cd456b35d0be518bacf6cdd5ba40802666534e9df3ec3217
		Secure: false
	Object:
		Variable: $r19
		Type: java.security.KeyPair
		Statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r20, $r21)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: f165deac9d3236c4d3b1e050ecb8c2be103af1c92a60e23fc6dbdb1549a2f087
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r3, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: d4cbac53928f967531dedb11ac8d6636870d67adf3c6b6eb3f336df409ab40bb
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer458)
		Method: <com.eletac.tronwallet.bip39.BIP39: java.lang.String encode(byte[],java.lang.String)>
		SHA-256: d080f5005037bcd06dfa4f2ea6f160915d78c26bba7d5ce5b37d5fb4b58bbe87
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r5)
		Method: <io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSocketFactory()>
		SHA-256: 691486648c012cf9a1aab538ca1fc01423546c8a572abec5d78fd983f209a888
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.gmss.GMSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2dc8cd1c1fa7979cada7be8f8320f93342af2ff1963c7c499a3420b2b9545bfa
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 55769ba8c754825ca57452ac3077c95d1c966f44b3e5ff2959f34465568fc0b3
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r9.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r10, $r11)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: ca8c57f00e636666523b3803cf2d449c7668aea2653306a5d436a81914fd7df0
		Secure: true
	Object:
		Variable: $r10
		Type: javax.crypto.Cipher
		Statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer48765)
		Method: <com.eletac.tronwallet.bip39.BIP39: byte[] decode(java.lang.String,java.lang.String)>
		SHA-256: 5eb53d1726d6de5c78c12071cd69e32758d6222cd3f11e1200e2d470d1fdd0bd
		Secure: false
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r7, $r8, $r2, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>
		SHA-256: bcf570b34f8a17ec2bf4d52452528fe052d0e6bfbcbc0e9448c15568d3730cec
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50609)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 49e34f414b0e6b9735b4cd8e682fbeb0db867358b02c12edb5e02e64e6971ea2
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <org.tron.common.utils.Utils: void <clinit>()>
		SHA-256: 21751f7aecf1d291eda3d279cbf29dd85f2a1ab722649b63742a78fd41b9d237
		Secure: true
	Object:
		Variable: $r15
		Type: java.security.MessageDigest
		Statement: $r15 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)>($r14, varReplacer29134)
		Method: <org.spongycastle.x509.AttributeCertificateHolder: boolean match(java.security.cert.Certificate)>
		SHA-256: 13653b41c8fc046037f70a49152e83201d0f7c2eb4769d516c89c785c9be0663
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>($r4)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>
		SHA-256: 4819013ec02a19f964ac367c7eb8af224b504304e06aab9fd319e9eae6e83037
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r3)
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] generateSignature()>
		SHA-256: 153ecb1a57e7fd3a3f9212bf84d10102d6cb1bcca8396308797653bf2209f59c
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.x509.ExtendedPKIXParameters
		Statement: specialinvoke r0.<java.security.cert.PKIXParameters: void <init>(java.util.Set)>($r1)
		Method: <org.spongycastle.x509.ExtendedPKIXParameters: void <init>(java.util.Set)>
		SHA-256: bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r14.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r7, $r0, $r12, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertToSpec(org.spongycastle.asn1.x9.X962Parameters,org.spongycastle.math.ec.ECCurve)>
		SHA-256: 3b49035e3a2b42825dd389c260b00d5f12eb6355e6f341cd18292a31559abfb9
		Secure: true
	Object:
		Variable: $r16
		Type: byte[]
		Statement: $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.spongycastle.x509.AttributeCertificateHolder: boolean match(java.security.cert.Certificate)>
		SHA-256: 733e42bbdc4639c4f728ddf34e9b407d27b5d8c13567d81937f01e426dc09e8e
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 6dae500fa4127477f702f7c8db5b65ac00e8420fed109375c053548083b8d090
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: c908257ebef1e44e27421c3dc6127a4c79990e1515e273132ea2c2cb020fcdee
		Secure: true
	Object:
		Variable: varReplacer12194
		Type: java.lang.String
		Statement: $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>(varReplacer12194, $r1)
		Method: <org.tron.common.crypto.jce.ECKeyFactory: java.security.KeyFactory getInstance(java.security.Provider)>
		SHA-256: 4996be5ee7eb6292b41035ebaa786342cb05b576d2c9647061123c9b94e2b33d
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r18.<java.security.Signature: byte[] sign()>()
		Method: <org.tron.common.crypto.ECKey: org.tron.common.crypto.ECKey$ECDSASignature doSign(byte[])>
		SHA-256: ffa398fa69299b6594a23a28809abdd0805d4fa69e7aed7746280882568222af
		Secure: false
	Object:
		Variable: $r32
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r32.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r24, $r30, $r1, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: eb890683474d5b04376cd2873dd5d7806c0eec611cde3658ab1e0375a60c9b04
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.cert.CertificateFactory
		Statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer47961)
		Method: <com.squareup.okhttp.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>
		SHA-256: 25b09f04b76adbd6fd856e08f194fe639ec9e814d3313c80154596d52dcf3dc2
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r10.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r0, $r1, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 2dbb4bedacfd822a104521782e3bf91eb66ffda2a8dd5998231726cc0e791ed5
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 4bd6151add7d31cc4c6c1b467a5fcba26d1274b4e5b8f364b9492ad636053fa7
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 6c7ef9fa4e7bff262cf03d9de0acc4ec162191195a2243ed7af7fe97a2eb9e56
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r5, $r13, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 5c7feb4cfb8d8151025093d942db5e43c695a3cee0ea35deba16aa325fdb88e9
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.PrivateKey
		Statement: $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0)
		Method: <org.tron.common.crypto.ECKey: java.security.PrivateKey privateKeyFromBigInteger(java.math.BigInteger)>
		SHA-256: 243c87ffd0a168d2958215f08a3286ff1d3f1103dc5941ff1c33f1e0a092b99e
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)
		Method: <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: cb79cd7b201479506b2f0eadb1108d9d0e823c44a83388b719962de82b4cd7cc
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.PrivateKey
		Statement: $r6 = virtualinvoke $r5.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <org.tron.common.crypto.ECKey: void <init>(java.security.Provider,java.security.SecureRandom)>
		SHA-256: 103eb59ea1ac1463930ebe78960d1ea21dfabae8a7fb6e9e6addb25e81b6ebc0
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r12.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r13, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,org.spongycastle.jce.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: a1d5c1019a937ff6b0dec47095ae3215e200e9859a8bed325078ed91f3857d0c
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r14.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r7, $r0, $r12, varReplacer37329)
		Method: <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertToSpec(org.spongycastle.asn1.x9.X962Parameters,org.spongycastle.math.ec.ECCurve)>
		SHA-256: 120a48d6c1d894b2fab7e81491cd5de9dbb935b0c3f03d94aec9bd20faad9fc
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()>
		SHA-256: 10e44a13b9673e028d0f4d3f5109fabf59dadb06c9f99ca163ca28c77d5be0de
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher: com.google.common.hash.HashCode hash()>
		SHA-256: 498aa274b0e0dc658a96e5b82797c2ef859caa8cc0a4a03329fbcf0be8023051
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 55769ba8c754825ca57452ac3077c95d1c966f44b3e5ff2959f34465568fc0b3
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.KeyPair
		Statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: aadd026eb861686e693690e72b434ddb064fe8bbbf9e5c4e4de2a60a071d8baf
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()>
		SHA-256: 10e44a13b9673e028d0f4d3f5109fabf59dadb06c9f99ca163ca28c77d5be0de
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer49418)
		Method: <com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: 63e59055d590f3a2102b3126f117b9b0310ac17d0e9d5cfb0a0766e8f79f0296
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: c9e1ff5450f21aae65af053d6ed29f81c5a7b267991078defbfa3059af0e266a
		Secure: false
	Object:
		Variable: $r1
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, $r1)
		Method: <org.tron.common.crypto.SymmEncoder: javax.crypto.SecretKey restoreSecretKey(byte[],java.lang.String)>
		SHA-256: 23c238a76af2ef60b6ff6f35780db35de579cdbdc354b0258e59135e083b23d
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.ElGamalEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: cc0b332bb2ddc847ca308294e1c87841df1bdcc2359c6b4559abe498d8131c20
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.OAEPEncoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2927d56a192959dc3453ff63fb3830152d4c89781cce727cc1398f859f78edbf
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 75eb0cf148367f1ee1d5e20abbce2e3daa8e1c823696bec394a05f21805266a3
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: df219bb8c1e6605e76990d4c24e698562ea60e9f06c44869587c4e57c87e35ab
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r5, $r6)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.crypto.params.DSAPublicKeyParameters)>
		SHA-256: 9390edae09a93724017ade479bb47ea94287e6460977d2dad3759cd566636f64
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece: java.security.KeyPair generateKeyPair()>
		SHA-256: 2e52b2f291accd37106d2d4478ace52d4b51e6e46eef46f4e2f27c1f7a220e07
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50606)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: e206ece3fd1581d98e907d3d600ab6cb9fd393188450e31715e8740d89711fb9
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c47b6631ce3720d818beeb3ff632397f4377b2c7bad13224726fa6668bbc6f5
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ad09a8cc451d7562d765a3c3953e026b09435e52717c46ee70f292549e8a933e
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>($r4)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlockOrRandom(byte[],int,int)>
		SHA-256: f0d838aba1c9e27b028a361659061451d28753724f242b369ab4684652f24999
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r6, $r7)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(org.spongycastle.crypto.params.DSAPrivateKeyParameters)>
		SHA-256: 2d5d5ac1c460f68032e60a336ee4552b59000b4adb566ea09230715136a1ffd8
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50616)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 707ca9141a6b3a73ff2f6baae5324614a5823f699939e6f585c791fa9ca9ecbe
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECNRSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 9280f6752b6e6221628d06f9d60b4341d2a16061cd2ae2c26b66d065728b8af7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50615)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 6b125a01227168a45fd5128a960ab7c76bd7261137d8766321597e4a7da1a623
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.RSABlindedEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.PublicKey
		Statement: $r7 = virtualinvoke $r5.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <org.tron.common.crypto.ECKey: void <init>(java.security.Provider,java.security.SecureRandom)>
		SHA-256: ea07c9db4db700a154990524d7f647378b9903f4e6194365d6c0314de84cd4df
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void initializeDefault()>
		SHA-256: e372c8d5f3c022f0420723fb49c590e613e0421c79523205a6835ab17f0f1c15
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r3, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: e7d0902b0b50c6f8eb7ec8fcd05f581518ec34abb6f854a0ed3326ac6a695ffd
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initializeDefault()>
		SHA-256: d5445d664decee291ee585f94dd38d9d5a5b6785ec803c749ff1f9479b869078
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r2, $r3, $r4, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,java.math.BigInteger)>
		SHA-256: b36d50207c12d926e435b859cb9848007d52f50b2e62c847e597de1f84f657c6
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r3, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: 939a751b2a1599b544f502cdc0b93a80f912455cc87ed0d1dbd6a712fda08010
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 447306ffd1f9c477d4e0234ba8415fc2dcc63689de4572fb5a672197e634a45c
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.KeyPairGenerator
		Statement: $r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>(varReplacer50279, $r1)
		Method: <org.tron.common.crypto.jce.ECKeyPairGenerator: java.security.KeyPairGenerator getInstance(java.security.Provider,java.security.SecureRandom)>
		SHA-256: 9a9481d897b677a94c913681c2bf47a86f165b4f417481d60c13154b7bad08bb
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.Signature
		Statement: $r0 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>(varReplacer49264, $r1)
		Method: <org.tron.common.crypto.jce.ECSignatureFactory: java.security.Signature getRawInstance(java.security.Provider)>
		SHA-256: 71d7254aa9dc6e2542725347321a42a53ca1e4cc0bd1afc60c3805ccdbde819
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 2f96be90287037dd5aa521a81412c6567fe97ad3bdc0a3e0dd37cb2855cfb876
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: c9e1ff5450f21aae65af053d6ed29f81c5a7b267991078defbfa3059af0e266a
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initializeDefault()>
		SHA-256: 6fc5ae8de838d930d90af541e0c9e6ef7f5c576ff89b5cbca0fd6d98a8b5123b
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.KeyFactory
		Statement: $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>(varReplacer12194, $r1)
		Method: <org.tron.common.crypto.jce.ECKeyFactory: java.security.KeyFactory getInstance(java.security.Provider)>
		SHA-256: 582053571a2ae50a6b456b5a3b2c6ae64244fd475fba1cc43d5d9faa3ca2c57b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: b9c970d7ca75c43cb7258988e82963e870aab49d0877fadda916613732dffc1d
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSTU4145Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: bb98eee2eb82fb2c71e59ff99dcc6ac412ba5d86e67e379f475f490796e58a35
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer45498)
		Method: <com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>
		SHA-256: e26a0d4bdfc5ad2e53de2c24c45531fd53359fe130791100bdbafdfaabaa9065
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECDSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: f3053cf85ff0ce748590d7e6a4da3184d4158a2e3d38a0473e74cc66757dd76
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50610)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 6c3bac72660733784399db77c0751f462d195a19ecc00b7f1f152279fe8ad5be
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ec9b0ac4a030d94fe97f5bc8789d3a331d3ff2c1b0b22683dd97941464e25d7
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()>
		SHA-256: 10e44a13b9673e028d0f4d3f5109fabf59dadb06c9f99ca163ca28c77d5be0de
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer47862)
		Method: <org.tron.common.crypto.SymmEncoder: byte[] AesEcbEncode(byte[],javax.crypto.SecretKey)>
		SHA-256: bd088f09ac4d1f0bd1fea89d56a3e55b4a6b64c56251952f639519a89e7f390d
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.GOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 61b7887e2cfe6269c9dc5ed1565a2d9c81d2ae6237d2a5bf20c73d26a54cd85c
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer184)
		Method: <org.tron.common.crypto.Hash: void <clinit>()>
		SHA-256: 81718d744344e39b3a7ff7e7e96c46d408c8e8dd1b23d0059dc56323f95076cf
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, $r1)
		Method: <org.tron.common.crypto.SymmEncoder: javax.crypto.SecretKey restoreSecretKey(byte[],java.lang.String)>
		SHA-256: 9b0e00b64bdf27f4a80f633229c8c4553b4d7646d35d1bdc08754dc42028cd98
		Secure: false

Findings in Java Class: io.grpc.okhttp.internal.Platform

	 in Method: io.grpc.okhttp.internal.Platform findPlatform()
		ForbiddenMethodError violating CrySL rule for javax.net.ssl.SSLContext
			Detected call to forbidden method javax.net.ssl.SSLContext getDefault() of class javax.net.ssl.SSLContext. Instead, call method <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>, <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>, <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>.
			at statement: $r18 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>()


Findings in Java Class: org.tron.common.crypto.SymmEncoder

	 in Method: byte[] AesEcbDecode(byte[],javax.crypto.SecretKey)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #6d1107c7146298c0938e66bac07b6aeb0068652330e7974c7ccaf69bb143b55e)
			First parameter (with value "AES/ECB/NoPadding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer179)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer180, $r0)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #6d1107c7146298c0938e66bac07b6aeb0068652330e7974c7ccaf69bb143b55e)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)


	 in Method: byte[] AesEcbEncode(byte[],javax.crypto.SecretKey)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer47860, $r0)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #bd088f09ac4d1f0bd1fea89d56a3e55b4a6b64c56251952f639519a89e7f390d)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #bd088f09ac4d1f0bd1fea89d56a3e55b4a6b64c56251952f639519a89e7f390d)
			First parameter (with value "AES/ECB/NoPadding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer47862)


	 in Method: javax.crypto.SecretKey restoreSecretKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, $r1)


Findings in Java Class: com.eletac.tronwallet.bip39.BIP39

	 in Method: java.lang.String encode(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer458)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #d080f5005037bcd06dfa4f2ea6f160915d78c26bba7d5ce5b37d5fb4b58bbe87)
			Second parameter (with value "Blowfish") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer458)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #af6e8c5aac02eaf16ece1b1e65b59eb7261eee37c8042d5b20fe5e12a7ecdcc0)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #af6e8c5aac02eaf16ece1b1e65b59eb7261eee37c8042d5b20fe5e12a7ecdcc0)
			First parameter (with value "BlowFish/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer456)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer457, $r3)


	 in Method: byte[] decode(java.lang.String,java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #5eb53d1726d6de5c78c12071cd69e32758d6222cd3f11e1200e2d470d1fdd0bd)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r6 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #2d95acb47d9152a8c8ad2251606ad28042b72baa7cb22998edf12b0bad72f07b)
			Second parameter (with value "Blowfish") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer48769)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer48768, $r8)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer48769)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5eb53d1726d6de5c78c12071cd69e32758d6222cd3f11e1200e2d470d1fdd0bd)
			First parameter (with value "BlowFish/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer48765)


Findings in Java Class: org.tron.common.crypto.Hash

	 in Method: byte[] sha3(byte[])
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #21c58cd7e18963e3bd35671de8099bef246da9c509ce2cd10da7db090a7b2405)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #21c58cd7e18963e3bd35671de8099bef246da9c509ce2cd10da7db090a7b2405)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to java.security.MessageDigest: int digest(byte[],int,int), update, java.security.MessageDigest: byte[] digest(), java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: io.grpc.okhttp.OkHttpChannelBuilder

	 in Method: javax.net.ssl.SSLSocketFactory createSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer23495, $r12, $r13)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #e8f74801817affca30cb23d09cf54fbe702fd0975832c6d29fb2685150f97e2d)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer23500, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer23499)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #5c2edd4af4250d38a077db33523ab835d9934799e8f8d2d0abef86eafbbed2b2)
			First parameter (with value "Default") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer23496, $r8)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #5c2edd4af4250d38a077db33523ab835d9934799e8f8d2d0abef86eafbbed2b2)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r6 = virtualinvoke $r10.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>()

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer23495, $r12, $r13)


Findings in Java Class: org.spongycastle.x509.AttributeCertificateHolder

	 in Method: boolean match(java.security.cert.Certificate)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #13653b41c8fc046037f70a49152e83201d0f7c2eb4769d516c89c785c9be0663)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #13653b41c8fc046037f70a49152e83201d0f7c2eb4769d516c89c785c9be0663)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to java.security.MessageDigest: int digest(byte[],int,int), update, java.security.MessageDigest: byte[] digest(), java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher

	 in Method: com.google.common.hash.HashCode hash()
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.google.common.hash.AbstractStreamingHashFunction

	 in Method: com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>()


Findings in Java Class: com.google.common.hash.AbstractCompositeHashFunction

	 in Method: com.google.common.hash.Hasher newHasher()
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: specialinvoke $r5.<com.google.common.hash.AbstractCompositeHashFunction$1: void <init>(com.google.common.hash.AbstractCompositeHashFunction,com.google.common.hash.Hasher[])>(r0, $r3)


Findings in Java Class: com.facebook.stetho.websocket.WebSocketHandler

	 in Method: java.lang.String generateServerKey(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #a8caf0f116d651cb8159f64ac15567e79b60ed83fa52a719100249de1b3fa22)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to java.security.MessageDigest: int digest(byte[],int,int), update, java.security.MessageDigest: byte[] digest(), java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a8caf0f116d651cb8159f64ac15567e79b60ed83fa52a719100249de1b3fa22)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer44893)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #a8caf0f116d651cb8159f64ac15567e79b60ed83fa52a719100249de1b3fa22)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.squareup.okhttp.internal.Util

	 in Method: java.lang.String md5Hex(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #e26a0d4bdfc5ad2e53de2c24c45531fd53359fe130791100bdbafdfaabaa9065)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to update, java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #e26a0d4bdfc5ad2e53de2c24c45531fd53359fe130791100bdbafdfaabaa9065)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer45498)


	 in Method: okio.ByteString sha1(okio.ByteString)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #63e59055d590f3a2102b3126f117b9b0310ac17d0e9d5cfb0a0766e8f79f0296)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to update, java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #63e59055d590f3a2102b3126f117b9b0310ac17d0e9d5cfb0a0766e8f79f0296)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer49418)


Findings in Java Class: com.squareup.okhttp.Cache$Entry

	 in Method: java.util.List readCertificateList(okio.BufferedSource)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #25b09f04b76adbd6fd856e08f194fe639ec9e814d3313c80154596d52dcf3dc2)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCertificate, generateCRL
			at statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer47961)

		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #25b09f04b76adbd6fd856e08f194fe639ec9e814d3313c80154596d52dcf3dc2)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #25b09f04b76adbd6fd856e08f194fe639ec9e814d3313c80154596d52dcf3dc2)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCRL, java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)


Findings in Java Class: org.spongycastle.crypto.encodings.PKCS1Encoding

	 in Method: byte[] encodeBlock(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>($r4)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()


	 in Method: byte[] decodeBlockOrRandom(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>($r4)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.tls.TlsRSAUtils

	 in Method: byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r9 = virtualinvoke $r6.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r3, varReplacer48160, $i0)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r9 = virtualinvoke $r6.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r3, varReplacer48160, $i0)


	 in Method: byte[] safeDecryptPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,byte[])
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r5 = virtualinvoke $r1.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r5, varReplacer48910, $i1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r5 = virtualinvoke $r1.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r5, varReplacer48910, $i1)


Findings in Java Class: org.spongycastle.crypto.signers.GenericSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.encodings.ISO9796d1Encoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r2)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r2)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r8.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r8.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)


Findings in Java Class: org.spongycastle.crypto.signers.PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.RSADigestSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.encodings.OAEPEncoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r3 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, varReplacer49689, $i0, $i1)


Findings in Java Class: org.spongycastle.crypto.signers.X931Signer

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2Signer

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3)


Findings in Java Class: org.tron.common.crypto.jce.ECSignatureFactory

	 in Method: java.security.Signature getRawInstance(java.security.Provider)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #71d7254aa9dc6e2542725347321a42a53ca1e4cc0bd1afc60c3805ccdbde819)
			First parameter (with value "NONEwithECDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r0 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>(varReplacer49264, $r1)


Findings in Java Class: org.spongycastle.pqc.crypto.ntru.NTRUEngine

	 in Method: byte[] decrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r5 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r9, $r4, $r5)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r12 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean)>($r1, $i1, $i6, $z0)


Findings in Java Class: org.spongycastle.crypto.engines.ElGamalEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.ElGamalEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.engines.NaccacheSternEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.engines.RSABlindedEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r9 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r9, $r10, $r11)


Findings in Java Class: org.tron.common.crypto.jce.ECKeyPairGenerator

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #a55ffeee085a5afbbf38cb4076c921584c89c2a1ee2a370c6c4185e8d3a2b5c2)
			First parameter (with value "secp256k1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r0.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50278)


	 in Method: java.security.KeyPairGenerator getInstance(java.security.Provider,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as preparedEC
			at statement: virtualinvoke $r0.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r3, $r2)


Findings in Java Class: org.tron.common.crypto.ECKey

	 in Method: void <init>(java.security.Provider,java.security.SecureRandom)
		TypestateError violating CrySL rule for java.security.KeyPairGenerator (on Object #9a9481d897b677a94c913681c2bf47a86f165b4f417481d60c13154b7bad08bb)
			Unexpected call to method generateKeyPair on object of type java.security.KeyPairGenerator. Expect a call to one of the following methods initialize
			at statement: $r5 = virtualinvoke $r4.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()

		IncompleteOperationError violating CrySL rule for java.security.KeyPairGenerator (on Object #9a9481d897b677a94c913681c2bf47a86f165b4f417481d60c13154b7bad08bb)
			Operation on object of type java.security.KeyPairGenerator object not completed. Expected call to java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair(), genKeyPair, initialize, java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()
			at statement: $r5 = virtualinvoke $r4.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()


	 in Method: org.tron.common.crypto.ECKey$ECDSASignature doSign(byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r18.<java.security.Signature: void initSign(java.security.PrivateKey)>($r6)


	 in Method: java.security.PrivateKey privateKeyFromBigInteger(java.math.BigInteger)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #6c3bac72660733784399db77c0751f462d195a19ecc00b7f1f152279fe8ad5be)
			First parameter (with value "P-224") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50610)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #dde11d5c0dfb04f4e9376c692faf54fa6a81bd1c70dde30f84a3ad6f1ab84f21)
			First parameter (with value "P-521") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50611)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #e206ece3fd1581d98e907d3d600ab6cb9fd393188450e31715e8740d89711fb9)
			First parameter (with value "prime192v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50606)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #49e34f414b0e6b9735b4cd8e682fbeb0db867358b02c12edb5e02e64e6971ea2)
			First parameter (with value "prime239v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50609)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #707ca9141a6b3a73ff2f6baae5324614a5823f699939e6f585c791fa9ca9ecbe)
			First parameter (with value "P-384") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50616)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #6b125a01227168a45fd5128a960ab7c76bd7261137d8766321597e4a7da1a623)
			First parameter (with value "prime256v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer50615)


	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r13)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r9, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r20, $r21)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r20, $r21)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r1.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r2, $r8)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 132

	CryptoAnalysis found the following violations. For details see description above.
	ConstraintError: 19
	RequiredPredicateError: 35
	ForbiddenMethodError: 1
	TypestateError: 13
	IncompleteOperationError: 49
=====================================================================
