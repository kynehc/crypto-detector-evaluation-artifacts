0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: java.lang.String
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer35285)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreRsaEcb: android.security.keystore.KeyInfo getKeyInfo(java.security.Key)>
		SHA-256: 318495e8150d3325331946eb4ca2da7f4a519a03e98a0ca3b7c492dc1a959df7
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13862)
		Method: <com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>
		SHA-256: b98e10d8ee1e92a67f6ed087c30e452322129475ddbc16049d7442f15a844dd6
		Secure: false
	Object:
		Variable: $r8
		Type: javax.net.ssl.TrustManager[]
		Statement: $r8 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: f9245eb33694b570c4ec70c8243d4ace0e53b8015ba482c8ca712389563e4938
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.cert.CertificateFactory
		Statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer46900)
		Method: <okhttp3.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>
		SHA-256: b3ee9034d10b8f0e763a62e214e382d181c1e6be7bc4f9ca69ecf4261872b65
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30097)
		Method: <okhttp3.internal.platform.AndroidPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: fea821bbdb9d3a8e47a609fdebc1173801db74827bcbd340ae47e7da7e05ff74
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>
		SHA-256: 842121e9d253cdf6db0e404fe95695ee0d6b5963fa7b8ac61ed9211e05a20b7c
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.SecureRandom
		Statement: specialinvoke $r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: 25f4524cb5391c678f5b24cef917a98b4ce54f1118d910bb4c856578ffd70979
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreAesCbc: java.security.Key generateKey(android.security.keystore.KeyGenParameterSpec)>
		SHA-256: 7e0dbd2be7fe208506472e7b5f1c7d255238363a9d5ea5944e72246ed01824e1
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30096)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: f825d84f26d55a435ae80f5c5e030647bc4f3b327dfb50ac9c3884cb7dae6463
		Secure: false
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9646)
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createBlindSocketFactory()>
		SHA-256: 219aa90810a87402b6e69343557c580c64539a8ebec104faa156505bf9f23589
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30094)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 796a526ac967bbfaa4b2c53814336a175e4dd0826011583fbfe9ad2f85ccdfc5
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: a79a1700ae9d8d44f13ea218f751e7024f8f1222b1b2ae17cdbab7b56d352181
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.KeyGenerator
		Statement: $r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>($r2, varReplacer31077)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreAesCbc: java.security.Key generateKey(android.security.keystore.KeyGenParameterSpec)>
		SHA-256: 7498819652dca2f0614fa6777ee432040ffeedcc2b70d3bdfe26431ef12de689
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.KeyPair
		Statement: $r4 = virtualinvoke $r3.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreRsaEcb: java.security.Key generateKey(android.security.keystore.KeyGenParameterSpec)>
		SHA-256: 67df90bc48f460f078aac0e145be1be26f221bb43466dfdd68335f4fb7ff04
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.Cipher
		Statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageBase: javax.crypto.Cipher getCachedInstance()>
		SHA-256: 3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer10889)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageBase: java.security.KeyStore getKeyStoreAndLoad()>
		SHA-256: 62f111ae4b3fc7b58093cc9f22ab399cdafd42a58740f470b6647ffa36117148
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Key
		Statement: $r4 = virtualinvoke $r0.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(varReplacer22539, varReplacer22540)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: f2dc44bc8e0b300645e2faa5f6322e603188dd5c32aa65f34453775f02eb279d
		Secure: false
	Object:
		Variable: r0
		Type: com.facebook.android.crypto.keychain.FixedSecureRandom
		Statement: specialinvoke r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.facebook.android.crypto.keychain.FixedSecureRandom: void <init>()>
		SHA-256: c6036e9e7c875fe564fdde7319a908d8e330139e306440a672f8af29a3147138
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyFactory
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer35285)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreRsaEcb: android.security.keystore.KeyInfo getKeyInfo(java.security.Key)>
		SHA-256: 24eb6ca25770329ca83ff556502e67e3d47bc4765204a6902030361a972af068
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer30100, $r2)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 7fd4ccc3ac2fc64e270a10baf403dadf7172666f34f63b73a58a43326ef3a375
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: 8092e14d63064124ae9b8b45ae2b169c22de8f29d221d528f2dadb1f55cf6545
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer22545, varReplacer22546)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: c5ca0cffbaa25e9c200b20bde146a4fb980f6004d2ea95deb1867a5a32b61291
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>
		SHA-256: c6bb4832d15267321b64294e36949b1fc4731b855443ce4eba77a8ad3eaece90
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <com.facebook.android.crypto.keychain.SecureRandomFix: void tryInstallLinuxPRNGSecureRandom()>
		SHA-256: 2376e6dc1519f744edd23e77e53d51a4a18899ef01a364c4e1cb5435f35f259d
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer22548)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 7db333bbc293a91ec92343566b052996a490868377dc8c47f86ea9cad5de61fa
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.KeyStore
		Statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer22547)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 49ea4bd040eedeeaceeb2733728fd2efe5ddff6c01dc1c1a96d7c160dcc91c70
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyPairGenerator
		Statement: $r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>($r2, varReplacer31072)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreRsaEcb: java.security.Key generateKey(android.security.keystore.KeyGenParameterSpec)>
		SHA-256: 6651f6cffe3f992af133ed58c567951f5213a9c14337b8f7cd2f29a81be3f27e
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r7.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r5)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageBase: java.lang.String decryptBytes(java.security.Key,byte[],com.oblador.keychain.cipherStorage.CipherStorageBase$DecryptBytesHandler)>
		SHA-256: 45e5c60a25699ecfdcb093c5eba588dfa2b20cc18c73826ac692fd006b138306
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKeyFactory
		Statement: $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer35288)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageKeystoreAesCbc: android.security.keystore.KeyInfo getKeyInfo(java.security.Key)>
		SHA-256: 1105bf035fe07dd233d72886e10c5a68310b6966f2881548936e98c1da32135a
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageBase$IV: javax.crypto.spec.IvParameterSpec readIv(java.io.InputStream)>
		SHA-256: 5a8dcb0c767f8703cca3921bb20b9137d882bf3009ea9dad6f0284983d05b4b
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer20170)
		Method: <com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>
		SHA-256: 65d665c48ee23959894c0f5429f6807b51a350c0873d55c18cbc83be34ef3049
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30099)
		Method: <okhttp3.internal.platform.AndroidPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 37af0daf36cfd6a25a39123d55c8113c29aeb9dda7f6ea01c4a9c0646b2d3f1d
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer10857)
		Method: <com.facebook.android.crypto.keychain.SecureRandomFix: void tryInstallLinuxPRNGSecureRandom()>
		SHA-256: 8f526137db39e6cf3dd4278443ff6605d6e614a668eacae0b801821c1d203a4b
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.cert.CertificateFactory
		Statement: $r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer9654)
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: 924ab486e3e87e331628d6ed8a41ab4c6047587ca2498605a66a9619d27750d3
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0)
		Method: <com.oblador.keychain.cipherStorage.CipherStorageBase$IV: javax.crypto.spec.IvParameterSpec readIv(byte[])>
		SHA-256: 5a8dcb0c767f8703cca3921bb20b9137d882bf3009ea9dad6f0284983d05b4b
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9655)
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: fe1d42923e0cdc86d98f326b4c7f1fada1bcb8c4dd131d7a5f8a000c08b04be2
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <com.asterinet.react.tcpsocket.SSLCertificateHelper: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)>
		SHA-256: 696b66cda360fb2a0fbc4f6f1ec742c3c0262a7159cfe26fa111af0f5e824932
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.Util: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: dea0af93b06734ae35228a014521e6e031131dd2b357359826afa61f9a6de1b
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer30102, $r2)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: d2a12e7fda01a346ea156630a475d5b47a9369973ef6fb35573f18fb94a93f2
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0)
		Method: <okhttp3.internal.Util: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: a8764d384e0e6acd4407dba0e4c2025660362892494036c03c4b52a40e75c66b
		Secure: false

Findings in Java Class: com.asterinet.react.tcpsocket.SSLCertificateHelper

	 in Method: javax.net.ssl.SSLSocketFactory createBlindSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9648, $r4, varReplacer9648)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #219aa90810a87402b6e69343557c580c64539a8ebec104faa156505bf9f23589)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9646)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9648, $r4, varReplacer9648)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9648, $r4, varReplacer9648)


	 in Method: javax.net.ssl.SSLSocketFactory createCustomTrustedSocketFactory(android.content.Context,java.lang.String)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #fe1d42923e0cdc86d98f326b4c7f1fada1bcb8c4dd131d7a5f8a000c08b04be2)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9655)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #924ab486e3e87e331628d6ed8a41ab4c6047587ca2498605a66a9619d27750d3)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCRL
			at statement: $r4 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9653, $r8, $r9)


Findings in Java Class: com.oblador.keychain.cipherStorage.CipherStorageBase

	 in Method: java.security.KeyStore getKeyStoreAndLoad()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #62f111ae4b3fc7b58093cc9f22ab399cdafd42a58740f470b6647ffa36117148)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer10889)


	 in Method: javax.crypto.Cipher getCachedInstance()
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585)
			First parameter (with value "RSA/ECB/PKCS1Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2)


	 in Method: void generateKeyAndStoreUnderAlias(java.lang.String,com.oblador.keychain.SecurityLevel)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $z0 = virtualinvoke r0.<com.oblador.keychain.cipherStorage.CipherStorageBase: boolean validateKeySecurityLevel(com.oblador.keychain.SecurityLevel,java.security.Key)>($r2, $r5)


	 in Method: java.lang.String decryptBytes(java.security.Key,byte[],com.oblador.keychain.cipherStorage.CipherStorageBase$DecryptBytesHandler)
		TypestateError violating CrySL rule for javax.crypto.CipherInputStream (on Object #45e5c60a25699ecfdcb093c5eba588dfa2b20cc18c73826ac692fd006b138306)
			Unexpected call to method close on object of type javax.crypto.CipherInputStream. Expect a call to one of the following methods read
			at statement: virtualinvoke $r7.<javax.crypto.CipherInputStream: void close()>()

		RequiredPredicateError violating CrySL rule for javax.crypto.CipherInputStream
			Second parameter was not properly generated as generatedCipher
			at statement: specialinvoke $r7.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r5)


Findings in Java Class: com.facebook.common.util.SecureHashUtil

	 in Method: java.lang.String makeSHA1HashBase64(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b98e10d8ee1e92a67f6ed087c30e452322129475ddbc16049d7442f15a844dd6)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13862)


Findings in Java Class: com.oblador.keychain.cipherStorage.CipherStorageKeystoreAesCbc

	 in Method: java.lang.String decryptBytes(java.security.Key,byte[],com.oblador.keychain.cipherStorage.CipherStorageBase$DecryptBytesHandler)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r2 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r2, varReplacer21285, $i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer21284, $r1, $r5)


	 in Method: android.security.keystore.KeyInfo getKeyInfo(java.security.Key)
		IncompleteOperationError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #1105bf035fe07dd233d72886e10c5a68310b6966f2881548936e98c1da32135a)
			Operation on object of type javax.crypto.SecretKeyFactory object not completed. Expected call to translateKey, generateSecret
			at statement: $r5 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>($r4, class "Landroid/security/keystore/KeyInfo;")


Findings in Java Class: com.oblador.keychain.decryptionHandler.DecryptionResultHandlerInteractiveBiometric

	 in Method: void onAuthenticationSucceeded(androidx.biometric.BiometricPrompt$AuthenticationResult)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r9 = virtualinvoke $r4.<com.oblador.keychain.cipherStorage.CipherStorageBase: java.lang.String decryptBytes(java.security.Key,byte[])>($r5, $r7)


Findings in Java Class: com.oblador.keychain.KeychainModule

	 in Method: void internalWarmingBestCipher()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3b5ac3e4c020788faf19212b324f1a0bf67488c428ba427b97ec0a173cbc7585)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke $r4.<com.oblador.keychain.cipherStorage.CipherStorageBase: java.security.KeyStore getKeyStoreAndLoad()>()


Findings in Java Class: com.facebook.soloader.SoLoader$1

	 in Method: java.lang.String getLibHash(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #65d665c48ee23959894c0f5429f6807b51a350c0873d55c18cbc83be34ef3049)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r7 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #65d665c48ee23959894c0f5429f6807b51a350c0873d55c18cbc83be34ef3049)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer20170)


Findings in Java Class: com.drew.lang.RandomAccessStreamReader

	 in Method: boolean isValidIndex(int,int)
		ConstraintError violating CrySL rule for javax.crypto.CipherInputStream (on Object #45e5c60a25699ecfdcb093c5eba588dfa2b20cc18c73826ac692fd006b138306)
			Second parameter (with value -1)Variable offsetmust be  at least 0
			at statement: $i6 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, $i5, $i6)


Findings in Java Class: com.facebook.crypto.streams.NativeMacLayeredInputStream

	 in Method: void ensureMacValid()
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #45e5c60a25699ecfdcb093c5eba588dfa2b20cc18c73826ac692fd006b138306)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to read, close
			at statement: $z0 = specialinvoke r0.<com.facebook.crypto.streams.NativeMacLayeredInputStream: boolean constantTimeEquals(byte[],byte[])>($r4, $r2)


Findings in Java Class: androidx.biometric.CryptoObjectUtils

	 in Method: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #49ea4bd040eedeeaceeb2733728fd2efe5ddff6c01dc1c1a96d7c160dcc91c70)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer22547)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer22544, $r5)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7db333bbc293a91ec92343566b052996a490868377dc8c47f86ea9cad5de61fa)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer22548)


Findings in Java Class: okhttp3.internal.platform.Platform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #796a526ac967bbfaa4b2c53814336a175e4dd0826011583fbfe9ad2f85ccdfc5)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30094)


Findings in Java Class: okhttp3.internal.platform.AndroidPlatform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #37af0daf36cfd6a25a39123d55c8113c29aeb9dda7f6ea01c4a9c0646b2d3f1d)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer30099)


Findings in Java Class: okhttp3.internal.platform.ConscryptPlatform

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #7fd4ccc3ac2fc64e270a10baf403dadf7172666f34f63b73a58a43326ef3a375)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer30100, $r2)


Findings in Java Class: okio.ByteString

	 in Method: okio.ByteString digest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: okhttp3.Cache$Entry

	 in Method: java.util.List readCertificateList(okio.BufferedSource)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #b3ee9034d10b8f0e763a62e214e382d181c1e6be7bc4f9ca69ecf4261872b65)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertificate, generateCertPath, generateCRL
			at statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer46900)

		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #b3ee9034d10b8f0e763a62e214e382d181c1e6be7bc4f9ca69ecf4261872b65)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #b3ee9034d10b8f0e763a62e214e382d181c1e6be7bc4f9ca69ecf4261872b65)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCRL, java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21791, $r7, varReplacer21791)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21791, $r7, varReplacer21791)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21791, $r7, varReplacer21791)


Findings in Java Class: com.oblador.keychain.cipherStorage.CipherStorageKeystoreRsaEcb

	 in Method: java.security.Key generateKey(android.security.keystore.KeyGenParameterSpec)
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as preparedRSA
			at statement: virtualinvoke $r3.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r1)


Findings in Java Class: com.oblador.keychain.cipherStorage.CipherStorageBase$IV

	 in Method: javax.crypto.spec.IvParameterSpec readIv(java.io.InputStream)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0)


	 in Method: javax.crypto.spec.IvParameterSpec readIv(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0)


Findings in Java Class: okhttp3.internal.Util

	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer21795)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 41

	CryptoAnalysis found the following violations. For details see description above.
	RequiredPredicateError: 14
	TypestateError: 4
	ConstraintError: 14
	IncompleteOperationError: 8
=====================================================================
