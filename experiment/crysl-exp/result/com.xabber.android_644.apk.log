0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: java.lang.String
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)
		Method: <de.a.a.c.a.f: void <init>(java.lang.String,java.lang.String)>
		SHA-256: 3388c7c7c9d8e776beb7fa4d7e8cf433736800dccb535f3868f5659b539331e3
		Secure: false
	Object:
		Variable: $r52
		Type: java.security.SecureRandom
		Statement: specialinvoke $r52.<java.security.SecureRandom: void <init>()>()
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 9223ade589c22d22d509db6207763086d6c5a20904e69b808f5e96412cf35c53
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <de.a.a.a: void <init>(de.a.a.b)>
		SHA-256: e7026bb11e11017bf02ea91dde1699264077a18bdea6fc2f75c8d60890c67fe7
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer39570)
		Method: <b.a.a.a.b: byte[] b(byte[],byte[],int)>
		SHA-256: fb3454228b5a73966161a1b1214516528fc2daf476d2b56cce02fcbe952c49f6
		Secure: false
	Object:
		Variable: $r17
		Type: java.security.PrivateKey
		Statement: $r17 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r16)
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 6cdaf76c31af7b03c2a91dc39083ae225f9926ba5aa370c700d416d6699d1937
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyFactory
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer35321)
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 513d0a623a60e55f2d38ab359ef3d1518f737328500181f9a3db126455149789
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <b.a.a.a.d: java.math.BigInteger a(int,java.math.BigInteger,java.math.BigInteger)>
		SHA-256: 648710906351d0f98764abc53f09d320a29554449bc7ff36af21ebe9a8327d77
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer38456)
		Method: <b.a.a.a.b: byte[] a(byte[])>
		SHA-256: 3f5980c39386507fc74eb8d4365fb17eb05cb7bc1d5cefbde3aeccc8cee0c64b
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)
		Method: <b.a.a.a.b: byte[] b(byte[],byte[],int)>
		SHA-256: 5fe6adfd20cdcfb9ed869b0cc37680bd0eb322ae99b67a044fb8571174646e4b
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer30435)
		Method: <b.a.a.a.d: java.math.BigInteger a(int,java.math.BigInteger,java.math.BigInteger)>
		SHA-256: 59754a1224e90b9e42bed992eaeae845a867a505b8f2d83de721ba175daa1629
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: specialinvoke $r7.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r5, $r6)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: c55474d46ee96473d66f012a4e0cde6d90395c336cabeaebe68d3ad0429dc882
		Secure: false
	Object:
		Variable: $r23
		Type: java.security.KeyStore
		Statement: $r23 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>(varReplacer22204, $r22)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 976fc377129349e73430ee5534989813515847ffa25d4411981cac4dc6e217f9
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer19100)
		Method: <okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)>
		SHA-256: 9ea2703b5c288352078d68d4317b7e168dcb4770e3adce07d6a9085853699c79
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.duenndns.ssl.b: java.lang.String b(java.security.cert.X509Certificate,java.lang.String)>
		SHA-256: 2b239676591e13dd03a8269a5f8265794abc1a6b5085a34af32e897600b8bd4b
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManager[]
		Statement: $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>
		SHA-256: 1a27914d4fa0cccd4258c31d2327789a4c4f86227090a14ea854b6b35086568
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.PublicKey
		Statement: $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: 52e1c43190732e15b0539959b2ba794076386afc5c8fbd402852b4dc0cdc00f4
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer26670)
		Method: <org.jivesoftware.smack.util.SHA1: void <clinit>()>
		SHA-256: 537c567364ec230e8ecc71c7fa298fe02c022c482344f4fb4f6484ebd43b7970
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: d03c00a18e45397cfcdecfd21e5c938e1516119ff9457daea18f4287bfab85d1
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.KeyAgreement: byte[] generateSecret()>()
		Method: <b.a.a.a.b: java.math.BigInteger a(java.security.PrivateKey,java.security.PublicKey)>
		SHA-256: 4240d257e5ad463b424b5e258c84e02bcae50a91119eb5bb54cbc24e720acc62
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.PrivateKey
		Statement: $r6 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: 20835519cd987827d3135d7c6046de5d719a116b21ba2c7a33b16c3a6516af9f
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <b.a.a.a.d: java.math.BigInteger a()>
		SHA-256: d8d440157d424ad9c8f83d1c1d56aeab7c1ed6e4b17015a91f516aff507aa7e
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r7)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: aa2eb478f85c1753ac267d3c20373ec8f5b035eceac5c75589cd2b5fcb5a339c
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer33949)
		Method: <de.duenndns.ssl.b: javax.net.ssl.X509TrustManager a(java.security.KeyStore)>
		SHA-256: 2fb7aeae1a945fde184fa6fd754c4f0ca1f9b3bb504873932b9aaf7880dbbccd
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r5)
		Method: <org.jivesoftware.smack.util.TLSUtils: byte[] getChannelBindingTlsServerEndPoint(javax.net.ssl.SSLSession)>
		SHA-256: ebe7591f1c8b439a832c4e1943124ae0fd9b8d043d5bf772a9068e23f62297db
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.jivesoftware.smack.util.TLSUtils: org.jivesoftware.smack.ConnectionConfiguration$Builder acceptAllCertificates(org.jivesoftware.smack.ConnectionConfiguration$Builder)>
		SHA-256: 630426f1d3a6e404772e8c55e8b5f02b281bd1895db0194b15d93333de896b2
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.KeyFactory
		Statement: $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer32949)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: 6eb4a7005a9caa3ceb04d60716318797911984f84d3a9581a9fa95520e6f1ece
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <de.a.a.b.b: boolean a(java.security.cert.X509Certificate,de.a.a.i.t,java.lang.String)>
		SHA-256: 5518a2415bdd942f46bc9346bbc4c14504c9bd770f4630a4d5c8bb1dcde24717
		Secure: true
	Object:
		Variable: varReplacer18745
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer18745)
		Method: <b.a.a.a.b: byte[] a(byte[],byte[],int)>
		SHA-256: 714c25a59f87ef62306ffbc15e58d1bfc9988c34c418c89370e0f21db5008d94
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)
		Method: <b.a.a.a.b: byte[] a(byte[],byte[],int)>
		SHA-256: 3720b005466a36791ed2edcd64681f5d392da3830155843033748e9086a669c7
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6)
		Method: <de.a.a.c.a.f: boolean a(byte[],byte[],byte[])>
		SHA-256: c4a4c85065d79b57f14d3aad80b1bea134d4a4479ad0188e4b4927c38a6e23d4
		Secure: false
	Object:
		Variable: varReplacer32949
		Type: java.lang.String
		Statement: $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer32949)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: 1186050c7da01029c703781f9f97bbaf846ecd033ba9cce5cf3c736be4060e78
		Secure: false
	Object:
		Variable: $r23
		Type: java.security.KeyStore
		Statement: $r23 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r10)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 67be284f9cb62f3fd1ad6c0940c56d66639d30d20a4008aa7b4de9e540a2dd6b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.a.c.e.b: java.math.BigInteger a(java.math.BigInteger,java.security.SecureRandom)>
		SHA-256: 20e3603dd082cb14d28b09ccfdd2a827166e7f314e0ca8c0668b4a88ab5708ce
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r2.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)
		Method: <com.xabber.android.data.database.realm.AccountRealm: java.security.KeyPair getKeyPair()>
		SHA-256: 3d4537241ca962ce2b602bbdd643d3b567772e7d3e2fa3c4de193cd950bee7a9
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16938)
		Method: <org.jivesoftware.smackx.vcardtemp.packet.VCard: java.lang.String getAvatarHash()>
		SHA-256: a1d693b8c9c40bec925206e048c3a7e8e3011f0215a47fec9a27b11fcba03bb
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.SecureRandom
		Statement: specialinvoke $r24.<java.security.SecureRandom: void <init>()>()
		Method: <com.xabber.android.data.connection.ConnectionBuilder: com.xabber.xmpp.smack.XMPPTCPConnection build(com.xabber.android.data.entity.AccountJid,com.xabber.android.data.connection.ConnectionSettings)>
		SHA-256: 454697dc8d0321b1b5e00a23baa6ea1256f2704c6dab60245a49772a2f50d043
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer18746)
		Method: <b.a.a.a.b: byte[] a(byte[],byte[],int)>
		SHA-256: 12abf0ea332541b667823d39b56858c9e591860e9c2110103844093d39cebc40
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.jivesoftware.smack.util.TLSUtils: byte[] getChannelBindingTlsServerEndPoint(javax.net.ssl.SSLSession)>
		SHA-256: f3283ff8ccf065196e7212b48f66879fd070b140510253b578ebd7f537109584
		Secure: true
	Object:
		Variable: $r33
		Type: javax.net.ssl.KeyManager[]
		Statement: $r33 = virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: f536bf0bf0cd473cb3f96d0cdf521a85b2d01e432dc60074051a78ce6dee2a25
		Secure: false
	Object:
		Variable: varReplacer33582
		Type: java.lang.String
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer33582)
		Method: <b.a.a.a.b: javax.crypto.interfaces.DHPublicKey a(java.math.BigInteger)>
		SHA-256: 570758178344d48fe654749c9e7d31bebd70b56ea064438bcfc797f678bd7bd6
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <c.f: c.f d(java.lang.String)>
		SHA-256: 626e4101bec9385374dd61455fe463aa2261dba5de0ee720cb436e5e78337efa
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.PublicKey
		Statement: $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: 58eaa64426f97e18a061d883f8d4d5c018b9d58c29600ccfe4c21b14268cfa83
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r3, $r8, $r6, varReplacer40196)
		Method: <de.a.a.c.a.c: void <init>(java.math.BigInteger[],int,java.lang.String)>
		SHA-256: 171bea359fb0b0b3bc165c01c10b81d7fd437a47fe720a67f97cd9972aa03b7
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.cert.CertificateFactory
		Statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer40700)
		Method: <okhttp3.Cache$Entry: java.util.List readCertificateList(c.e)>
		SHA-256: 99331ec324c48bbbd4fe3212d42694f7bb0bf1995e65590f459edd7077efce3c
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <b.a.a.c.h: byte[] a(java.math.BigInteger)>
		SHA-256: 66fa05fc788b848f6a4e3bc796ff136a588451c6826c2a062de6388459980b69
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer35798)
		Method: <com.bumptech.glide.load.b.b.j$1: com.bumptech.glide.load.b.b.j$a a()>
		SHA-256: cf2537353ceea5f6a21c374ffe775a749ab4e6ca365ec814e8bc30dca226a1c
		Secure: true
	Object:
		Variable: $r32
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r32 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer22134)
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 149d3569f65f6c3a4264308923249134790418f4b3fa2f2f9b73f9186ec405d6
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer30425)
		Method: <b.a.a.c.h: byte[] a(java.math.BigInteger)>
		SHA-256: 34730a384268c9ef949d99240be53add3c0c27e0662a4f8224d298f0a0a51a63
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <de.a.a.c.a.f: boolean a(byte[],byte[],byte[])>
		SHA-256: ce5444347ba8a3a3ec26b31ddc54c790c0e8e6b3f6a7105b088df10cb2272ce0
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer18745)
		Method: <b.a.a.a.b: byte[] a(byte[],byte[],int)>
		SHA-256: 71c7732d4ba1aee7b92f8b4f37fc0a1f506616aec606fd388b652c88e3d25bf2
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <b.a.a.a.b: byte[] b(byte[])>
		SHA-256: 323161a884d4c9724246db253a21d16b727c9351427fc6b0d49259ecc76ffff2
		Secure: false
	Object:
		Variable: $r32
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r32 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer22208)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 53c2e77ba375d0e26df985021636c3cc1f973ca16df99c45579f5fc07ea2022c
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21741)
		Method: <org.jivesoftware.smack.util.TLSUtils: org.jivesoftware.smack.ConnectionConfiguration$Builder acceptAllCertificates(org.jivesoftware.smack.ConnectionConfiguration$Builder)>
		SHA-256: 19614dc2ce99b4383499e2c1236bccf9a994f053a3c76e1f6ec9df5db74fe24
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <de.a.a.b.b: boolean a(java.security.cert.X509Certificate,de.a.a.i.t,java.lang.String)>
		SHA-256: 5518a2415bdd942f46bc9346bbc4c14504c9bd770f4630a4d5c8bb1dcde24717
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.PublicKey
		Statement: $r14 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r12)
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 3b08a2460aae3b9dedfc35f8250309aaf5604ab3c14948311184680f5e265d56
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.MessageDigest
		Statement: $r14 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer30412)
		Method: <b.a.a.c.h: java.util.List a(java.lang.String,java.lang.String,boolean)>
		SHA-256: ba7feca69d5b9e546e092c206357208f12cd5f2b60841ee2f8f2eea5876de870
		Secure: true
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest(byte[])>($r13)
		Method: <b.a.a.c.h: java.util.List a(java.lang.String,java.lang.String,boolean)>
		SHA-256: afbfc64e8dbb25c2002aa4b2ce4b367eab0960a6f124341084656ac7370ff48c
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.KeyFactory
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer33582)
		Method: <b.a.a.a.b: javax.crypto.interfaces.DHPublicKey a(java.math.BigInteger)>
		SHA-256: 320c4e85f62fb4ebf6fd53fbcc031146f9e02a92fd23f7a25a830a39cdc53dc7
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyPairGenerator
		Statement: $r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer11705)
		Method: <com.xabber.android.data.extension.otr.OTRManager$3: void run()>
		SHA-256: 3c7859db8f89d18ed6e015f5b31bc8ccc0d4e04c422cdf5f9181def6c1b4a3fd
		Secure: false
	Object:
		Variable: $r13
		Type: byte[]
		Statement: $r12 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest(byte[])>($r13)
		Method: <b.a.a.c.h: java.util.List a(java.lang.String,java.lang.String,boolean)>
		SHA-256: 528f1fb1231df0ae400fc241659d1f82e2fd53492f344430fa1a72b58be7d40
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.PublicKey
		Statement: $r9 = virtualinvoke $r8.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <b.a.a.b.a: java.security.PublicKey h()>
		SHA-256: dc21474308613fab55f53d3fd29350630faeeaa5947d64ce348147ff898a4742
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <b.a.a.a.d: java.math.BigInteger a()>
		SHA-256: b5869e31b457b9ed74cced2501a9b99568f28bfa2f90041afcc90661b915e9cc
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer39571)
		Method: <b.a.a.a.b: byte[] b(byte[],byte[],int)>
		SHA-256: b433016ccf527986709c345e48cc13b439ce6c6274d31b62bbad84681ecfb097
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.MessageDigest
		Statement: $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4492)
		Method: <org.jivesoftware.smackx.caps.EntityCapsManager: void <clinit>()>
		SHA-256: cfa9ddf4ebec426c7674851de2226f090400e415b427571d259f10e19432d89
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.c.a.df: void <clinit>()>
		SHA-256: eb950ea0f8c31b5501a39f397cda42d49243a5c0b0bcdfcd14594cfdb851bc39
		Secure: true
	Object:
		Variable: $r23
		Type: java.security.KeyStore
		Statement: $r23 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>(varReplacer22125, $r22)
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 86e92bc24dcd1e35c213bae24fd252aca3ca0ca864940b8ee55cfbdca58a01b3
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0)
		Method: <de.a.a.b.c: javax.net.ssl.X509TrustManager c()>
		SHA-256: cbc2db2fc46f1c899e47026b5be36ab157b1a928a060c234c28d8c40b0f446f5
		Secure: false
	Object:
		Variable: $r23
		Type: java.security.KeyStore
		Statement: $r23 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r10)
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 67be284f9cb62f3fd1ad6c0940c56d66639d30d20a4008aa7b4de9e540a2dd6b
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.SSLContext
		Statement: $r12 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21734)
		Method: <com.xabber.android.data.connection.ConnectionBuilder: com.xabber.xmpp.smack.XMPPTCPConnection build(com.xabber.android.data.entity.AccountJid,com.xabber.android.data.connection.ConnectionSettings)>
		SHA-256: c9ed7ff41ab5eb93d0fd8ed91663f23e677022315371f83480e732a16a5fc74a
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <de.duenndns.ssl.b: java.security.KeyStore a()>
		SHA-256: 16f58af3f1d4a096d5bacee90ecb7d901cfe94c53515476b7b8bf95e80152e47
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 3a8125237364388cb27a369c0c0a24bd61e69a6e0ae2daca7991fa8e2b7bb1af
		Secure: true
	Object:
		Variable: $r19
		Type: java.security.KeyPair
		Statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r18)
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 10dfe2960b7153980f89cb543a2dedaae74653f8927780e09499e5b7c59b41a2
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.jivesoftware.smackx.vcardtemp.packet.VCard: java.lang.String getAvatarHash()>
		SHA-256: e3729c30f707e1d5a4d0daea37ccaf1809b475c3aa16b44470d90db9545d3143
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer19168)
		Method: <b.a.a.a.b: byte[] b(byte[])>
		SHA-256: e330ce8fa4e87487a73a0b82969940c9a6bc3255948775c19f59a4a0aa5e5f70
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.PrivateKey
		Statement: $r5 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.xabber.android.data.database.realm.AccountRealm: void setKeyPair(java.security.KeyPair)>
		SHA-256: 9240ceafffaa6cd5aaa4cb917d96d5a96a9e59b0e9d65bbd644ea3bb92db4260
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.KeyAgreement
		Statement: $r3 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer32286)
		Method: <b.a.a.a.b: java.math.BigInteger a(java.security.PrivateKey,java.security.PublicKey)>
		SHA-256: 4c07639c637a373925169b1bd21e431e7cd7d26114139b3f848ae0bb03351e58
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer31751)
		Method: <de.a.a.a: void <init>(de.a.a.b)>
		SHA-256: b8fa8e1d662954dfca63d17787f4c99fb313e7081c704a90f916ff3dd4c331f2
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.PublicKey
		Statement: $r3 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.xabber.android.data.database.realm.AccountRealm: void setKeyPair(java.security.KeyPair)>
		SHA-256: d660f1bfff17bfd0c578eb111b3a4c6878a1f2186d08ef6379a698b9807a8d74
		Secure: false
	Object:
		Variable: varReplacer39581
		Type: java.lang.String
		Statement: $r8 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer39581)
		Method: <b.a.a.b.a: java.security.PublicKey h()>
		SHA-256: 9b1b02281e5f9493e51752f20306e1d20b83de33e67caf9e430088a1e8ab6e6b
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer22200)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 50aacbde6bcf1e1986f0ae55311fe730db4adb8b9b37db500bb3ba2cf285575c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <c.f: c.f d(java.lang.String)>
		SHA-256: 189fc3b1475a0a3e75ebb1e023f1b26aa8ad48c7cb93aaf516a568a716c4328c
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.Mac
		Statement: $r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer39165)
		Method: <org.jivesoftware.smack.util.MAC: void <clinit>()>
		SHA-256: ab02802f2e5675fa6f7d4146dc368251230046d59bfa56bdd6e310b87b2cc805
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer37724)
		Method: <de.a.a.b.b: boolean a(java.security.cert.X509Certificate,de.a.a.i.t,java.lang.String)>
		SHA-256: 341abe107370abc1b8c1faa2aa2ff024dc0a0a21169dd9a7db178c80c803925a
		Secure: true
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <de.a.a.c.a.f: boolean a(byte[],byte[],byte[])>
		SHA-256: bbf1c93e374d7a71cb67c9fc548db3eb347ce45015e5d6ac3fce81dd3bcbf0d3
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer34503)
		Method: <org.jivesoftware.smack.util.MD5: void <clinit>()>
		SHA-256: 9788f0cb2613a7748cca8fa2ba6fe06b1d2ba268791d6c2d0c7c52a6fe2d36dd
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2)
		Method: <okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>
		SHA-256: 131be75562789377964b01a1048670ba51f7fa7f9f94e1fbf399e843541d1155
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.KeyStore
		Statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer22132, varReplacer22133)
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 6c03200d4bb040f6dd44d8e24f068e92ac65830f3cdd11994faa7b528ecfe97a
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <de.duenndns.ssl.b: java.lang.String b(java.security.cert.X509Certificate,java.lang.String)>
		SHA-256: 80768691b0667f1fcd49f0eb7ab5ad128d369311530024168edff12cfad6b395
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer39166)
		Method: <org.jivesoftware.smack.util.MAC: byte[] hmacsha1(byte[],byte[])>
		SHA-256: c818c9c98f795e78dfaeee5dec8b26130a8d3c5d2fec43a9d4af30793be4fea
		Secure: false
	Object:
		Variable: varReplacer35321
		Type: java.lang.String
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer35321)
		Method: <b.a.a.a.b: java.security.KeyPair a()>
		SHA-256: 88628d0125a1c1b7fbe98f098438f9ff38d3610236f6f376ada2f1087f96be22
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <de.duenndns.ssl.b: javax.net.ssl.X509TrustManager a(java.security.KeyStore)>
		SHA-256: 89aa8099eb902e295801e987b6d49ed65ce1b29494c04ecebef66234ce8e48fa
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer22141)
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: faf3e9fb3108cdf56af855bcd6802b485f16e05d21290d14de0abfb286864f05
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.a.c.e.b: java.security.SecureRandom a(boolean,java.security.SecureRandom)>
		SHA-256: 184a8fa54bdb1d52d47089a3d9471edfcfcd8ac1272178eb37a06490aea5dc57
		Secure: true
	Object:
		Variable: $r52
		Type: java.security.SecureRandom
		Statement: specialinvoke $r52.<java.security.SecureRandom: void <init>()>()
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 9223ade589c22d22d509db6207763086d6c5a20904e69b808f5e96412cf35c53
		Secure: true
	Object:
		Variable: varReplacer39571
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer39571)
		Method: <b.a.a.a.b: byte[] b(byte[],byte[],int)>
		SHA-256: 849d3fb04492ab5bfe39df107b4394f7ce4197cffea533462c0726a548bb21b6
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r4)
		Method: <com.xabber.android.data.database.realm.AccountRealm: void setKeyPair(java.security.KeyPair)>
		SHA-256: 889a5c6ed904821dae73cdb5f711dd0548baa11cece0f653245dfba2c6adb953
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <de.a.a.c.a.e: void <init>(java.lang.String)>
		SHA-256: f971e44b412d20b2d4d59bd3e62805bec80d77ef6a41468bae39e13e29aced6c
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <b.a.a.a.b: byte[] a(byte[])>
		SHA-256: 1411125a9df5bb91eba9f22ce93e4b6b9e0da26b14ac792a3a36ec0f4887efbc
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r5, $r3, varReplacer37926)
		Method: <de.a.a.c.a.d: void <clinit>()>
		SHA-256: 1533f2c5840cf1923c1d5dd0bb6998e2ade555fa22e1996f87109717f6645869
		Secure: true
	Object:
		Variable: $r33
		Type: javax.net.ssl.KeyManager[]
		Statement: $r33 = virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.xabber.xmpp.smack.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: f536bf0bf0cd473cb3f96d0cdf521a85b2d01e432dc60074051a78ce6dee2a25
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyFactory
		Statement: $r8 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer39581)
		Method: <b.a.a.b.a: java.security.PublicKey h()>
		SHA-256: 9572f5ec9d9374581c772395998fe28762a8a9ea4b3fdec3f07aeb32e1ae89b
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.KeyStore
		Statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer22211, varReplacer22212)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 85ab576f0b58752aa35f140d8e8bbdeb4bebb2e0e9b860740385dfeb8c3c6d4c
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyFactory
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer32882)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: 38b36dcb0f371cd14571cd348e8329a930102a4aad4df278cc19912295449b36
		Secure: false
	Object:
		Variable: varReplacer32882
		Type: java.lang.String
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer32882)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: 439f657906346d3b9dbf466887f6c31f20bf887771562bfa39e2ca4fca082ae8
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.cert.CertificateFactory
		Statement: $r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer34516)
		Method: <de.a.a.b.b: java.security.cert.X509Certificate[] a(javax.security.cert.X509Certificate[])>
		SHA-256: 9219adfb83da2fb725d3d553dfab5657c466a70475f2bd3dc91640d239f45ad
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.PrivateKey
		Statement: $r7 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r4)
		Method: <com.xabber.android.data.database.sqlite.AccountTable: java.security.KeyPair getKeyPair(android.database.Cursor)>
		SHA-256: be6aad991ffba7f75b16b30cbb091df7091d61039d21a69474c54e958cbeaad
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.PublicKey
		Statement: $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4)
		Method: <b.a.a.a.b: javax.crypto.interfaces.DHPublicKey a(java.math.BigInteger)>
		SHA-256: c786ee9cb0400305cd1d3eb1ff3072b34b0bf5edc263edd6e717276f590295b6
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer37725)
		Method: <de.a.a.b.b: boolean a(java.security.cert.X509Certificate,de.a.a.i.t,java.lang.String)>
		SHA-256: 487eb12b7c5d9f1eb019f849b03ce1982efd478ecd8086706c1c3f12b34732aa
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyFactory
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)
		Method: <de.a.a.c.a.f: void <init>(java.lang.String,java.lang.String)>
		SHA-256: 207058fe788d423e0fae4d1f3da05d8f98993552c66e93c07796595a6a4d0b44
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <de.a.a.b.c: javax.net.ssl.X509TrustManager c()>
		SHA-256: eb6769bf6343b93cdcaa12d7094b3667932830bd14fcc7eff792b4b3536f9f5f
		Secure: false
	Object:
		Variable: varReplacer39166
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer39166)
		Method: <org.jivesoftware.smack.util.MAC: byte[] hmacsha1(byte[],byte[])>
		SHA-256: 91279222e2abf2edc23cbb91cb96d7b79726ea6591e9598df53c3d2a72bf5e5d
		Secure: false

Findings in Java Class: org.jivesoftware.smackx.caps.EntityCapsManager

	 in Method: void <clinit>()
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #cfa9ddf4ebec426c7674851de2226f090400e415b427571d259f10e19432d89)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(varReplacer4495, $r12)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #cfa9ddf4ebec426c7674851de2226f090400e415b427571d259f10e19432d89)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4492)


Findings in Java Class: com.xabber.android.data.extension.otr.OTRManager$3

	 in Method: void run()
		TypestateError violating CrySL rule for java.security.KeyPairGenerator (on Object #3c7859db8f89d18ed6e015f5b31bc8ccc0d4e04c422cdf5f9181def6c1b4a3fd)
			Unexpected call to method genKeyPair on object of type java.security.KeyPairGenerator. Expect a call to one of the following methods initialize
			at statement: $r6 = virtualinvoke $r5.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()


Findings in Java Class: org.jivesoftware.smackx.vcardtemp.packet.VCard

	 in Method: java.lang.String getAvatarHash()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a1d693b8c9c40bec925206e048c3a7e8e3011f0215a47fec9a27b11fcba03bb)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16938)


Findings in Java Class: b.a.a.a.b

	 in Method: byte[] a(byte[],byte[],int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer18745)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #71c7732d4ba1aee7b92f8b4f37fc0a1f506616aec606fd388b652c88e3d25bf2)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer18745)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r1)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #12abf0ea332541b667823d39b56858c9e591860e9c2110103844093d39cebc40)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer18746)


	 in Method: byte[] b(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #e330ce8fa4e87487a73a0b82969940c9a6bc3255948775c19f59a4a0aa5e5f70)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer19168)


	 in Method: byte[] b(byte[],byte[],int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer39571)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r1)


	 in Method: java.security.KeyPair a()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r18)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r14 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r19.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r18)


	 in Method: java.math.BigInteger a(java.security.PrivateKey,java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r3.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r2, varReplacer32284)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r3.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r1)


	 in Method: javax.crypto.interfaces.DHPublicKey a(java.math.BigInteger)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #9ea2703b5c288352078d68d4317b7e168dcb4770e3adce07d6a9085853699c79)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer19100)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer19101, $r7, varReplacer19101)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer19101, $r7, varReplacer19101)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer19101, $r7, varReplacer19101)


	 in Method: javax.net.ssl.X509TrustManager systemDefaultTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer19098)


Findings in Java Class: com.xabber.android.data.connection.ConnectionBuilder

	 in Method: com.xabber.xmpp.smack.XMPPTCPConnection build(com.xabber.android.data.entity.AccountJid,com.xabber.android.data.connection.ConnectionSettings)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21735, $r29, $r16)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #c9ed7ff41ab5eb93d0fd8ed91663f23e677022315371f83480e732a16a5fc74a)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r12 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21734)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21735, $r29, $r16)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #c9ed7ff41ab5eb93d0fd8ed91663f23e677022315371f83480e732a16a5fc74a)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r22 = virtualinvoke $r2.<com.xabber.xmpp.smack.XMPPTCPConnectionConfiguration$Builder: com.xabber.xmpp.smack.XMPPTCPConnectionConfiguration build()>()

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #19614dc2ce99b4383499e2c1236bccf9a994f053a3c76e1f6ec9df5db74fe24)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r22 = virtualinvoke $r2.<com.xabber.xmpp.smack.XMPPTCPConnectionConfiguration$Builder: com.xabber.xmpp.smack.XMPPTCPConnectionConfiguration build()>()

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21735, $r29, $r16)


Findings in Java Class: org.jivesoftware.smack.ConnectionConfiguration

	 in Method: void <init>(org.jivesoftware.smack.ConnectionConfiguration$Builder)
		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #c9ed7ff41ab5eb93d0fd8ed91663f23e677022315371f83480e732a16a5fc74a)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r7 = staticinvoke <org.jivesoftware.smack.ConnectionConfiguration$Builder: org.b.a.b access$500(org.jivesoftware.smack.ConnectionConfiguration$Builder)>($r1)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #19614dc2ce99b4383499e2c1236bccf9a994f053a3c76e1f6ec9df5db74fe24)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r7 = staticinvoke <org.jivesoftware.smack.ConnectionConfiguration$Builder: org.b.a.b access$500(org.jivesoftware.smack.ConnectionConfiguration$Builder)>($r1)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #c9ed7ff41ab5eb93d0fd8ed91663f23e677022315371f83480e732a16a5fc74a)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r17 = staticinvoke <org.jivesoftware.smack.ConnectionConfiguration$Builder: java.util.Set access$2500(org.jivesoftware.smack.ConnectionConfiguration$Builder)>($r1)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #19614dc2ce99b4383499e2c1236bccf9a994f053a3c76e1f6ec9df5db74fe24)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r17 = staticinvoke <org.jivesoftware.smack.ConnectionConfiguration$Builder: java.util.Set access$2500(org.jivesoftware.smack.ConnectionConfiguration$Builder)>($r1)


Findings in Java Class: org.jivesoftware.smack.util.TLSUtils

	 in Method: org.jivesoftware.smack.ConnectionConfiguration$Builder acceptAllCertificates(org.jivesoftware.smack.ConnectionConfiguration$Builder)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21740, $r5, $r4)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer21740, $r5, $r4)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #19614dc2ce99b4383499e2c1236bccf9a994f053a3c76e1f6ec9df5db74fe24)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer21741)


Findings in Java Class: com.xabber.xmpp.smack.XMPPTCPConnection

	 in Method: void proceedTLSReceived()
		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #67be284f9cb62f3fd1ad6c0940c56d66639d30d20a4008aa7b4de9e540a2dd6b)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r23.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r30, $r26)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #faf3e9fb3108cdf56af855bcd6802b485f16e05d21290d14de0abfb286864f05)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer22141)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #6c03200d4bb040f6dd44d8e24f068e92ac65830f3cdd11994faa7b528ecfe97a)
			First parameter (with value "KeychainStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer22132, varReplacer22133)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #149d3569f65f6c3a4264308923249134790418f4b3fa2f2f9b73f9186ec405d6)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r24, $r26)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r33, $r55, $r35)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #86e92bc24dcd1e35c213bae24fd252aca3ca0ca864940b8ee55cfbdca58a01b3)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r23.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer22121, $r26)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r24, $r26)


Findings in Java Class: org.jivesoftware.smack.tcp.XMPPTCPConnection

	 in Method: void proceedTLSReceived()
		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #53c2e77ba375d0e26df985021636c3cc1f973ca16df99c45579f5fc07ea2022c)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r24, $r26)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #976fc377129349e73430ee5534989813515847ffa25d4411981cac4dc6e217f9)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r23.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer22213, $r26)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r24, $r26)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #85ab576f0b58752aa35f140d8e8bbdeb4bebb2e0e9b860740385dfeb8c3c6d4c)
			First parameter (with value "KeychainStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer22211, varReplacer22212)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #50aacbde6bcf1e1986f0ae55311fe730db4adb8b9b37db500bb3ba2cf285575c)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer22200)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r33, $r55, $r35)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #67be284f9cb62f3fd1ad6c0940c56d66639d30d20a4008aa7b4de9e540a2dd6b)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r23.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r30, $r26)


Findings in Java Class: org.jivesoftware.smack.util.SHA1

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #537c567364ec230e8ecc71c7fa298fe02c022c482344f4fb4f6484ebd43b7970)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer26670)


Findings in Java Class: de.duenndns.ssl.b

	 in Method: javax.net.ssl.X509TrustManager a(java.security.KeyStore)
		ConstraintError violating CrySL rule for javax.net.ssl.TrustManagerFactory (on Object #2fb7aeae1a945fde184fa6fd754c4f0ca1f9b3bb504873932b9aaf7880dbbccd)
			First parameter (with value "X509") should be any of {PKIX, SunX509}
			at statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer33949)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1)


	 in Method: java.lang.String b(java.security.cert.X509Certificate,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #80768691b0667f1fcd49f0eb7ab5ad128d369311530024168edff12cfad6b395)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


	 in Method: java.security.KeyStore a()
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #16f58af3f1d4a096d5bacee90ecb7d901cfe94c53515476b7b8bf95e80152e47)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r8, $r9)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #16f58af3f1d4a096d5bacee90ecb7d901cfe94c53515476b7b8bf95e80152e47)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r8, $r9)

		TypestateError violating CrySL rule for java.security.KeyStore (on Object #16f58af3f1d4a096d5bacee90ecb7d901cfe94c53515476b7b8bf95e80152e47)
			Unexpected call to method load on object of type java.security.KeyStore. Expect a call to one of the following methods getKey,getEntry,setEntry
			at statement: virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r8, $r9)


Findings in Java Class: c.f

	 in Method: c.f d(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #189fc3b1475a0a3e75ebb1e023f1b26aa8ad48c7cb93aaf516a568a716c4328c)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #189fc3b1475a0a3e75ebb1e023f1b26aa8ad48c7cb93aaf516a568a716c4328c)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: org.jivesoftware.smack.util.MD5

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #9788f0cb2613a7748cca8fa2ba6fe06b1d2ba268791d6c2d0c7c52a6fe2d36dd)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer34503)


Findings in Java Class: de.a.a.b.b

	 in Method: java.security.cert.X509Certificate[] a(javax.security.cert.X509Certificate[])
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #9219adfb83da2fb725d3d553dfab5657c466a70475f2bd3dc91640d239f45ad)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCRL
			at statement: $r6 = virtualinvoke $r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3)


Findings in Java Class: org.jivesoftware.smack.util.MAC

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #ab02802f2e5675fa6f7d4146dc368251230046d59bfa56bdd6e310b87b2cc805)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer39165)


	 in Method: byte[] hmacsha1(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #c818c9c98f795e78dfaeee5dec8b26130a8d3c5d2fec43a9d4af30793be4fea)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer39166)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer39166)


Findings in Java Class: de.a.a.c.a.e

	 in Method: void <init>(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f971e44b412d20b2d4d59bd3e62805bec80d77ef6a41468bae39e13e29aced6c)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


Findings in Java Class: androidx.b.g

	 in Method: java.lang.Object put(java.lang.Object,java.lang.Object)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #f971e44b412d20b2d4d59bd3e62805bec80d77ef6a41468bae39e13e29aced6c)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r3 = r0.<androidx.b.g: java.lang.Object[] g>


Findings in Java Class: de.a.a.c.a.f

	 in Method: void <init>(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyFactory (on Object #207058fe788d423e0fae4d1f3da05d8f98993552c66e93c07796595a6a4d0b44)
			First parameter (with value "ECGOST3410") should be any of {RSA, DiffieHellman, DH, DSA, EC}
			at statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)


	 in Method: boolean a(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r5)


Findings in Java Class: okhttp3.Cache$Entry

	 in Method: java.util.List readCertificateList(c.e)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #99331ec324c48bbbd4fe3212d42694f7bb0bf1995e65590f459edd7077efce3c)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertificate, generateCertPath, generateCRL
			at statement: $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer40700)

		TypestateError violating CrySL rule for java.security.cert.CertificateFactory (on Object #99331ec324c48bbbd4fe3212d42694f7bb0bf1995e65590f459edd7077efce3c)
			Unexpected call to method generateCertificate on object of type java.security.cert.CertificateFactory. Expect a call to one of the following methods generateCRL
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)

		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #99331ec324c48bbbd4fe3212d42694f7bb0bf1995e65590f459edd7077efce3c)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCertPath, generateCRL, java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)
			at statement: $r9 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8)


Findings in Java Class: com.xabber.android.data.database.realm.AccountRealm

	 in Method: java.security.KeyPair getKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r7.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r5, $r6)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r7.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r5, $r6)

		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r2.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)


	 in Method: void setKeyPair(java.security.KeyPair)
		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r4)


Findings in Java Class: de.a.a.b.c

	 in Method: javax.net.ssl.X509TrustManager c()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer31585)


Findings in Java Class: com.xabber.android.data.database.sqlite.AccountTable

	 in Method: java.security.KeyPair getKeyPair(android.database.Cursor)
		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r7)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r7)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r7 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r4)


Findings in Java Class: org.jivesoftware.smack.util.dns.minidns.MiniDnsDaneVerifier

	 in Method: void init(javax.net.ssl.SSLContext,javax.net.ssl.KeyManager[],javax.net.ssl.X509TrustManager,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r9, $r1)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r9, $r1)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r9, $r1)


Findings in Java Class: b.a.a.b.a

	 in Method: java.security.PublicKey h()
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r9 = virtualinvoke $r8.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 111

	CryptoAnalysis found the following violations. For details see description above.
	NeverTypeOfError: 1
	ConstraintError: 22
	TypestateError: 3
	HardCodedError: 7
	RequiredPredicateError: 40
	IncompleteOperationError: 11
=====================================================================
