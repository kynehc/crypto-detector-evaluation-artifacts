0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12633)
		Method: <org.jivesoftware.smack.util.MD5: void <clinit>()>
		SHA-256: 498c1b804799162efa12a40b1b037e8d00d62447b7f8a31015da7b823d292bc9
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer14267)
		Method: <de.measite.minidns.dane.DaneVerifier: boolean checkCertificateMatches(java.security.cert.X509Certificate,de.measite.minidns.record.TLSA,java.lang.String)>
		SHA-256: 3b22cbb053b300f4c46c2b530eb4bca651adb3092947669d33b67e5ace3a03f8
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier: boolean verify(byte[],byte[],byte[])>
		SHA-256: 6e5a38081a611515d4b47f0556fd9fc4356c61c58cdada912e2d4ff1f24380f7
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyFactory
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier: void <init>(java.lang.String,java.lang.String)>
		SHA-256: d6bb4b30cdbee7ff837ce1cc95136a9cd54ac9f5129c558d6320a140033e2fcc
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <de.measite.minidns.dane.ExpectingTrustManager: javax.net.ssl.X509TrustManager getDefaultTrustManager()>
		SHA-256: da13dc9be512843c3898e3f8a87c22720f159b9b23cb04feb5c6c7d573e14b7f
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8114)
		Method: <org.jivesoftware.smack.util.SHA1: void <clinit>()>
		SHA-256: b73d2754e92550490ea9b2eb9746471c9d431152a01fb8fc0603af88abb6116
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0)
		Method: <de.measite.minidns.dane.ExpectingTrustManager: javax.net.ssl.X509TrustManager getDefaultTrustManager()>
		SHA-256: df5673967c4cace71082102717bc9fcb4d9a8a6db986221d913c666c8e4dc59b
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r5, $r3, varReplacer14446)
		Method: <de.measite.minidns.dnssec.algorithms.ECGOSTSignatureVerifier: void <clinit>()>
		SHA-256: 82442340cd7548b18b65654b50625a18d9da71f0c61f05765a30462b6f6b229b
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r5)
		Method: <org.jivesoftware.smack.util.TLSUtils: byte[] getChannelBindingTlsServerEndPoint(javax.net.ssl.SSLSession)>
		SHA-256: ebe7591f1c8b439a832c4e1943124ae0fd9b8d043d5bf772a9068e23f62297db
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer11092)
		Method: <de.measite.minidns.AbstractDNSClient: void <init>(de.measite.minidns.DNSCache)>
		SHA-256: 921036ec070cdbb6a0afb4b3d6b860c1530c9aee4986c8c735efa6acc55b7d87
		Secure: true
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier: boolean verify(byte[],byte[],byte[])>
		SHA-256: fc135b08a70d678ef72fc96ee1a53136e76bd520f8ffb5d3883c91a74b3b0495
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.KeyStore
		Statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>(varReplacer4348, $r23)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 2f0c1167171e6ae9b58f9784c7176199fed6bee3dbb7bc61266dd86c06d61635
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.KeyStore
		Statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer4340, varReplacer4341)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 97da634135c20a0507aa879731aa2721106e95a4d2f532c2c90f69c05ae22699
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer14264)
		Method: <de.measite.minidns.dane.DaneVerifier: boolean checkCertificateMatches(java.security.cert.X509Certificate,de.measite.minidns.record.TLSA,java.lang.String)>
		SHA-256: 4e9990bb17231fd4d5c58389d22456a41af4b007e7f7a20997ec2c84274e7d99
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.Mac
		Statement: $r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer15488)
		Method: <org.jivesoftware.smack.util.MAC: void <clinit>()>
		SHA-256: 5d67b17cf023ea672a3a8cd737b5ed9a6b1fe93e61ad5d9131ad3e040ac8abb4
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer15489)
		Method: <org.jivesoftware.smack.util.MAC: byte[] hmacsha1(byte[],byte[])>
		SHA-256: 17bb4a53b2c8dd1808b65b78b21282017aee87b174463d8f27fdf8f60f73aa89
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <de.measite.minidns.dane.DaneVerifier: boolean checkCertificateMatches(java.security.cert.X509Certificate,de.measite.minidns.record.TLSA,java.lang.String)>
		SHA-256: 9431e266c7b48001b40adc26842f0bdf0554473b3d2c2740d287437893e71676
		Secure: true
	Object:
		Variable: $r32
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r32 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r12)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 6c1ae8e98eeae0f89f9be52062ae88613361dea7680198d73e7de44343ada2da
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <de.measite.minidns.dane.DaneVerifier: boolean checkCertificateMatches(java.security.cert.X509Certificate,de.measite.minidns.record.TLSA,java.lang.String)>
		SHA-256: 9431e266c7b48001b40adc26842f0bdf0554473b3d2c2740d287437893e71676
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.cert.CertificateFactory
		Statement: $r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>(varReplacer12648)
		Method: <de.measite.minidns.dane.DaneVerifier: java.security.cert.X509Certificate[] convert(javax.security.cert.X509Certificate[])>
		SHA-256: 5157e57a240609185cc379e14ff53e23b403372c494326fb9cb456f0ee392139
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.MessageDigest
		Statement: $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1222)
		Method: <org.jivesoftware.smackx.caps.EntityCapsManager: void <clinit>()>
		SHA-256: 11682e4272fb0a5eb4653105f1e28a21584093284169e500d3ba62693de12253
		Secure: false
	Object:
		Variable: $r10
		Type: javax.net.ssl.SSLContext
		Statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4358)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: e208e0fd49dca357727fa49de9b08651d720a017d156029992652879fc8cb983
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.jivesoftware.smack.util.TLSUtils: byte[] getChannelBindingTlsServerEndPoint(javax.net.ssl.SSLSession)>
		SHA-256: f3283ff8ccf065196e7212b48f66879fd070b140510253b578ebd7f537109584
		Secure: true
	Object:
		Variable: varReplacer15489
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer15489)
		Method: <org.jivesoftware.smack.util.MAC: byte[] hmacsha1(byte[],byte[])>
		SHA-256: 43a160d1a518fae8ea99424a685d2ab6282b537238be99d3aba8415963a6826f
		Secure: false
	Object:
		Variable: $r35
		Type: javax.net.ssl.KeyManager[]
		Statement: $r35 = virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 4afe1757f6f08280b5aad338b007a6e06a242a716ae7b18826afab5641a26c97
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r3, $r8, $r6, varReplacer16107)
		Method: <de.measite.minidns.dnssec.algorithms.ECDSASignatureVerifier: void <init>(java.math.BigInteger[],int,java.lang.String)>
		SHA-256: cc757267e82952ac40c52e21c6a617393db96c4b8b574c71fa6dd280bd457783
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <de.measite.minidns.AbstractDNSClient: void <init>(de.measite.minidns.DNSCache)>
		SHA-256: e55ecf3493dde0cec51a717d23b0a62bf835fb741f3a71cdb824afda4d2f930
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier: boolean verify(byte[],byte[],byte[])>
		SHA-256: f1e30a6faf65a4b834a38c62244e89293f91a21f1362b088a697b9e242472c7b
		Secure: false
	Object:
		Variable: $r53
		Type: java.security.SecureRandom
		Statement: specialinvoke $r53.<java.security.SecureRandom: void <init>()>()
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: ee077d8cf5e6e313a06e6fc50ecf0c3e7f3e85d31cfbcc55020f6937c5c0544e
		Secure: true
	Object:
		Variable: $r24
		Type: java.security.KeyStore
		Statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r12)
		Method: <org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>
		SHA-256: 3fd8abe3f9b6c6743e4bc59c09be83c198b2b94e40a11d98709085fa890d1483
		Secure: false
	Object:
		Variable: $r3
		Type: java.lang.String
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier: void <init>(java.lang.String,java.lang.String)>
		SHA-256: 22e74f537b4fa4ebe6c0554ffcb237888613831bfc374c53ea2501d0e35bf0bb
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <de.measite.minidns.dnssec.algorithms.JavaSecDigestCalculator: void <init>(java.lang.String)>
		SHA-256: 27f10d36f956bb46cbfe64756f259ad7962bc65acc218ac50caa3410dcd06af5
		Secure: false

Findings in Java Class: org.jivesoftware.smackx.caps.EntityCapsManager

	 in Method: void <clinit>()
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #11682e4272fb0a5eb4653105f1e28a21584093284169e500d3ba62693de12253)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(varReplacer1221, $r12)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #11682e4272fb0a5eb4653105f1e28a21584093284169e500d3ba62693de12253)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1222)


Findings in Java Class: android.support.v4.util.SimpleArrayMap

	 in Method: java.lang.Object put(java.lang.Object,java.lang.Object)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #11682e4272fb0a5eb4653105f1e28a21584093284169e500d3ba62693de12253)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r3 = r0.<android.support.v4.util.SimpleArrayMap: java.lang.Object[] mArray>


Findings in Java Class: org.jivesoftware.smack.tcp.XMPPTCPConnection

	 in Method: void proceedTLSReceived()
		IncompleteOperationError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #6c1ae8e98eeae0f89f9be52062ae88613361dea7680198d73e7de44343ada2da)
			Operation on object of type javax.net.ssl.KeyManagerFactory object not completed. Expected call to init
			at statement: $r35 = virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r25, $r27)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #97da634135c20a0507aa879731aa2721106e95a4d2f532c2c90f69c05ae22699)
			First parameter (with value "KeychainStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer4340, varReplacer4341)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #6c1ae8e98eeae0f89f9be52062ae88613361dea7680198d73e7de44343ada2da)
			Operation on object of type javax.net.ssl.KeyManagerFactory object not completed. Expected call to init
			at statement: $r32 = null

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #3fd8abe3f9b6c6743e4bc59c09be83c198b2b94e40a11d98709085fa890d1483)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r24.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r30, $r27)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #6c1ae8e98eeae0f89f9be52062ae88613361dea7680198d73e7de44343ada2da)
			Operation on object of type javax.net.ssl.KeyManagerFactory object not completed. Expected call to init
			at statement: $r32 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r12)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #2f0c1167171e6ae9b58f9784c7176199fed6bee3dbb7bc61266dd86c06d61635)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r24.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer4355, $r27)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r35, $r56, $r36)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #e208e0fd49dca357727fa49de9b08651d720a017d156029992652879fc8cb983)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4358)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #6c1ae8e98eeae0f89f9be52062ae88613361dea7680198d73e7de44343ada2da)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r32.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r25, $r27)


Findings in Java Class: org.jivesoftware.smack.util.SHA1

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b73d2754e92550490ea9b2eb9746471c9d431152a01fb8fc0603af88abb6116)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8114)


Findings in Java Class: dummyMainClass

	 in Method: void dummyMainMethod(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #5d67b17cf023ea672a3a8cd737b5ed9a6b1fe93e61ad5d9131ad3e040ac8abb4)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: return

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #b73d2754e92550490ea9b2eb9746471c9d431152a01fb8fc0603af88abb6116)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: return

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #498c1b804799162efa12a40b1b037e8d00d62447b7f8a31015da7b823d292bc9)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: return


Findings in Java Class: org.jivesoftware.smack.util.MD5

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #498c1b804799162efa12a40b1b037e8d00d62447b7f8a31015da7b823d292bc9)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12633)


Findings in Java Class: de.measite.minidns.dane.DaneVerifier

	 in Method: java.security.cert.X509Certificate[] convert(javax.security.cert.X509Certificate[])
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #5157e57a240609185cc379e14ff53e23b403372c494326fb9cb456f0ee392139)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCRL
			at statement: $r6 = virtualinvoke $r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3)


Findings in Java Class: org.jivesoftware.smack.util.MAC

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #5d67b17cf023ea672a3a8cd737b5ed9a6b1fe93e61ad5d9131ad3e040ac8abb4)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer15488)


	 in Method: byte[] hmacsha1(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #17bb4a53b2c8dd1808b65b78b21282017aee87b174463d8f27fdf8f60f73aa89)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer15489)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer15489)


Findings in Java Class: de.measite.minidns.dnssec.algorithms.JavaSecDigestCalculator

	 in Method: void <init>(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #27f10d36f956bb46cbfe64756f259ad7962bc65acc218ac50caa3410dcd06af5)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #27f10d36f956bb46cbfe64756f259ad7962bc65acc218ac50caa3410dcd06af5)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


Findings in Java Class: de.measite.minidns.dnssec.algorithms.JavaSecSignatureVerifier

	 in Method: void <init>(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyFactory (on Object #d6bb4b30cdbee7ff837ce1cc95136a9cd54ac9f5129c558d6320a140033e2fcc)
			First parameter (with value "ECGOST3410") should be any of {RSA, DiffieHellman, DH, DSA, EC}
			at statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3)


	 in Method: boolean verify(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r5)


Findings in Java Class: de.measite.minidns.dane.ExpectingTrustManager

	 in Method: javax.net.ssl.X509TrustManager getDefaultTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer10387)


Findings in Java Class: org.jivesoftware.smack.util.dns.minidns.MiniDnsDaneVerifier

	 in Method: void init(javax.net.ssl.SSLContext,javax.net.ssl.KeyManager[],javax.net.ssl.X509TrustManager,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r9, $r1)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r9, $r1)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 32

	CryptoAnalysis found the following violations. For details see description above.
	IncompleteOperationError: 10
	HardCodedError: 3
	RequiredPredicateError: 7
	ConstraintError: 9
=====================================================================
