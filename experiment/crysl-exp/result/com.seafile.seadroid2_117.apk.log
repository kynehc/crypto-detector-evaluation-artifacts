0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <com.seafile.seadroid2.gesturelock.LockPatternUtils: byte[] patternToHash(java.util.List)>
		SHA-256: 1a0fe2bbc34a0f175a430a9a5beb12f7d955228998f6a84ec5611daf5d9b9296
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.SecureRandom
		Statement: specialinvoke $r12.<java.security.SecureRandom: void <init>()>()
		Method: <com.seafile.seadroid2.ssl.SSLTrustManager: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(com.seafile.seadroid2.account.Account)>
		SHA-256: 8a2c922006b06f75ee99dfc0d337cba7faf1f49633c0fc2f81f1adb1d3edc7cb
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer18001)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] seafileEncrypt(byte[],int,javax.crypto.SecretKey,byte[])>
		SHA-256: af9d89a996824c796110fcc89fb27d9e04ade30d793e3eab3524f0b250331d8e
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: c1be9d0b01edb148a5a898d4a6573aa27b3652d619c42f0bac0506e26dd1e5b2
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>
		SHA-256: 4704c3ea9d50e304ebaa64f80abc0358b23fd9e2c75b25360e6595ec058a5c98
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.seafile.seadroid2.data.CertificateInfo: java.lang.String getSignature(java.lang.String)>
		SHA-256: 10eed9eea78bd383150f4504584c427210a71c5c767b7f5312a7b7dc95b6a4fd
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.Cipher
		Statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer13148)
		Method: <com.google.android.exoplayer2.source.hls.Aes128DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
		SHA-256: a5b56e1b9e645738f7a939864060130d7d72a1d49e4fbf525dcacdc0032ef6f4
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer30958)
		Method: <com.seafile.seadroid2.gesturelock.LockPatternUtils: byte[] patternToHash(java.util.List)>
		SHA-256: dc34b8deeeaaeb814080acc3043c0167673a3cf51358fa143f8e705534e1c8b3
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.seafile.seadroid2.crypto.Crypto: java.lang.String sha1(byte[])>
		SHA-256: 94f019af38fff981b031385b922ec0a3a40b9536135ffa5e60afbbd28f09587d
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer28789)
		Method: <com.danikula.videocache.ProxyCacheUtils: java.lang.String computeMD5(java.lang.String)>
		SHA-256: a217c07c92f533a1f5888c899135a995a3e8d323438bef3b4843bcf0712cf0de
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer29577)
		Method: <com.seafile.seadroid2.ssl.SSLSeafileSocketFactory: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
		SHA-256: 821e8f9da8cde8e39978659ee141cd271f4a19804d9bfb1ee1f54793bb2b963f
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer9657)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] decrypt(byte[],java.lang.String,java.lang.String)>
		SHA-256: fcb42635c8c0bc4982b2c926d700efb215583c871398ae3dea77574b90ce69cb
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer9671)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] seafileDecrypt(byte[],javax.crypto.SecretKey,byte[])>
		SHA-256: 8897e9aa1f199b9f5148781e4b40dad9f77b8a81c2c46c3fc2972b48e38d7cfd
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.seafile.seadroid2.data.CertificateInfo: java.lang.String getSignature(java.lang.String)>
		SHA-256: 52cad1c741398b0b55b7ac93c84c3c6eb1b09d044fe7bd1f04d814f0449a7f9b
		Secure: false
	Object:
		Variable: varReplacer13146
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer13146)
		Method: <com.google.android.exoplayer2.source.hls.Aes128DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
		SHA-256: d9a80a01f79f913d7fff1effe0fd87fc02d80b5fbbcd8c157d7f9bfc5110dc83
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: a79a1700ae9d8d44f13ea218f751e7024f8f1222b1b2ae17cdbab7b56d352181
		Secure: false
	Object:
		Variable: $r14
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] seafileDecrypt(byte[],javax.crypto.SecretKey,byte[])>
		SHA-256: 158486c01e523f2e527cb6e8d4085d2d5d10c329142a217ae2ab7c2d9f5b4514
		Secure: false
	Object:
		Variable: varReplacer17997
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer17997)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] encrypt(byte[],int,java.lang.String,java.lang.String)>
		SHA-256: 5c3c5275d300443359db554f308abfc38da82009cd5511e9d3466298195f441c
		Secure: false
	Object:
		Variable: $r14
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] seafileEncrypt(byte[],int,javax.crypto.SecretKey,byte[])>
		SHA-256: e277ba8d89c7be7cb93b20e2434c9e54e656eef0c91c5899a74d03802b07c071
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer18369)
		Method: <com.seafile.seadroid2.ssl.SSLTrustManager: void init()>
		SHA-256: d4273894ac531c76b982ac2983419c6dfdd12dd8cf720cf78d55862d75b7fb98
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25032)
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: 8d0155af524c112db7ba172046a8ca092f1f072d989a831370ffb95f93aef848
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer26017)
		Method: <com.bumptech.glide.load.engine.cache.SafeKeyGenerator$1: com.bumptech.glide.load.engine.cache.SafeKeyGenerator$PoolableDigestContainer create()>
		SHA-256: abfca701e9e788821d4c648b5310e8d4b849c72e9d6a163ecf3def4e249b4d70
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r6.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r7, $r1)
		Method: <com.google.android.exoplayer2.source.hls.Aes128DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
		SHA-256: b1c95b83a0b54225f85323d6e64404f4f9fb65cf558dc3cc43ef619428a138c7
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer17997)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] encrypt(byte[],int,java.lang.String,java.lang.String)>
		SHA-256: ffd2e5b6ace6e84a992fd4ec420cf06f96b03c9e1a075e570232357a068fb8fd
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer17995)
		Method: <com.seafile.seadroid2.crypto.Crypto: java.lang.String sha1(byte[])>
		SHA-256: 7d0e8d94952a662cfccc1aa3184f5d2d09aa0d2c3e7528c1214418bde2b970d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer32152)
		Method: <okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)>
		SHA-256: fbe27e26f28d1f43e01513892db28fdad090359ae2e707c151615753c7c76f8d
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.ByteString: okio.ByteString digest(java.lang.String)>
		SHA-256: b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e
		Secure: false
	Object:
		Variable: varReplacer9657
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer9657)
		Method: <com.seafile.seadroid2.crypto.Crypto: byte[] decrypt(byte[],java.lang.String,java.lang.String)>
		SHA-256: 5a741bf2a4b17e83c86c05734b00654433ea8defb8da0597b4e9a95760a4b594
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.danikula.videocache.ProxyCacheUtils: java.lang.String computeMD5(java.lang.String)>
		SHA-256: 2c0b85bd39441231516ebce07ef7cba5bb196c1adac5902c4f56547a97b8aa50
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>
		SHA-256: 61965954da2703450175e336d331a8bc311810e943eebaeca9d739b64a0fdc1
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <com.seafile.seadroid2.gesturelock.LockPatternUtils: byte[] patternToHash(java.util.List)>
		SHA-256: 257b2458bd0d3612dc583b67b8954e61944b6ad4192f74cfcd6177c5b039d8f0
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)
		Method: <com.google.android.exoplayer2.source.hls.Aes128DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
		SHA-256: 74efd2ca2013e34a93725a12b2428b082241b229a3b9c59222ec28d5225e0d5
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer13146)
		Method: <com.google.android.exoplayer2.source.hls.Aes128DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
		SHA-256: a9e5cbef3c8134b41be936415ac49597dfe1df2162696b226bffe4daa972938
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <com.seafile.seadroid2.ssl.SSLTrustManager: void init()>
		SHA-256: 48df5c1bb7df8d8d02126b9d390e40295d7868b3d5db6a556a5755f3d13f736
		Secure: false

Findings in Java Class: com.seafile.seadroid2.crypto.Crypto

	 in Method: byte[] seafileDecrypt(byte[],javax.crypto.SecretKey,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #8897e9aa1f199b9f5148781e4b40dad9f77b8a81c2c46c3fc2972b48e38d7cfd)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer9671)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer9669, $r2, $r0)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #8897e9aa1f199b9f5148781e4b40dad9f77b8a81c2c46c3fc2972b48e38d7cfd)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)


	 in Method: java.lang.String sha1(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7d0e8d94952a662cfccc1aa3184f5d2d09aa0d2c3e7528c1214418bde2b970d)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer17995)


	 in Method: byte[] seafileEncrypt(byte[],int,javax.crypto.SecretKey,byte[])
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #af9d89a996824c796110fcc89fb27d9e04ade30d793e3eab3524f0b250331d8e)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r1, varReplacer18004, $i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedIV [ with CBC, It's required to use IVParameterSpec]
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer18015, $r2, $r0)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer18015, $r2, $r0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #af9d89a996824c796110fcc89fb27d9e04ade30d793e3eab3524f0b250331d8e)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer18001)


	 in Method: byte[] encrypt(byte[],int,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer17997)


	 in Method: byte[] decrypt(byte[],java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer9657)


Findings in Java Class: com.google.android.exoplayer2.source.hls.Aes128DataSource

	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer13146)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r1.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer13147, $r3, $r5)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #a5b56e1b9e645738f7a939864060130d7d72a1d49e4fbf525dcacdc0032ef6f4)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer13148)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)


Findings in Java Class: com.seafile.seadroid2.ssl.SSLTrustManager

	 in Method: void init()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer18370)

		ConstraintError violating CrySL rule for javax.net.ssl.TrustManagerFactory (on Object #d4273894ac531c76b982ac2983419c6dfdd12dd8cf720cf78d55862d75b7fb98)
			First parameter (with value "X509") should be any of {PKIX, SunX509}
			at statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer18369)


Findings in Java Class: com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator

	 in Method: byte[] getMD5(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #8d0155af524c112db7ba172046a8ca092f1f072d989a831370ffb95f93aef848)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25032)


Findings in Java Class: com.seafile.seadroid2.data.CertificateInfo

	 in Method: java.lang.String getSignature(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #10eed9eea78bd383150f4504584c427210a71c5c767b7f5312a7b7dc95b6a4fd)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #10eed9eea78bd383150f4504584c427210a71c5c767b7f5312a7b7dc95b6a4fd)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


Findings in Java Class: com.danikula.videocache.ProxyCacheUtils

	 in Method: java.lang.String computeMD5(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a217c07c92f533a1f5888c899135a995a3e8d323438bef3b4843bcf0712cf0de)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer28789)


Findings in Java Class: com.seafile.seadroid2.ssl.SSLSeafileSocketFactory

	 in Method: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #821e8f9da8cde8e39978659ee141cd271f4a19804d9bfb1ee1f54793bb2b963f)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer29577)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r3, $r1, $r2)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r3, $r1, $r2)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r3, $r1, $r2)


Findings in Java Class: com.seafile.seadroid2.gesturelock.LockPatternUtils

	 in Method: byte[] patternToHash(java.util.List)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #dc34b8deeeaaeb814080acc3043c0167673a3cf51358fa143f8e705534e1c8b3)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer30958)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #fbe27e26f28d1f43e01513892db28fdad090359ae2e707c151615753c7c76f8d)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer32152)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer32153, $r7, varReplacer32153)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer32153, $r7, varReplacer32153)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer32153, $r7, varReplacer32153)


	 in Method: javax.net.ssl.X509TrustManager systemDefaultTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer32151)


Findings in Java Class: okio.ByteString

	 in Method: okio.ByteString digest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b336d574501b28a5bd90db22472c23a68acb0c1b99c4f14746fdc2a23c69a24e)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 34

	CryptoAnalysis found the following violations. For details see description above.
	RequiredPredicateError: 18
	TypestateError: 2
	ConstraintError: 13
=====================================================================
