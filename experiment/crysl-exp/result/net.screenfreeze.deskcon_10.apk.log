0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r25
		Type: java.security.SecureRandom
		Statement: specialinvoke $r25.<java.security.SecureRandom: void <init>()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 35c5a7a985b7e68669f6e349099a814d36c9eff84d57af69c496bd833c40355f
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece: java.security.KeyPair generateKeyPair()>
		SHA-256: d8044a47b721dcccc678a9e93e3c578ddb60d678d6128aeee89689f416627ba5
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECNRSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 9280f6752b6e6221628d06f9d60b4341d2a16061cd2ae2c26b66d065728b8af7
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ad09a8cc451d7562d765a3c3953e026b09435e52717c46ee70f292549e8a933e
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: a9c19b12994234db6ec00ed5b541d5738b556e23d3870b731ea4245dbf932de7
		Secure: true
	Object:
		Variable: $i3
		Type: int
		Statement: $i3 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL2()>
		SHA-256: 6fd694797fb48b64f25220c570a5e9114941d0f7a57e68ff2a329beed446edcd
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 6dae500fa4127477f702f7c8db5b65ac00e8420fed109375c053548083b8d090
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r6, $r7)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(org.spongycastle.crypto.params.DSAPrivateKeyParameters)>
		SHA-256: 2d5d5ac1c460f68032e60a336ee4552b59000b4adb566ea09230715136a1ffd8
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r5, $r6)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.crypto.params.DSAPublicKeyParameters)>
		SHA-256: 9390edae09a93724017ade479bb47ea94287e6460977d2dad3759cd566636f64
		Secure: true
	Object:
		Variable: $r10
		Type: javax.net.ssl.SSLContext
		Statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer447)
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: 24f37dccd3ebe9a1dc495c96ab0d9a38c403678349c4505862887022248215fb
		Secure: false
	Object:
		Variable: $r17
		Type: java.security.PrivateKey
		Statement: $r17 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 5e378eed2682a05fa231672ce69ef4dff1150a1dfd5dab60e5afb2058db38314
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r12.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r13, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,org.spongycastle.jce.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: a1d5c1019a937ff6b0dec47095ae3215e200e9859a8bed325078ed91f3857d0c
		Secure: true
	Object:
		Variable: $i2
		Type: int
		Statement: $i2 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>
		SHA-256: bad0b9e013ace330c0fc0bd15ed231eb280cbf9df29e43d37971487818a0572e
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSTU4145Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: bb98eee2eb82fb2c71e59ff99dcc6ac412ba5d86e67e379f475f490796e58a35
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.OAEPEncoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2927d56a192959dc3453ff63fb3830152d4c89781cce727cc1398f859f78edbf
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: void initialize(java.security.spec.AlgorithmParameterSpec)>
		SHA-256: 258817eb58452bc80469c4fa8447d3a25074f4aeb5a741e77af758aade1e404a
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ec9b0ac4a030d94fe97f5bc8789d3a331d3ff2c1b0b22683dd97941464e25d7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initializeDefault()>
		SHA-256: 6fc5ae8de838d930d90af541e0c9e6ef7f5c576ff89b5cbca0fd6d98a8b5123b
		Secure: true
	Object:
		Variable: $i4
		Type: int
		Statement: $i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(int,int,java.security.SecureRandom)>
		SHA-256: a4f3e33dc159e4190dcf71481ad704fbaa0a529d36f521c21d33c7c9a2e5e886
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1256)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: f8ed7247608cc179f601f78cf6acb87ae6a18497dac0b8abeddd06533e280863
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: java.security.KeyPair generateKeyPair()>
		SHA-256: e3023e7e692cb99b0c61179797dcf5cd3af59ae4a383bd7416c16c04ea37609a
		Secure: false
	Object:
		Variable: $r8
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r4)
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: 5156e7444b7a9d02cb88a09512863dc85b1be987304d0e0bbb0305cdf8355262
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r12, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,java.security.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: c7c434ba14780f6c3b9eb57cd97eaba20db8827ea32cddaaa5681baa0f5c9353
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r7)
		Method: <org.spongycastle.cert.crmf.jcajce.JcePKMACValuesCalculator: byte[] calculateMac(byte[],byte[])>
		SHA-256: 4df3b0000dcd5b664f5f1788eb01ce53f6314f50c4600a216f8b2756d090bc9e
		Secure: false
	Object:
		Variable: i2
		Type: int
		Statement: i2 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL2()>
		SHA-256: 499de4bef7fe93293fa2ff255b12e690439fc9d479b0c2cd2e73c02fdfb092ab
		Secure: true
	Object:
		Variable: $i2
		Type: int
		Statement: $i2 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(int,int,java.security.SecureRandom)>
		SHA-256: ffadcd0c1deb9aa230064d71d8d7c84f70bb9aae60996e165b02c659cf3d7e70
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.Signature
		Statement: $r1 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r0)
		Method: <org.spongycastle.x509.X509Util: java.security.Signature getSignatureInstance(java.lang.String)>
		SHA-256: a1e8f96a5f538937539be4b536267e8cf9449d60376c983782c1f9e62c1b62a6
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.RSABlindedEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer449)
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: aa54dfc61a2376a694c1830efa7147c641e2122753cd4cfc051ac291fc3c0abd
		Secure: false
	Object:
		Variable: $i3
		Type: int
		Statement: $i3 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(int,int,java.security.SecureRandom)>
		SHA-256: eff8d55836216cf06f76ffa35547c7047b6a9337ec5132418de58189ef2a9d85
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char)>
		SHA-256: f6029f09e7eaad0a79299673ca4a747029813212ccf99c394d2770a03fc5295a
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.SecureRandom
		Statement: specialinvoke $r11.<java.security.SecureRandom: void <init>()>()
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: a56beb690e977bdb0b35bdb75c222f0bc4256c76798de6cb5e4cae07f845db78
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.KeyPair
		Statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: aadd026eb861686e693690e72b434ddb064fe8bbbf9e5c4e4de2a60a071d8baf
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 695a63ac07e9ab285d957b9f0e2b5041d5ed4bd768e98a813d4961082958b68e
		Secure: true
	Object:
		Variable: $r10
		Type: javax.net.ssl.SSLContext
		Statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer451)
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: 5e9d9c35fac49e996891d8cec3654bbeb92ba3c7209fb114a24801a0cda6c9ed
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r10.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r0, $r5, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 2fa3c86e85d2988f97fab44a96b1c1f34f00138e6946e6999e9f09daa5df51fc
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)
		Method: <org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 7e607f2b0148a3c2f0cc3a50502aa1d8d622c22ef1a312f9fed011b06d0c82f4
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59
		Secure: true
	Object:
		Variable: r1
		Type: java.security.SecureRandom
		Statement: specialinvoke r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: 976278d7f7d95a4f24d6a4dcfd009558740370f422ea3303d5b2e3b2b8b2b87e
		Secure: true
	Object:
		Variable: $i0
		Type: int
		Statement: $i0 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>
		SHA-256: 7b9a4353bc8b3c8acb4ed9788c6581011d5818181ca2bc3200cd6af2bc8c0d4b
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 6b8822e70d4604e23c0ea07692bf2c9c1daaa36d64fb48b6df14aae465189041
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: $r9
		Type: javax.net.ssl.KeyManager[]
		Statement: $r9 = virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: 291c6523f3784e92b84738a6925d19a82abc93ba4d721e52104eceb0daa261dc
		Secure: false
	Object:
		Variable: $i5
		Type: int
		Statement: $i5 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomLowerTriangularMatrix(int,java.security.SecureRandom)>
		SHA-256: 3b3b10ad88d61e59457112d1798531a2f03816ddc14419e03a3a946b35b0b994
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece: void initialize(java.security.spec.AlgorithmParameterSpec)>
		SHA-256: 2b151ac6432cffe60f9912de6b759456c63ba02def12fd88379cf5923bd84fc3
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: e5641f7c625a5adf69656f7bfd86582f428ff3e5103d446bafee506d51fd603e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: b9c970d7ca75c43cb7258988e82963e870aab49d0877fadda916613732dffc1d
		Secure: true
	Object:
		Variable: i2
		Type: int
		Statement: i2 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL1()>
		SHA-256: c3e33eef177d6a4c039eea139d849ebbbed24f9ec0bf77a2be085ec6d287e4d9
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1260)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: f9d6c4aa9c16a33260f86203ea182fdc65a31f1294691fb4f860fee605be3ce8
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: c298353e5545f70cbdb99b3ca11ca15c9b136f9fad09c5830e7caf4e4e6a61a9
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: c908257ebef1e44e27421c3dc6127a4c79990e1515e273132ea2c2cb020fcdee
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.gmss.GMSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2dc8cd1c1fa7979cada7be8f8320f93342af2ff1963c7c499a3420b2b9545bfa
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: f7215d57c1b7ab9ebb89e97057c855388325de39bfe02465ce28ffbfba293a90
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r2, $r3, $r4, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,java.math.BigInteger)>
		SHA-256: b36d50207c12d926e435b859cb9848007d52f50b2e62c847e597de1f84f657c6
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECGOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: caabe0390e3d2386e10c04d6d72b0b44e335e1623efc6992e7ef060aaafe4388
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.x509.ExtendedPKIXParameters
		Statement: specialinvoke r0.<java.security.cert.PKIXParameters: void <init>(java.util.Set)>($r1)
		Method: <org.spongycastle.x509.ExtendedPKIXParameters: void <init>(java.util.Set)>
		SHA-256: bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: 76298657dcc0e1faa3122d33d3548dc8a01229fee4a5d57d841d58534d31027d
		Secure: true
	Object:
		Variable: i5
		Type: int
		Statement: i5 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomUpperTriangularMatrix(int,java.security.SecureRandom)>
		SHA-256: 9fd11a1d15c4f792656aaec35deb90dd2b70bc90932eb566c24bb2578a59c137
		Secure: true
	Object:
		Variable: $r16
		Type: java.security.PublicKey
		Statement: $r16 = virtualinvoke $r7.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: d68808691c887dcde9f9a8e73ba42f8d8caf9537a9ce407c84dc81007e4a255c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.ElGamalEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: cc0b332bb2ddc847ca308294e1c87841df1bdcc2359c6b4559abe498d8131c20
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: $r17
		Type: java.security.PrivateKey
		Statement: $r17 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 5e378eed2682a05fa231672ce69ef4dff1150a1dfd5dab60e5afb2058db38314
		Secure: false
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r7, $r8, $r4, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>
		SHA-256: 9467b0dba295e5c529ef6991ca8d806071fc6e3901c07820fb802370f9b64f82
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] generateSignature()>
		SHA-256: 238987cd7f028d63bd73983130023a3acb01386bcb069569f35d3e43491735c1
		Secure: true
	Object:
		Variable: $i4
		Type: int
		Statement: $i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(int,int,java.security.SecureRandom)>
		SHA-256: a4f3e33dc159e4190dcf71481ad704fbaa0a529d36f521c21d33c7c9a2e5e886
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c47b6631ce3720d818beeb3ff632397f4377b2c7bad13224726fa6668bbc6f5
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void initializeDefault()>
		SHA-256: e372c8d5f3c022f0420723fb49c590e613e0421c79523205a6835ab17f0f1c15
		Secure: true
	Object:
		Variable: i4
		Type: int
		Statement: i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomLowerTriangularMatrix(int,java.security.SecureRandom)>
		SHA-256: e135bb881582a848a1622eed71e426951f5b1cde4ee67d41f03bcbfa3b836d24
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 4e7584f189eeda4c62a7124841ff3461841113c8a345216cfc5c2008c926ea52
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 75eb0cf148367f1ee1d5e20abbce2e3daa8e1c823696bec394a05f21805266a3
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 4bd6151add7d31cc4c6c1b467a5fcba26d1274b4e5b8f364b9492ad636053fa7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1255)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: be6881c5b906e266ef836fc03c2b6166eb80a4112b7aa9ec240755ce291d7a0d
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: b0d1ba3da8064ca082b6ab923adae7a1f903b06296e62e14fc3b962758995d3f
		Secure: true
	Object:
		Variable: $i3
		Type: int
		Statement: $i3 = virtualinvoke $r5.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>
		SHA-256: acc48556d482f8fa815d958f1dbc228fad1134f560109aebc24a8c079260f746
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c47b6631ce3720d818beeb3ff632397f4377b2c7bad13224726fa6668bbc6f5
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>
		SHA-256: 51314679791b8846974991512c36196e1aa3b9e7da7427a9a3e79296a3ab25ab
		Secure: true
	Object:
		Variable: $r6
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4)
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: 11c83c24e5c5d6a4315f3b8eadbbb454fe5309d1b96bad6653eae772f7847cd1
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r2, $r5, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>
		SHA-256: 8afc5c7eb96b36d8829bf9167e10c334a2090367af9364094726e410dd8ac903
		Secure: true
	Object:
		Variable: i4
		Type: int
		Statement: i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomUpperTriangularMatrix(int,java.security.SecureRandom)>
		SHA-256: ddf77d9872c37ce00b22f9f8e253de7c710c975f26fab6c5e43fa646485e3618
		Secure: true
	Object:
		Variable: $i3
		Type: int
		Statement: $i3 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL1()>
		SHA-256: f0a650e31445b7c7b045832e5f603dad80fa1126706ae314b545e65347883ace
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r7
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r7)
		Method: <org.spongycastle.cert.crmf.jcajce.JcePKMACValuesCalculator: byte[] calculateMac(byte[],byte[])>
		SHA-256: 5781ff292fd6506c75e55bf707ea91a5cad6b68929a90ac8d1d87431f1c3077a
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlockOrRandom(byte[],int,int)>
		SHA-256: 9eea8fddf3b73e0efb96992710399017bdba4f031196eb2ff8f0c083e6630405
		Secure: true
	Object:
		Variable: $r22
		Type: java.security.KeyStore
		Statement: $r22 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer640)
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 6982424971f967457a73366c03a2d22a36288148c3d687f539c722106e862f5e
		Secure: false
	Object:
		Variable: r1
		Type: java.security.SecureRandom
		Statement: specialinvoke r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECDSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: 907e1f5c07beb4945875e3d9df0753f4b7e3c9cbc7e6d6fca061334ed85525ba
		Secure: true
	Object:
		Variable: $r25
		Type: java.security.SecureRandom
		Statement: specialinvoke $r25.<java.security.SecureRandom: void <init>()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 35c5a7a985b7e68669f6e349099a814d36c9eff84d57af69c496bd833c40355f
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 447306ffd1f9c477d4e0234ba8415fc2dcc63689de4572fb5a672197e634a45c
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 5f9963ee752bd7d8a86fa545ed47ab3b123575f47702c801046b8d04c3d29245
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1258)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 9b8b8349648ac9cd24f4449cbd65e807c2e88003bbcaeff280de9d6b08bbe893
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: c5c5cb9bec6c89f6dc02736158ef1a0d54025fad80cfb6f3cb224c7ec7320f20
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.KeyPairGenerator
		Statement: $r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer632)
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: 81e30c12c7245d0b6f374a50a205df798c056795f8d60a2245467eaa5585151e
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1259)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: d32322c29729ab4e3c3f604f367577006e52bd8a46abef6f38c51a63e6c9129e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.GOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 61b7887e2cfe6269c9dc5ed1565a2d9c81d2ae6237d2a5bf20c73d26a54cd85c
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: $r7 = virtualinvoke $r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask: java.lang.Void doInBackground(java.lang.Void[])>
		SHA-256: e3ecb3dfcb33188218bd24d5db138f69d068f62be29704913b0965d6be1c33c
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.spongycastle.crypto.signers.PSSSigner: byte[] generateSignature()>
		SHA-256: f3e4142caf438aae9f817eff05fbbb236338bba1fda8c989276570ed44dc6b62
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r3, $r6, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey: void <init>(org.spongycastle.crypto.params.DHPrivateKeyParameters)>
		SHA-256: 2a4b346577c9be66b1ecc846096673fb16cf25cfe658c92b9a2f9f8f9ed3a857
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r7
		Type: javax.net.ssl.TrustManager[]
		Statement: $r7 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <net.screenfreeze.deskcon.Connection: javax.net.ssl.SSLContext initSSLContext(android.content.Context)>
		SHA-256: ad1ccc466eab24ed209439e1e50f73212ea7f4ea7bb3a88bdf810588276c71fa
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1265)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: bb6868107f8b070a8352bc5dd3c6013cf9360a132f675d0836a0377cd0c7ee93
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 2f96be90287037dd5aa521a81412c6567fe97ad3bdc0a3e0dd37cb2855cfb876
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r6.<java.security.Signature: byte[] sign()>()
		Method: <org.spongycastle.x509.X509Util: byte[] calculateSignature(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.spongycastle.asn1.ASN1Encodable)>
		SHA-256: 17cd1be63845a3cd6bb958b50b1aa0980a14e6b019fa044ec65b126a9ad00fb9
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initializeDefault()>
		SHA-256: d5445d664decee291ee585f94dd38d9d5a5b6785ec803c749ff1f9479b869078
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: 258c32216fb6f90870819dad97cae5f5a7cd076204aa208110347ba1c64c7aac
		Secure: true

Findings in Java Class: net.screenfreeze.deskcon.Connection

	 in Method: javax.net.ssl.SSLContext initSSLContext(android.content.Context)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r9, $r7, $r11)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r9, $r7, $r11)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #5e9d9c35fac49e996891d8cec3654bbeb92ba3c7209fb114a24801a0cda6c9ed)
			First parameter (with value "TLSv1") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer451)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #aa54dfc61a2376a694c1830efa7147c641e2122753cd4cfc051ac291fc3c0abd)
			First parameter (with value "BKS") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer449)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r3, $r5)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #aa54dfc61a2376a694c1830efa7147c641e2122753cd4cfc051ac291fc3c0abd)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, $r5)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #aa54dfc61a2376a694c1830efa7147c641e2122753cd4cfc051ac291fc3c0abd)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, $r5)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #5156e7444b7a9d02cb88a09512863dc85b1be987304d0e0bbb0305cdf8355262)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r3, $r5)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #5156e7444b7a9d02cb88a09512863dc85b1be987304d0e0bbb0305cdf8355262)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r3, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r3)


Findings in Java Class: net.screenfreeze.deskcon.MainActivity$KeypairgenerationTask

	 in Method: java.lang.Void doInBackground(java.lang.Void[])
		TypestateError violating CrySL rule for java.security.KeyStore (on Object #6982424971f967457a73366c03a2d22a36288148c3d687f539c722106e862f5e)
			Unexpected call to method store on object of type java.security.KeyStore. Expect a call to one of the following methods getKey,getEntry,setEntry
			at statement: virtualinvoke $r22.<java.security.KeyStore: void store(java.io.OutputStream,char[])>($r24, $r23)

		TypestateError violating CrySL rule for java.security.KeyPairGenerator (on Object #81e30c12c7245d0b6f374a50a205df798c056795f8d60a2245467eaa5585151e)
			Unexpected call to method generateKeyPair on object of type java.security.KeyPairGenerator. Expect a call to one of the following methods initialize
			at statement: $r7 = virtualinvoke $r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #6982424971f967457a73366c03a2d22a36288148c3d687f539c722106e862f5e)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r22.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r21, $r23)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #6982424971f967457a73366c03a2d22a36288148c3d687f539c722106e862f5e)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r22.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r21, $r23)

		IncompleteOperationError violating CrySL rule for java.security.KeyPairGenerator (on Object #81e30c12c7245d0b6f374a50a205df798c056795f8d60a2245467eaa5585151e)
			Operation on object of type java.security.KeyPairGenerator object not completed. Expected call to genKeyPair, java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair(), initialize, java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()
			at statement: $r7 = virtualinvoke $r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #6982424971f967457a73366c03a2d22a36288148c3d687f539c722106e862f5e)
			First parameter (with value "BKS") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r22 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer640)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #bb6868107f8b070a8352bc5dd3c6013cf9360a132f675d0836a0377cd0c7ee93)
			First parameter (with value "P-521") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1265)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #f9d6c4aa9c16a33260f86203ea182fdc65a31f1294691fb4f860fee605be3ce8)
			First parameter (with value "P-224") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1260)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #d32322c29729ab4e3c3f604f367577006e52bd8a46abef6f38c51a63e6c9129e)
			First parameter (with value "prime192v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1259)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #9b8b8349648ac9cd24f4449cbd65e807c2e88003bbcaeff280de9d6b08bbe893)
			First parameter (with value "prime239v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1258)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #f8ed7247608cc179f601f78cf6acb87ae6a18497dac0b8abeddd06533e280863)
			First parameter (with value "P-384") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1256)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #be6881c5b906e266ef836fc03c2b6166eb80a4112b7aa9ec240755ce291d7a0d)
			First parameter (with value "prime256v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer1255)


	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)


Findings in Java Class: org.spongycastle.x509.X509Util

	 in Method: java.security.Signature getSignatureInstance(java.lang.String)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #a1e8f96a5f538937539be4b536267e8cf9449d60376c983782c1f9e62c1b62a6)
			First parameter (with value "SHA256WithRSAEncryption") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r1 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r0)


	 in Method: byte[] calculateSignature(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.spongycastle.asn1.ASN1Encodable)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r6.<java.security.Signature: void initSign(java.security.PrivateKey)>($r2)


Findings in Java Class: org.spongycastle.pqc.crypto.ntru.NTRUEngine

	 in Method: byte[] decrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r5 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[])>(r3, $r1)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(varReplacer11353)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(varReplacer11346)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(varReplacer11351)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r6 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r10, $r5, $r6)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $r14 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary3Sves()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: r13 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean)>($r1, i0, $i6, $z0)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $z0 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r10)

		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $z0 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r10)


	 in Method: byte[] encrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters)
		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $r1 = virtualinvoke $r16.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i3)


Findings in Java Class: android.support.v4.content.ModernAsyncTask$4

	 in Method: void <clinit>()
		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $r0 = staticinvoke <android.support.v4.content.ModernAsyncTask$Status: android.support.v4.content.ModernAsyncTask$Status[] values()>()


Findings in Java Class: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial

	 in Method: void checkTernarity()
		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>


Findings in Java Class: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial

	 in Method: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>


Findings in Java Class: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial

	 in Method: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
		IncompleteOperationError violating CrySL rule for java.security.cert.PKIXParameters (on Object #bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6)
			Operation on object of type org.spongycastle.x509.ExtendedPKIXParameters object not completed. Expected call to init
			at statement: r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>


Findings in Java Class: org.spongycastle.crypto.encodings.PKCS1Encoding

	 in Method: byte[] decodeBlockOrRandom(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()


	 in Method: byte[] encodeBlock(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()

		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextInt on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: $i3 = virtualinvoke $r5.<java.security.SecureRandom: int nextInt()>()


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.signers.GenericSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.encodings.OAEPEncoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: r2 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, varReplacer11320, $i0, $i1)


Findings in Java Class: org.spongycastle.crypto.tls.TlsRSAUtils

	 in Method: byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r10 = virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>(r5, varReplacer12888, $i0)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r10 = virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>(r5, varReplacer12888, $i0)


	 in Method: byte[] safeDecryptPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,byte[])
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r2 = virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r2, varReplacer13184, i0)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r2 = virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r2, varReplacer13184, i0)


Findings in Java Class: org.spongycastle.crypto.signers.PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2Signer

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r2)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r2)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r3)


Findings in Java Class: org.spongycastle.crypto.encodings.ISO9796d1Encoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.RSADigestSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.engines.ElGamalEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.ElGamalEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.engines.NaccacheSternEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


	 in Method: void initialize(java.security.spec.AlgorithmParameterSpec)
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as preparedRSA
			at statement: specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec)>($r1)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


Findings in Java Class: org.spongycastle.cert.crmf.jcajce.JcePKMACValuesCalculator

	 in Method: byte[] calculateMac(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r7)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 116

	CryptoAnalysis found the following violations. For details see description above.
	ConstraintError: 10
	HardCodedError: 3
	TypestateError: 5
	NeverTypeOfError: 3
	RequiredPredicateError: 29
	IncompleteOperationError: 45
=====================================================================
