0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.packets.PacketKexInit: void <init>(com.trilead.ssh2.crypto.CryptoWishList)>
		SHA-256: 9e58dce4f62a5a1b3230e1508ce00522d05faab79377f62bdc06bbc42cf61204
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 28684ec1d3d65871b2bc49ea187b32edba84724a1bc06c3be0cdce4dd6bf5e59
		Secure: true
	Object:
		Variable: $r72
		Type: java.security.KeyPair
		Statement: specialinvoke $r72.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r71, $r70)
		Method: <com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)>
		SHA-256: 55f946bff373ab5e16859f0beecb0aa178be97ec579b155f8aebcbf186ff0006
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Key
		Statement: $r4 = virtualinvoke $r0.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(varReplacer3702, varReplacer3703)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 741909032d71d051f05553e887566bda566d46cba210622515e706b1aad7312c
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.KeyFactory
		Statement: $r13 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9857)
		Method: <com.gaurav.avnc.viewmodel.HostKeyVerifier: boolean verifyServerHostKey(java.lang.String,int,java.lang.String,byte[])>
		SHA-256: 9a72385822ee45b31b45b3da2d7fb91a61ee5f9782ac9a422014d5d5e941d180
		Secure: false
	Object:
		Variable: $r42
		Type: java.security.PrivateKey
		Statement: $r42 = virtualinvoke $r19.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)>
		SHA-256: 6b2e29a4fbfe4535a17dd98c89a151b6ebe71e85cba50a4aa487fc87df6c5940
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>($r2, $r1)
		Method: <com.google.crypto.tink.subtle.EngineWrapper$TMessageDigest: java.lang.Object getInstance(java.lang.String,java.security.Provider)>
		SHA-256: 3a694b35ea04b2992debcb6b410b793f86e22988149fbcb69135acb0c3d6ba01
		Secure: true
	Object:
		Variable: varReplacer9901
		Type: java.lang.String
		Statement: $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9901)
		Method: <com.trilead.ssh2.transport.KexManager: void <clinit>()>
		SHA-256: 20f6858d531cf48c8276811841df3a712d9606bdb0a6d6e0a519080e98454859
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer11229)
		Method: <com.trilead.ssh2.crypto.cipher.AES$CTR: void <init>()>
		SHA-256: e6fe25be3d2a4328c16217cee9f103cc011d3ab14082b1e68bed7b743a99e9c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: $r7 = virtualinvoke $r6.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 62281d8fd7c792cd76591f5780678694313077893e040e02f7b6ecb0ceb57bd1
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9826)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 396e0e85d1e1f68a5df321a7ea425ddd2ae5608fc915d4b6732a24c15b03fcbf
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.SecureRandom
		Statement: specialinvoke $r14.<java.security.SecureRandom: void <init>()>()
		Method: <com.gaurav.avnc.viewmodel.VncViewModel: void access$connect(com.gaurav.avnc.viewmodel.VncViewModel)>
		SHA-256: 87d6f42fbc849398c760193c484ddc59127b4aeb63a3c96b908ab4c94df1ec0a
		Secure: true
	Object:
		Variable: $r15
		Type: java.security.SecureRandom
		Statement: specialinvoke $r15.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 18262b8a3529bf6f48e0f16754da8cd670038d4a1c1faf4333f8a642782c61c8
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 28684ec1d3d65871b2bc49ea187b32edba84724a1bc06c3be0cdce4dd6bf5e59
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.signature.RSASHA256Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 213d3def89a4f5444fc41033c6bd94774f3b2660e784b9d9ec27b9db8e016362
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 29e1b3ac998d54777e02f3be216a9ae4c49de163a9b242cc435e6447c1fbf051
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, varReplacer16344)
		Method: <com.trilead.ssh2.KnownHosts: boolean hostnameMatches(java.lang.String[],java.lang.String)>
		SHA-256: 18b0ecabafaeb6029059cd1feb5bbd2d757da7b12b83c1136c86c4dd0ac4cbff
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.Mac
		Statement: $r12 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer16346)
		Method: <com.trilead.ssh2.KnownHosts: boolean hostnameMatches(java.lang.String[],java.lang.String)>
		SHA-256: 561eec61c10ebc24b9852128992562d34f53db289cc4562308bc8e1f1d6b1f22
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.SecureRandom
		Statement: specialinvoke $r15.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 18262b8a3529bf6f48e0f16754da8cd670038d4a1c1faf4333f8a642782c61c8
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.KeyFactory
		Statement: $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13495)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: e0327a5357dbda6462173c6e21f1891d14e267c7705a3e34a3cb0ba5d0ae4ba8
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: virtualinvoke $r9.<java.security.MessageDigest: int digest(byte[],int,int)>($r5, varReplacer7227, $i2)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: 3ded11b2f8aa5f1a1e53a344a710e38155c8249fa6eae0a0c5992f3ab29a7c4d
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r10.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: dfe414c08fde107a32f25de7328ce48110986f64c30cdf058c9e6ae3043a26c5
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyFactory
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9821)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void setF(byte[])>
		SHA-256: 12fb6eb60f2233c9db652bf48f69d27e772ecf1215feadad3ea8f8bc4f91641e
		Secure: false
	Object:
		Variable: varReplacer9857
		Type: java.lang.String
		Statement: $r13 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9857)
		Method: <com.gaurav.avnc.viewmodel.HostKeyVerifier: boolean verifyServerHostKey(java.lang.String,int,java.lang.String,byte[])>
		SHA-256: d579ed6a6e352f0e2565fe7ca266d5b063f02a611e4d6e35ecc9d06ce01d2c1e
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.KeyAgreement
		Statement: $r10 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer9816)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void setF(byte[])>
		SHA-256: bc8276d14ede1c8388fe6762462d6d625668bce0c065aac0cfaa0493107d66d7
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9834)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 790d667d08fb4c779fbb705a9bd01bb7cbb74147bf1ca4b76d570e6eddbd5485
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.PublicKey
		Statement: $r15 = virtualinvoke $r13.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r14)
		Method: <com.gaurav.avnc.viewmodel.HostKeyVerifier: boolean verifyServerHostKey(java.lang.String,int,java.lang.String,byte[])>
		SHA-256: ad5c67fb5abfc0db0cabbc7549f81d5d7c4435bb069a707905a25d32a43fa405
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.PublicKey
		Statement: $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)>
		SHA-256: 70c730e84b6d5734dd5bd3c45fc030e7b83c51aa47c49ad32de133db6aa5cdbd
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r6)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 42fa38a6e001e057eb3c37b474d95ee836be7f8917367f236874c6ce853e312c
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA512Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 9af5f8795b9643f8432c5491747b92c4638b7ae663a0e1805cf724614b70f640
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer10130)
		Method: <com.trilead.ssh2.signature.RSASHA256Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 2bb8dc2e057c88012bd8b7d6d0734108e4720c3fb8fb0d8ec2985b5685ddfa27
		Secure: false
	Object:
		Variable: varReplacer9806
		Type: java.lang.String
		Statement: $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9806)
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void setF(byte[])>
		SHA-256: ae96e862ede25e02231fbcc06aa119d2ff86ba694fa7d9315a6c21b72611442e
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r9.<javax.crypto.KeyAgreement: byte[] generateSecret()>()
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void setF(byte[])>
		SHA-256: 9fd9a61383bac9567fb82cb0da4fc8e676ff07e75ede388723e03d4fd7c9e72a
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.PublicKey
		Statement: $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: ffa04e3f5f3593281a907fe7b3377f5aee25dbf0356ec54c29cee326e588ad12
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.crypto.tink.subtle.Ed25519Verify: void verify(byte[],byte[])>
		SHA-256: a67724e47f60d54b8e1f9c059b423731aaa825f72c36250e9a391789237679f9
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.trilead.ssh2.crypto.digest.HashForSSH2Types: void <init>(java.lang.String)>
		SHA-256: 55849ec0527423667a7d19fbe5e21f58def3496fed229ce0438cfef4434a7b0d
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: $r7 = virtualinvoke $r6.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 2735534aab1f0dc1f91fbfafcd8b260590e9acebdc1b9be21ff9d255b867edb8
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 28684ec1d3d65871b2bc49ea187b32edba84724a1bc06c3be0cdce4dd6bf5e59
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $z0 = virtualinvoke $r10.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: c01fa74b3d288408b28483d2b282e609f1d3e8bf833463477efbcffd63e2481
		Secure: false
	Object:
		Variable: $r25
		Type: byte[]
		Statement: $r25 = virtualinvoke $r48.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)>
		SHA-256: 6730e891de20d99afade1be00b7073a39efefe0f0357b925cb2323b9078db816
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.SecureRandom
		Statement: specialinvoke $r15.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 18262b8a3529bf6f48e0f16754da8cd670038d4a1c1faf4333f8a642782c61c8
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.KeyPairGenerator
		Statement: $r6 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer9790)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: dfa8ab05219c2b83256a4ec5c64599fbe25ba44cd3123cdc40d84b6dd0447913
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.MessageDigest: int digest(byte[],int,int)>($r2, varReplacer13554, $i0)
		Method: <com.trilead.ssh2.crypto.digest.HashForSSH2Types: byte[] getDigest()>
		SHA-256: 8cfb30c76a83ead83526d1f3e290076f018d1312cc482071d99aa52b650cc350
		Secure: true
	Object:
		Variable: $r30
		Type: java.security.PrivateKey
		Statement: $r30 = virtualinvoke $r28.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r41)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)>
		SHA-256: e9e559846a48995711c34228792bd309a377daa0dd49de57087713f584e228a9
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13528)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 3c1122d2c19d87777cf4133d5b81778e623bf229348694d6b65186c9a33aa4ec
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.PublicKey
		Statement: $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r8)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: a0c4bdb74252ed6e71abc4fc6bb9571437d05094e2eb43811d14c8227af7c75d
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.crypto.tink.subtle.Ed25519Sign: byte[] sign(byte[])>
		SHA-256: 2411f58495594fc86c46a6dbcd746a3f981c65ea6d8da295329ac2a1283f0a29
		Secure: true
	Object:
		Variable: $r19
		Type: java.security.KeyFactory
		Statement: $r19 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer11027)
		Method: <com.trilead.ssh2.KnownHosts: void <init>(java.io.File)>
		SHA-256: 64da7fc681845a837c2b9910b991c76afa6d2c0dbb8d0d2be6a8a257fc92ef21
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r18.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 234a7bb1bc22c0bb6056e082412151014c7014431f5b6d2386f30ccf825e926f
		Secure: false
	Object:
		Variable: $r40
		Type: java.security.KeyPair
		Statement: specialinvoke $r40.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r29, $r30)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)>
		SHA-256: 993369506663a041f6addc61d6387b67dd47a0ed95c0fe64c6f4407948219c41
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9829)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 18ea7d00c4c003ebcf865bbf14a78bc90f5c658ad5126c376cd9869e2dfba6b7
		Secure: false
	Object:
		Variable: $r1
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 3473ca532d502a23c96fc7ad65fab930812097a5b58c7a2011e191f89e3961b6
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9838)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 45a4bc5203762877c1643b92bd627c7446e0be7c9d9f0ace838c7e352b2d3811
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 28684ec1d3d65871b2bc49ea187b32edba84724a1bc06c3be0cdce4dd6bf5e59
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9835)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: b493ad84a75dd8e5b507b6b0d7d7d8f0ab968583e50f9a5136a86f137f4e182b
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r12.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <com.trilead.ssh2.KnownHosts: boolean hostnameMatches(java.lang.String[],java.lang.String)>
		SHA-256: 4abd85bb7782d30132a0776aa3126d15c5a2b28896176ab1b612cfc83a9c900f
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 8b019343a51f6a81e77147770c9970a003bfdfe405dda31d87d5708d6a9e5cd1
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 3c026ecc2f484b0c11caf7a71a5939632c6b6b10a1da18376f2f4f29d8583e7c
		Secure: false
	Object:
		Variable: $r20
		Type: java.security.PublicKey
		Statement: $r20 = virtualinvoke $r19.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2)
		Method: <com.trilead.ssh2.KnownHosts: void <init>(java.io.File)>
		SHA-256: 912c3ae596147240649295a5bf95833baf858bc30f511b02374be306f2527c5d
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13541)
		Method: <com.trilead.ssh2.signature.RSASHA512Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: e3b9c6e7d9a51d0fc0957ede74d73b154fcc65b12fb344b3e62d37b8fb4f163
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r3)
		Method: <com.trilead.ssh2.packets.PacketKexInit: void <init>(com.trilead.ssh2.crypto.CryptoWishList)>
		SHA-256: e8be50eb412518a74dd3c07ceea6c8d0714d8487adb96607fb762580e0d95953
		Secure: true
	Object:
		Variable: $r48
		Type: java.security.Signature
		Statement: $r48 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer7134)
		Method: <com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)>
		SHA-256: 4f8c44ee1c60efdae4e1efb50491862532289b4a794c4368cd9ae451b05ea677
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.PublicKey
		Statement: $r9 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void setF(byte[])>
		SHA-256: 89e143a477c67fedc70434764706722a1c4e0e7350521b514e2cc586e0a70c7
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r5, $r3, varReplacer6193)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify$ECDSASHA2NISTP256Verify: void <clinit>()>
		SHA-256: b339b4dd8b2dc33c5f307456bfa7100aa6c3469bb03929d294a71dec42757435
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.KeyAgreement
		Statement: $r9 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer9809)
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void setF(byte[])>
		SHA-256: e76aa9e1c51117f23d9fff441026c17b6df66008f1647e35a64aea981324c962
		Secure: false
	Object:
		Variable: varReplacer16344
		Type: java.lang.String
		Statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, varReplacer16344)
		Method: <com.trilead.ssh2.KnownHosts: boolean hostnameMatches(java.lang.String[],java.lang.String)>
		SHA-256: cb43a596afd53c8f6ca9ff45f1596815948f81e09f7e87ccf274a299548066b2
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13509)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: a2eabe72d45f1072e8fbede8506566dfc8197e43a6f1d7cc57f0182847038761
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9839)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: 32359eba928493b7fcd8b1aae3a5614734361dc2d69855fe74d2fcb158861ea4
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 28684ec1d3d65871b2bc49ea187b32edba84724a1bc06c3be0cdce4dd6bf5e59
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.KeyFactory
		Statement: $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13485)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: bb3713420b99f42f7ec946b97b339c55e3735752ca3561bea15451b6f2f71c41
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r5, $r3, varReplacer7284)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify$ECDSASHA2NISTP384Verify: void <clinit>()>
		SHA-256: e80bd9d6d18b0714f4987e65a81aff16c38eecfcec8b732016147b8b0f97b433
		Secure: true
	Object:
		Variable: varReplacer11027
		Type: java.lang.String
		Statement: $r19 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer11027)
		Method: <com.trilead.ssh2.KnownHosts: void <init>(java.io.File)>
		SHA-256: 56e80fd405423f29c0875ea9d9d75cce38035ba93b27efb4aada36c9f932a27f
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7239)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: 458257d913fecf4ecaf0917f07b3f17fac46c2e8ba57e098bc6671a2cc1647e7
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.trilead.ssh2.signature.RSASHA512Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: b3482e4a04bf3f067d72c78460690e4a9667e9df3cc14a29120e48abcbed9a21
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer10089)
		Method: <com.trilead.ssh2.crypto.cipher.AES: void init(boolean,byte[],byte[])>
		SHA-256: b48b87ed6ce093115370ead9917f31e529d20bea429239ac5dacbe76c9500348
		Secure: false
	Object:
		Variable: varReplacer13495
		Type: java.lang.String
		Statement: $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13495)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: c60c234f60a851df4b0030530cde118903328f51ca5af7109fe9e97676606292
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyFactory
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r0)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)>
		SHA-256: 832bd6aeeacc1e9a2ba683ece4aa3b936d0761b77d5b2411aed7b1625db6785c
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.PublicKey
		Statement: $r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r6)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: fc7d8df76d06fdb3b5ea1c759f929d1f6b13e6229d372dea01d4d75e84afcfa9
		Secure: false
	Object:
		Variable: varReplacer9821
		Type: java.lang.String
		Statement: $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9821)
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void setF(byte[])>
		SHA-256: ca76bf4e4f3647f7fc93dc9276c95d3916ee5ffb2ce8927230c2c3d9f4ccf09f
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r11 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest(byte[])>($r11)
		Method: <com.gaurav.avnc.ui.vnc.HostKeyFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
		SHA-256: ee8ba2709c645d6936550c45bae6d036521d11db1e719879bd44f63c8d71ffe2
		Secure: true
	Object:
		Variable: $r28
		Type: java.security.KeyFactory
		Statement: $r28 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r9)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)>
		SHA-256: 9eb301eb962a946cee004d11b2fa65e37121ae4be0592814f00e8aa0a4847e8
		Secure: false
	Object:
		Variable: $r15
		Type: byte[]
		Statement: virtualinvoke $r9.<java.security.MessageDigest: int digest(byte[],int,int)>($r15, varReplacer7234, varReplacer7235)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: 37331b16d0521bbc91fdbff15da67bf6b6935b8be2ddaddff3f1a35381c3a018
		Secure: true
	Object:
		Variable: $r18
		Type: java.security.Signature
		Statement: $r18 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer6178)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 7f12e36155d98beb8c3ebf9945c137e7bd15d418e73270dfaa7cd9d3e2fba26b
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.MessageDigest
		Statement: $r10 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16600)
		Method: <com.gaurav.avnc.ui.vnc.HostKeyFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
		SHA-256: cd42b83aa90b345bf086ffb9486b46ef1e0789d875a6beccb9fe57b998fdc217
		Secure: true
	Object:
		Variable: varReplacer13485
		Type: java.lang.String
		Statement: $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13485)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: ca0aca158fe53d23f7e5bba46d31e95388df2764aa092af423d200ef03a5db53
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA512Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 1f0a2f72708aa39badb0a994ce5c5a0f61e5c00057cd0519f076c6eef75e883c
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA256Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: ec10faa4aa670dde118d9e7325c09333420b90f08b518c0f24858d4d995823e6
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r5, $r3, varReplacer7274)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify$ECDSASHA2NISTP521Verify: void <clinit>()>
		SHA-256: 103a761f4750075d2c8c9d290a423dcee7b67d7d691b2ff822ca64f5ac2b4ffe
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.Signature
		Statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 1c58361cbdda1fa96852866e2466e9f7b1bff1b85a8fc2cb03341de716ec8d39
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer11230)
		Method: <com.trilead.ssh2.crypto.cipher.AES$CBC: void <init>()>
		SHA-256: 6fdf51b5afee23b470d58580e9081e1753fe7da35c8f25aa5fd1b62be7dfc455
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest(byte[])>($r1)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: 12e313b554af4387bb06b1fdf49abf6782b90ffc2f7c17a874950db55028b22d
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.KeyFactory
		Statement: $r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9901)
		Method: <com.trilead.ssh2.transport.KexManager: void <clinit>()>
		SHA-256: 6c37a71189e7d7093de0d2ff1a88dadb633e14eec03921b64b2ef73e2334956d
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.KeyFactory
		Statement: $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer9806)
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void setF(byte[])>
		SHA-256: f4964b0d1cdfe36042e362b115d3646dea7a041863852d6c8046200a137a7574
		Secure: false
	Object:
		Variable: $r0
		Type: java.lang.String
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r0)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)>
		SHA-256: 71f5fa96b7e35e925f8058f9114c56a6487a8db85db66dd7775dfd3a1f393002
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.google.crypto.tink.subtle.EngineWrapper$TMessageDigest: java.lang.Object getInstance(java.lang.String,java.security.Provider)>
		SHA-256: 4ee1e49996a5c971f7aeb5a26e801c7b076c9b0e65f51e70fc752cb4886a7701
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyPairGenerator
		Statement: $r7 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer9781)
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void init(java.lang.String)>
		SHA-256: 627705c800bedfbebb44091dbbc8c9748e978bc2034922cb1d22c48a202c3c97
		Secure: false
	Object:
		Variable: varReplacer10089
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer10089)
		Method: <com.trilead.ssh2.crypto.cipher.AES: void init(boolean,byte[],byte[])>
		SHA-256: e37e24f9a9b64fefac054b51ecb668d440ed10d04b4817c9c80303c87e9eb75b
		Secure: false
	Object:
		Variable: $r43
		Type: java.security.PublicKey
		Statement: $r43 = virtualinvoke $r19.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)>
		SHA-256: 69b5cd48660c4d5218d3dcef4c87f5835aace7836ca02bf67405bdf9c66bd9fc
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer10129)
		Method: <com.trilead.ssh2.signature.RSASHA512Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 9483e56997acf9b27ae5767e96b206c6e364d33d7404818da47e96626bf5d606
		Secure: false
	Object:
		Variable: $r29
		Type: java.security.PublicKey
		Statement: $r29 = virtualinvoke $r28.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r41)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)>
		SHA-256: d867ba5cafcefed80b7328caa6e79bea33e86c34e2ce94c8e93ec842021824c
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3699)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: fc6d71a9297f31df181486979d600a3311193326ee3bdea2d69b6ed21c8e8d56
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.KeyStore
		Statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer3698)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: a206a1a213a8159e7245fa745c5b57af975ae7171d7ec884f30213a5f1985d05
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.PublicKey
		Statement: $r10 = virtualinvoke $r7.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: 18d2bf8eb9637edfa42118b199d6527018abb5cfc93312b70c336209cb94ac6
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.PrivateKey
		Statement: $r5 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r1)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)>
		SHA-256: 543f36c33d5e7f838d7f14643f9ec034ccc77845a18304d923bd735204c094d
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 810b16cf8593665320c53bfae8fc6cd7ac1d8fbd1922151309d727d2b116498a
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA256Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 7431fbd58c39f36777ce2f20759a9f378bfec1a77798592091094d45456f2231
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.Signature
		Statement: $r10 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r5)
		Method: <com.trilead.ssh2.signature.ECDSASHA2Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 3fc376eb4810aff2a707a22af8a70b14093d48dee3fef53799a6968e21fed85a
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7232)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: e1e13e6ddb47c29e3846d1e4456a233e0df570dc46722c9a35422b2292bb6a44
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.PrivateKey
		Statement: $r8 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void init(java.lang.String)>
		SHA-256: b282854c249efdc6fc33d7efe2749f7d0b5ea9ecb1f495e65b0411ba5fcbc17a
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.crypto.tink.subtle.Ed25519Sign: void <init>(byte[])>
		SHA-256: c682b995af71f7a66353b850579f182321bf32e2cb095c878d59a4ada6c8f1ae
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: $r8 = virtualinvoke $r7.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void init(java.lang.String)>
		SHA-256: 6a6149f31e568cba23fe8fc7c170c55230f212ab501052a0f058163f8c316eaa
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r10.<javax.crypto.KeyAgreement: byte[] generateSecret()>()
		Method: <com.trilead.ssh2.crypto.dh.DhExchange: void setF(byte[])>
		SHA-256: 9b3cd07f38db34d02521105833873080620cf01dc9f5d2690e02619d8400df46
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9828)
		Method: <com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>
		SHA-256: a1b1cd103fc467f39d3ce7571fdbaf16e095be6d0bc985105847c71e5392aaf7
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.SecureRandom
		Statement: specialinvoke $r15.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void processSignRequest(com.trilead.ssh2.packets.TypesReader)>
		SHA-256: 18262b8a3529bf6f48e0f16754da8cd670038d4a1c1faf4333f8a642782c61c8
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 79dc807972f2e63cc130fb24900246df11c1f5b30cde567078f6420b5f59928e
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r6)
		Method: <com.trilead.ssh2.signature.DSASHA1Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: 7c277b640a078ac7d7f5d351bdb6398c3d22a9d45df13bbb7917a804808cce51
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.trilead.ssh2.crypto.cipher.AES: void init(boolean,byte[],byte[])>
		SHA-256: 1f4cd558ae763b67e3d5614c4994a6a2a148744cf9618948828448f79ffb122f
		Secure: false
	Object:
		Variable: $r9
		Type: java.lang.String
		Statement: $r28 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r9)
		Method: <com.trilead.ssh2.channel.AuthAgentForwardThread: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)>
		SHA-256: 6f09784dddb5b944ef9d70a6ccde760beeea232bbf59296948e46ab25ffa7dbe
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.PublicKey
		Statement: $r8 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <com.trilead.ssh2.crypto.dh.EcDhExchange: void setF(byte[])>
		SHA-256: 3afcf1174a141a0bb4a43604b340a9b364d64775077085d991c7c5da548dbdc6
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.KeyFactory
		Statement: $r7 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13473)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: eca5e27acc6c1eed427a55a366d1985a814f70c2e25face79e86678a0fe3657a
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.crypto.tink.subtle.Ed25519Sign: byte[] sign(byte[])>
		SHA-256: a1294ae6019cb93ce50f1601420baa08240a85c61671fbd16c6ab3a0834e7ebc
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer3709, varReplacer3710)
		Method: <androidx.biometric.CryptoObjectUtils: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()>
		SHA-256: 2657db598f94a356bc5b562769ab4f29b36b5bdfba23cf9bbf9e6c47c1d591a1
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer10131)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)>
		SHA-256: 5bc763e2ad1807e993579ce44dcd89e52f48d5db7677098cf95d5500fa52018d
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.trilead.ssh2.Connection: java.security.SecureRandom getOrCreateSecureRND()>
		SHA-256: a3bd533d934aba599d3678a1b8c115af963b773042e1d3657aa52d68270538da
		Secure: true
	Object:
		Variable: varReplacer13473
		Type: java.lang.String
		Statement: $r7 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer13473)
		Method: <com.trilead.ssh2.signature.RSASHA1Verify: java.security.PublicKey decodePublicKey(byte[])>
		SHA-256: b3c9b65d4906baf481cfbed0e850d81f3621ff28c45c5cbe87cc139636b4274f
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.KeyPair
		Statement: specialinvoke $r6.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r4, $r5)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)>
		SHA-256: 2909f419d39d48af9c52ac7084b5d4cca641b75998e63be6d470c5041e183648
		Secure: false
	Object:
		Variable: $r15
		Type: byte[]
		Statement: virtualinvoke $r9.<java.security.MessageDigest: int digest(byte[],int,int)>($r15, varReplacer7221, varReplacer7222)
		Method: <com.trilead.ssh2.crypto.PEMDecoder: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)>
		SHA-256: bbb421fc4bee8f1f7257acf798964c6a24ebd09b9dff4010b8fe0b32f4634d14
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.Signature
		Statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13543)
		Method: <com.trilead.ssh2.signature.RSASHA256Verify: boolean verifySignature(byte[],byte[],java.security.PublicKey)>
		SHA-256: d3b37c38d003adb4267fc69b1d6c53803a18a6dad5b2bfc497d81bd95d31ce7f
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16348)
		Method: <com.trilead.ssh2.KnownHosts: boolean hostnameMatches(java.lang.String[],java.lang.String)>
		SHA-256: 2989a7d9e05ecba926a26e2ca3e82621e8d95b026d283ac7841eac2c96fe0a68
		Secure: false

Findings in Java Class: androidx.biometric.CryptoObjectUtils

	 in Method: androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #a206a1a213a8159e7245fa745c5b57af975ae7171d7ec884f30213a5f1985d05)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer3698)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3700, $r5)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #fc6d71a9297f31df181486979d600a3311193326ee3bdea2d69b6ed21c8e8d56)
			First parameter (with value "AES/CBC/PKCS7Padding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3699)


Findings in Java Class: com.trilead.ssh2.channel.AuthAgentForwardThread

	 in Method: void processSignRequest(com.trilead.ssh2.packets.TypesReader)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r18.<java.security.Signature: void initSign(java.security.PrivateKey)>($r12)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #7f12e36155d98beb8c3ebf9945c137e7bd15d418e73270dfaa7cd9d3e2fba26b)
			First parameter (with value "SHA1withDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r18 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer6178)


	 in Method: void addIdentity(com.trilead.ssh2.packets.TypesReader,boolean)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r29 = virtualinvoke $r28.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r41)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r40.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r29, $r30)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r40.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r29, $r30)


Findings in Java Class: com.trilead.ssh2.auth.AuthenticationManager

	 in Method: boolean authenticatePublicKey(java.lang.String,char[],java.lang.String,java.security.SecureRandom)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #4f8c44ee1c60efdae4e1efb50491862532289b4a794c4368cd9ae451b05ea677)
			First parameter (with value "SHA1withDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r48 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer7134)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r72.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r71, $r70)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r48.<java.security.Signature: void initSign(java.security.PrivateKey)>($r42)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r72.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r71, $r70)


Findings in Java Class: com.trilead.ssh2.crypto.PEMDecoder

	 in Method: byte[] decryptData(byte[],byte[],byte[],int,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #e1e13e6ddb47c29e3846d1e4456a233e0df570dc46722c9a35422b2292bb6a44)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7232)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6fdf51b5afee23b470d58580e9081e1753fe7da35c8f25aa5fd1b62be7dfc455)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r27.<com.trilead.ssh2.crypto.cipher.AES$CBC: void <init>()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6fdf51b5afee23b470d58580e9081e1753fe7da35c8f25aa5fd1b62be7dfc455)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r27.<com.trilead.ssh2.crypto.cipher.AES$CBC: void <init>()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6fdf51b5afee23b470d58580e9081e1753fe7da35c8f25aa5fd1b62be7dfc455)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r27.<com.trilead.ssh2.crypto.cipher.AES$CBC: void <init>()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e6fe25be3d2a4328c16217cee9f103cc011d3ab14082b1e68bed7b743a99e9c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r26.<com.trilead.ssh2.crypto.cipher.AES$CTR: void <init>()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e6fe25be3d2a4328c16217cee9f103cc011d3ab14082b1e68bed7b743a99e9c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r26.<com.trilead.ssh2.crypto.cipher.AES$CTR: void <init>()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e6fe25be3d2a4328c16217cee9f103cc011d3ab14082b1e68bed7b743a99e9c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r26.<com.trilead.ssh2.crypto.cipher.AES$CTR: void <init>()>()


	 in Method: java.security.KeyPair generateKeyPair(java.lang.String,java.security.spec.KeySpec,java.security.spec.KeySpec)
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r6.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r4, $r5)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r6.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r4, $r5)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r5 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r1)


Findings in Java Class: com.trilead.ssh2.transport.KexManager

	 in Method: void finishKex()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #32359eba928493b7fcd8b1aae3a5614734361dc2d69855fe74d2fcb158861ea4)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #396e0e85d1e1f68a5df321a7ea425ddd2ae5608fc915d4b6732a24c15b03fcbf)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #18ea7d00c4c003ebcf865bbf14a78bc90f5c658ad5126c376cd9869e2dfba6b7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #45a4bc5203762877c1643b92bd627c7446e0be7c9d9f0ace838c7e352b2d3811)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #790d667d08fb4c779fbb705a9bd01bb7cbb74147bf1ca4b76d570e6eddbd5485)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #a1b1cd103fc467f39d3ce7571fdbaf16e095be6d0bc985105847c71e5392aaf7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #b493ad84a75dd8e5b507b6b0d7d7d8f0ab968583e50f9a5136a86f137f4e182b)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r23.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r5, $r2)


	 in Method: void handleMessage(byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #32359eba928493b7fcd8b1aae3a5614734361dc2d69855fe74d2fcb158861ea4)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #396e0e85d1e1f68a5df321a7ea425ddd2ae5608fc915d4b6732a24c15b03fcbf)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #18ea7d00c4c003ebcf865bbf14a78bc90f5c658ad5126c376cd9869e2dfba6b7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #45a4bc5203762877c1643b92bd627c7446e0be7c9d9f0ace838c7e352b2d3811)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #790d667d08fb4c779fbb705a9bd01bb7cbb74147bf1ca4b76d570e6eddbd5485)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #a1b1cd103fc467f39d3ce7571fdbaf16e095be6d0bc985105847c71e5392aaf7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #b493ad84a75dd8e5b507b6b0d7d7d8f0ab968583e50f9a5136a86f137f4e182b)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: specialinvoke $r49.<com.trilead.ssh2.crypto.digest.HMAC: void <init>(java.lang.String,byte[])>($r7, $r1)


Findings in Java Class: com.trilead.ssh2.crypto.digest.HMAC

	 in Method: void <init>(java.lang.String,byte[])
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #18ea7d00c4c003ebcf865bbf14a78bc90f5c658ad5126c376cd9869e2dfba6b7)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9829)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #396e0e85d1e1f68a5df321a7ea425ddd2ae5608fc915d4b6732a24c15b03fcbf)
			First parameter (with value "HmacMD5") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer9826)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)


Findings in Java Class: com.trilead.ssh2.signature.RSASHA1Verify

	 in Method: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #5bc763e2ad1807e993579ce44dcd89e52f48d5db7677098cf95d5500fa52018d)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer10131)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>($r3, $r1)


	 in Method: boolean verifySignature(byte[],byte[],java.security.PublicKey)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #a2eabe72d45f1072e8fbede8506566dfc8197e43a6f1d7cc57f0182847038761)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13509)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)


	 in Method: java.security.PublicKey decodePublicKey(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r6)


Findings in Java Class: com.trilead.ssh2.crypto.cipher.AES$CBC

	 in Method: void <init>()
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #6fdf51b5afee23b470d58580e9081e1753fe7da35c8f25aa5fd1b62be7dfc455)
			First parameter (with value "AES/CBC/NoPadding") should be any of AES/CBC/{PKCS5Padding, ISO10126Padding}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer11230)


Findings in Java Class: com.trilead.ssh2.signature.DSASHA1Verify

	 in Method: boolean verifySignature(byte[],byte[],java.security.PublicKey)
		ConstraintError violating CrySL rule for java.security.Signature (on Object #3c1122d2c19d87777cf4133d5b81778e623bf229348694d6b65186c9a33aa4ec)
			First parameter (with value "SHA1withDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13528)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r3)


	 in Method: java.security.PublicKey decodePublicKey(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)


Findings in Java Class: com.trilead.ssh2.crypto.dh.GenericDhExchange

	 in Method: byte[] calculateH(byte[],byte[],byte[],byte[],byte[])
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #55849ec0527423667a7d19fbe5e21f58def3496fed229ce0438cfef4434a7b0d)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: specialinvoke $r5.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void <init>(java.lang.String)>($r7)


Findings in Java Class: com.trilead.ssh2.KnownHosts

	 in Method: boolean hostnameMatches(java.lang.String[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r12.<javax.crypto.Mac: void init(java.security.Key)>($r13)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #2989a7d9e05ecba926a26e2ca3e82621e8d95b026d283ac7841eac2c96fe0a68)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16348)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, varReplacer16344)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #561eec61c10ebc24b9852128992562d34f53db289cc4562308bc8e1f1d6b1f22)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $i3 = virtualinvoke $r12.<javax.crypto.Mac: int getMacLength()>()

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #561eec61c10ebc24b9852128992562d34f53db289cc4562308bc8e1f1d6b1f22)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r12 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer16346)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #2989a7d9e05ecba926a26e2ca3e82621e8d95b026d283ac7841eac2c96fe0a68)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $i3 = virtualinvoke $r11.<java.security.MessageDigest: int getDigestLength()>()

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #18b0ecabafaeb6029059cd1feb5bbd2d757da7b12b83c1136c86c4dd0ac4cbff)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, varReplacer16344)


	 in Method: void <init>(java.io.File)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r20 = virtualinvoke $r19.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2)


Findings in Java Class: com.trilead.ssh2.crypto.dh.EcDhExchange

	 in Method: void setF(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r9.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r3, varReplacer9807)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r8 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r9.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r10)


	 in Method: void init(java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as preparedEC
			at statement: virtualinvoke $r7.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r4)


Findings in Java Class: com.gaurav.avnc.viewmodel.HostKeyVerifier

	 in Method: boolean verifyServerHostKey(java.lang.String,int,java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r15 = virtualinvoke $r13.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r14)


Findings in Java Class: com.trilead.ssh2.crypto.cipher.AES

	 in Method: void init(boolean,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer10089)


Findings in Java Class: com.trilead.ssh2.signature.ECDSASHA2Verify

	 in Method: java.security.PublicKey decodePublicKey(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r8)


	 in Method: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>($r3, $r1)


	 in Method: boolean verifySignature(byte[],byte[],java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r10.<java.security.Signature: void initVerify(java.security.PublicKey)>($r3)


Findings in Java Class: com.trilead.ssh2.crypto.dh.DhExchange

	 in Method: void setF(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r9 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r10.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r4, varReplacer9815)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r10.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r11)


Findings in Java Class: com.trilead.ssh2.signature.RSASHA256Verify

	 in Method: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>($r3, $r1)


	 in Method: boolean verifySignature(byte[],byte[],java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)


Findings in Java Class: com.trilead.ssh2.signature.RSASHA512Verify

	 in Method: byte[] generateSignature(byte[],java.security.PrivateKey,java.security.SecureRandom)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>($r3, $r1)


	 in Method: boolean verifySignature(byte[],byte[],java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 129

	CryptoAnalysis found the following violations. For details see description above.
	ConstraintError: 14
	RequiredPredicateError: 37
	IncompleteOperationError: 23
=====================================================================
