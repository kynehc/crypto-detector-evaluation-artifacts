0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3)
		Method: <io.github.benoitduffez.cupsprint.ssl.AdditionalKeyStoresTrustManager: void <init>(java.security.KeyStore[])>
		SHA-256: 3131b5341cf751a7ce1e8417b925de9d30b7524a18a38c5731e18650f3d23214
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9067)
		Method: <io.github.benoitduffez.cupsprint.ssl.AdditionalKeyStoresSSLSocketFactory: void <init>(javax.net.ssl.KeyManager,java.security.KeyStore)>
		SHA-256: ea656ecfef65909c4076d141642fe9dc8fb3a0d54ac3ccb7e4ba5d5aca0da983
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3)
		Method: <io.github.benoitduffez.cupsprint.ssl.AdditionalKeyStoresTrustManager: void <init>(java.security.KeyStore[])>
		SHA-256: 3131b5341cf751a7ce1e8417b925de9d30b7524a18a38c5731e18650f3d23214
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <io.github.benoitduffez.cupsprint.HttpConnectionManagement: java.security.KeyStore loadKeyStore(android.content.Context)>
		SHA-256: 6ff802ba9e078d16de6650c7b8618fa7340126e5881c178c38979fea90ab65f2
		Secure: false

Findings in Java Class: io.github.benoitduffez.cupsprint.HttpConnectionManagement

	 in Method: java.security.KeyStore loadKeyStore(android.content.Context)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #6ff802ba9e078d16de6650c7b8618fa7340126e5881c178c38979fea90ab65f2)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r5, $r6)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #6ff802ba9e078d16de6650c7b8618fa7340126e5881c178c38979fea90ab65f2)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r5, $r6)


	 in Method: boolean saveCertificates(android.content.Context,java.security.cert.X509Certificate[])
		TypestateError violating CrySL rule for java.security.KeyStore (on Object #6ff802ba9e078d16de6650c7b8618fa7340126e5881c178c38979fea90ab65f2)
			Unexpected call to method store on object of type java.security.KeyStore. Expect a call to one of the following methods getKey,getEntry,setEntry
			at statement: virtualinvoke $r3.<java.security.KeyStore: void store(java.io.OutputStream,char[])>($r10, $r11)


Findings in Java Class: io.github.benoitduffez.cupsprint.ssl.AdditionalKeyStoresSSLSocketFactory

	 in Method: void <init>(javax.net.ssl.KeyManager,java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, varReplacer9066)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, varReplacer9066)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, varReplacer9066)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ea656ecfef65909c4076d141642fe9dc8fb3a0d54ac3ccb7e4ba5d5aca0da983)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer9067)


Findings in Java Class: io.github.benoitduffez.cupsprint.ssl.AdditionalKeyStoresTrustManager

	 in Method: void <init>(java.security.KeyStore[])
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer10076)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 4

	CryptoAnalysis found the following violations. For details see description above.
	RequiredPredicateError: 4
	HardCodedError: 1
	NeverTypeOfError: 1
	TypestateError: 1
	ConstraintError: 1
=====================================================================
