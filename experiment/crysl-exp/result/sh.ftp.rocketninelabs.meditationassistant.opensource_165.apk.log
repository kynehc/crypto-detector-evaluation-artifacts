0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer19300)
		Method: <org.acra.http.BaseHttpRequest: void configureHttps(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 343dfeaf7cd6eaf4b497575c36d5e04f5aa7e2d1495aaa98f4c1ce236c9c44cc
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <org.acra.security.BaseKeyStoreFactory: java.security.KeyStore create(android.content.Context)>
		SHA-256: 22a183d5116504e02ad96ba67561ecf0f83bf3a7f2bfba4ad5fe01efac8fa773
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: virtualinvoke $r8.<java.security.SecureRandom: void nextBytes(byte[])>($r9)
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: 553fbb273ee13229494fe6e00db436a63a9f11ff11c651b314343c95497229db
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>()
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: 7b0a6f29f07cb5a08becd71560b07036e4c3cfe0c5058dd6a9558670f9977e92
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: virtualinvoke $r8.<java.security.SecureRandom: void nextBytes(byte[])>($r9)
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: 553fbb273ee13229494fe6e00db436a63a9f11ff11c651b314343c95497229db
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.SecureRandom
		Statement: specialinvoke $r8.<java.security.SecureRandom: void <init>()>()
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: ccc71df0e8c054ae2ef532de8fc7f96db9b2da8c65d705fdcd85c1b8770f9131
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2)
		Method: <org.acra.http.BaseHttpRequest: void configureHttps(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 5317ec52cedeb59ce09103096b73de1396b6dab7b7e041f4d3f8653cefd6c32e
		Secure: true
	Object:
		Variable: $r8
		Type: javax.net.ssl.TrustManager[]
		Statement: $r8 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.acra.http.BaseHttpRequest: void configureHttps(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 7fe50f318a54e8590b56be3679c51a498cf5f948a363c0469b49cfabcf7f955c
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3537)
		Method: <net.openid.appauth.browser.BrowserDescriptor: void <init>(android.content.pm.PackageInfo,boolean)>
		SHA-256: 74c4fdc9d17cc5700bdd1c070f15de7663ef1171b5a70073d772b1554dbdcf64
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.cert.CertificateFactory
		Statement: $r9 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>($r4)
		Method: <org.acra.security.BaseKeyStoreFactory: java.security.KeyStore create(android.content.Context)>
		SHA-256: 6354b454ea0efe5008579fe336bf54e0cb7951f0d65e24c27930d87a53ea0e7
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.SecureRandom
		Statement: specialinvoke $r8.<java.security.SecureRandom: void <init>()>()
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: ccc71df0e8c054ae2ef532de8fc7f96db9b2da8c65d705fdcd85c1b8770f9131
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1954)
		Method: <net.openid.appauth.AuthorizationRequest$Builder: void <init>(net.openid.appauth.AuthorizationServiceConfiguration,java.lang.String,java.lang.String,android.net.Uri)>
		SHA-256: c2097ddfa30876bc4bad9cf44ff3ce980690102644e0502d7fed9a9311690e2f
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r8)
		Method: <net.openid.appauth.browser.BrowserDescriptor: void <init>(android.content.pm.PackageInfo,boolean)>
		SHA-256: 4974f37dc42e3e8bf683198998bd9c3bf6aa014e156e27c361dc4bfe406f9beb
		Secure: true

Findings in Java Class: org.acra.http.BaseHttpRequest

	 in Method: void configureHttps(javax.net.ssl.HttpsURLConnection)
		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #22a183d5116504e02ad96ba67561ecf0f83bf3a7f2bfba4ad5fe01efac8fa773)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r6)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer19301, $r8, varReplacer19301)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer19301, $r8, varReplacer19301)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #343dfeaf7cd6eaf4b497575c36d5e04f5aa7e2d1495aaa98f4c1ce236c9c44cc)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer19300)


Findings in Java Class: org.acra.security.BaseKeyStoreFactory

	 in Method: java.security.KeyStore create(android.content.Context)
		IncompleteOperationError violating CrySL rule for java.security.cert.CertificateFactory (on Object #6354b454ea0efe5008579fe336bf54e0cb7951f0d65e24c27930d87a53ea0e7)
			Operation on object of type java.security.cert.CertificateFactory object not completed. Expected call to generateCRL
			at statement: $r10 = virtualinvoke $r9.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 13

	CryptoAnalysis found the following violations. For details see description above.
	RequiredPredicateError: 2
	IncompleteOperationError: 2
	ConstraintError: 1
=====================================================================
