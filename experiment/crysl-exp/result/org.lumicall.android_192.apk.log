0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Alive 16172  5000
Alive 26205  5000
Alive 19213  5000
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesDecrypt(byte[],int,int,byte[],byte[])>
		SHA-256: 589a7ed12f265b1d21a287516cfeb2a4b36f106422c011bba18afd32c8167c54
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.KeyAgreement
		Statement: $r12 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer26847)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: cd50fb1573ce1f9feb75f75e1b4e30bf64e221528792182b5441f00b394f52cd
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.RSABlindedEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a
		Secure: true
	Object:
		Variable: $r6
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r5)
		Method: <org.zoolu.net.TcpSocket: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 8b474e5b9c672ac623d5945075c058d79b004f56004e78926c0a8c97c1b2ac40
		Secure: false
	Object:
		Variable: varReplacer26907
		Type: java.lang.String
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer26907)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesDecrypt(byte[],int,int,byte[],byte[])>
		SHA-256: b5b34c8fb189787574594b2ccc69cfc8bb69bc7ba1c682c2a923bcc03e090d42
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece: java.security.KeyPair generateKeyPair()>
		SHA-256: d8044a47b721dcccc678a9e93e3c578ddb60d678d6128aeee89689f416627ba5
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r12.<javax.crypto.KeyAgreement: byte[] generateSecret()>()
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 7313f535f30c126a84bdc046b7c3a6f2a87a3ddc68f33de83719d446ae22e480
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23255)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 4f19c9306168648e36889164d69bf10884a606e3ede68fbc13ea6c8a4659e68c
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)
		Method: <zorg.platform.j2se.HMACSHA1Impl: void <init>(byte[])>
		SHA-256: af0ec367618997164472339d4f34e79540a7d8c6fb9ac3c28b9b5a9c41c51a4b
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 695a63ac07e9ab285d957b9f0e2b5041d5ed4bd768e98a813d4961082958b68e
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r7.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] calculateHMAC(zorg.platform.j2se.DigestType,byte[],int,int,byte[])>
		SHA-256: 28f940dcca21adbd9aa3dfe84f198021f303b6cba184afa2c49a475cb979fac8
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: b9c970d7ca75c43cb7258988e82963e870aab49d0877fadda916613732dffc1d
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: f7215d57c1b7ab9ebb89e97057c855388325de39bfe02465ce28ffbfba293a90
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: 76298657dcc0e1faa3122d33d3548dc8a01229fee4a5d57d841d58534d31027d
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <zorg.platform.j2se.RandomGeneratorImpl: void getBytes(byte[])>
		SHA-256: b20de9d02d8b14d485c4f991dc54e78177866717ef678b37ce6b9dd9211458f5
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 4e7584f189eeda4c62a7124841ff3461841113c8a345216cfc5c2008c926ea52
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4)
		Method: <org.opentelecoms.util.crypto.AppendingTrustManager: void <init>(javax.net.ssl.X509TrustManager,java.security.KeyStore)>
		SHA-256: 2a6c1f858cd476c50120609f19e53a2af25d67be32c034efa94bba6e087ee176
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ad09a8cc451d7562d765a3c3953e026b09435e52717c46ee70f292549e8a933e
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.x509.ExtendedPKIXParameters
		Statement: specialinvoke r0.<java.security.cert.PKIXParameters: void <init>(java.util.Set)>($r1)
		Method: <org.spongycastle.x509.ExtendedPKIXParameters: void <init>(java.util.Set)>
		SHA-256: bc4db4edf85d5095c872f763083d4cdd57eaf413157a98ff957c0439448eaca6
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyStore
		Statement: $r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer1975, varReplacer1976)
		Method: <org.sipdroid.sipua.SipdroidEngine: boolean StartEngine()>
		SHA-256: d133dea1ee049da8d0f88b7c2260b8a007d2c1b8e1631a4e6182c2406c6a1378
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer14899)
		Method: <org.ice4j.attribute.MessageIntegrityAttribute: byte[] calculateHmacSha1(byte[],int,int,byte[])>
		SHA-256: 5d15e8ca3f925e21bd8c3a145a4be645a9a71cd7dd02f8a0dab7003c1ef72319
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <zorg.platform.j2se.DigestImpl: byte[] getDigest()>
		SHA-256: cea548bb2833fe61b70ce6e4be5cdae0a61b2011525972f03efe43ebc09c3598
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyFactory
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer26849)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 2da306a4b219968d5b2aa8718579260f408edef7774d55cb20b12f1d469c070d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.xbill.DNS.utils.HMAC: byte[] sign()>
		SHA-256: 1f9ab97014da7246d8025bc231cf18a522caea62a689d47a735e3eaba2816f6c
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 5f9963ee752bd7d8a86fa545ed47ab3b123575f47702c801046b8d04c3d29245
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>
		SHA-256: 258c32216fb6f90870819dad97cae5f5a7cd076204aa208110347ba1c64c7aac
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.xbill.DNS.UDPClient: void <clinit>()>
		SHA-256: fcebb9e881f86bd38585606df0d0e993ca0aa8852fe9338092fa2df92cf72b68
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <org.ice4j.security.LongTermCredentialSession: byte[] getLocalKey(java.lang.String)>
		SHA-256: f6f8c3eb90847c0af5ae0eec1e5a5bb0730a3799395b9c6b29aba1fd60a9ff73
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r7)
		Method: <org.sipdroid.sipua.PublishAgent: void publish(org.sipdroid.sipua.BasicStatus,int,java.lang.String)>
		SHA-256: c5dc1806ead872cc813015713607f2cc50536bf44bc5817151e6a33a98401acf
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 447306ffd1f9c477d4e0234ba8415fc2dcc63689de4572fb5a672197e634a45c
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r3, $r6, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey: void <init>(org.spongycastle.crypto.params.DHPrivateKeyParameters)>
		SHA-256: 2a4b346577c9be66b1ecc846096673fb16cf25cfe658c92b9a2f9f8f9ed3a857
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer14897)
		Method: <org.ice4j.attribute.MessageIntegrityAttribute: byte[] calculateHmacSha1(byte[],int,int,byte[])>
		SHA-256: 23a14ccb423cfd32de9cfcbb3bc3f07acd0d5913c4b5fc01d650671ada685b33
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer26907)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesDecrypt(byte[],int,int,byte[],byte[])>
		SHA-256: 12b9ef732ed86713f5d11e76f37accb584eb3ae89e7b08867caedf290be3d005
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 2f96be90287037dd5aa521a81412c6567fe97ad3bdc0a3e0dd37cb2855cfb876
		Secure: true
	Object:
		Variable: r1
		Type: java.security.SecureRandom
		Statement: specialinvoke r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: 976278d7f7d95a4f24d6a4dcfd009558740370f422ea3303d5b2e3b2b8b2b87e
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer13917)
		Method: <org.ice4j.stack.StunStack: void <init>(org.ice4j.stack.PeerUdpMessageEventHandler,org.ice4j.stack.ChannelDataEventHandler)>
		SHA-256: 8d1fb517ebdc2b7bbe3442d359f64efcbc53c388909397d024cf0b034cb30043
		Secure: false
	Object:
		Variable: $r28
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r28.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r12, $r23, $r16, $i1)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 521b5d31dc85141e3c0159aef77e31b2e45cc5bb756a6116c41229005c85219e
		Secure: true
	Object:
		Variable: $r33
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r33.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r21, $r27, $r18, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 5d93c7e68239779b7adfa38d41124d80695232d777f680e137050e01820a20de
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r9, $r10, varReplacer12519)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: void setAlgorithm(zorg.KeyAgreementType)>
		SHA-256: 29eee6365d773da7dcf05c866e5b1848068c411ef604ecc4be79693686ec1c79
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.xbill.DNS.utils.HMAC: byte[] sign()>
		SHA-256: 1e31e15d341bd5b649e3174c2df91f09ef704d73f0791a55fd926de41359b1a0
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23257)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 33eb0413f768bb8f62fb93b242f61b939077f84cb6af29bb3481476606b25604
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23256)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: c71a6304c2e5058ccc7839e7364503404588a75fcc9e9ba06c550ef9edd9c35b
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)
		Method: <org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: 7e607f2b0148a3c2f0cc3a50502aa1d8d622c22ef1a312f9fed011b06d0c82f4
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.GOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 61b7887e2cfe6269c9dc5ed1565a2d9c81d2ae6237d2a5bf20c73d26a54cd85c
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r1)
		Method: <org.xbill.DNS.utils.HMAC: void init(byte[])>
		SHA-256: 219d4777456ccb405b8e6faee0474d2b062dca180af69cd68695408d2c66b5c6
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer21283)
		Method: <zorg.platform.j2se.EncryptorSuiteImpl: void <init>(byte[],byte[])>
		SHA-256: d2d8eb933d85441b8a1fdfe33939ba24c99c092f626038fbf7c876d1b717ab81
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initializeDefault()>
		SHA-256: d5445d664decee291ee585f94dd38d9d5a5b6785ec803c749ff1f9479b869078
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <zorg.platform.j2se.DigestImpl: void <init>(zorg.platform.j2se.DigestType)>
		SHA-256: 6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c47b6631ce3720d818beeb3ff632397f4377b2c7bad13224726fa6668bbc6f5
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer21284)
		Method: <zorg.platform.j2se.HMACSHA1Impl: void <init>(byte[])>
		SHA-256: e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1)
		Method: <org.ice4j.attribute.MessageIntegrityAttribute: byte[] calculateHmacSha1(byte[],int,int,byte[])>
		SHA-256: d9a51fa577d209db5af954e48508ebdb27f8a7266268d27fc0c78c6b11252634
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23253)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 1b251ca7116beac93d6e40fcad228ad132078bc2b890395a53387232754a1e10
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECNRSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 9280f6752b6e6221628d06f9d60b4341d2a16061cd2ae2c26b66d065728b8af7
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 55769ba8c754825ca57452ac3077c95d1c966f44b3e5ff2959f34465568fc0b3
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 6dae500fa4127477f702f7c8db5b65ac00e8420fed109375c053548083b8d090
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.KeyPairGenerator
		Statement: $r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer15496)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: void setupEC(int)>
		SHA-256: 6aa655d37b608856ba8fd8affe2358e380f702f1f4bd60b46b7109e55610408c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer27725)
		Method: <org.sipdroid.sipua.PublishAgent: void publish(org.sipdroid.sipua.BasicStatus,int,java.lang.String)>
		SHA-256: a82bf318495848e7a80960e38670d3e3c3c9d1abfff8cd2778c6af7cd9c32912
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)
		Method: <zorg.platform.j2se.HMACSHA1Impl: void <init>(byte[])>
		SHA-256: a06cb2d421bdbb4b52653c567c8322e291e5d68bb16b32daa8272fd8fb0815e5
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesEncrypt(byte[],byte[],byte[])>
		SHA-256: e19a92b83b1412703a23715250a3b41d92bc663207ff211bed227f3a159ca02f
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 4bd6151add7d31cc4c6c1b467a5fcba26d1274b4e5b8f364b9492ad636053fa7
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r12, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,java.security.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: c7c434ba14780f6c3b9eb57cd97eaba20db8827ea32cddaaa5681baa0f5c9353
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyFactory
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer26848)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 5ea95fa1e6abf8a3a385a3eb0ef2e5d6eba582a26ba68df5533ea237b4cb523b
		Secure: false
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r2, $r3, $r4, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,java.math.BigInteger)>
		SHA-256: b36d50207c12d926e435b859cb9848007d52f50b2e62c847e597de1f84f657c6
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.gmss.GMSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2dc8cd1c1fa7979cada7be8f8320f93342af2ff1963c7c499a3420b2b9545bfa
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r6)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] calculateHMAC(zorg.platform.j2se.DigestType,byte[],int,int,byte[])>
		SHA-256: 1a657ca4f620e17f34effde858abcf5efecc4db7e9068790e3ec33b7df8ee43b
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer28214)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesEncrypt(byte[],byte[],byte[])>
		SHA-256: fe3df4021521941e21de53690dcd4e45d9e26bb2cdd4809f8fd776dc23220e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer24891)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: void <init>()>
		SHA-256: e00c8bc43c7783793326c11e5fa1df9c8a7b925169f5e7a3e0ef6ab3070b7590
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] generateSignature()>
		SHA-256: 238987cd7f028d63bd73983130023a3acb01386bcb069569f35d3e43491735c1
		Secure: true
	Object:
		Variable: $r0
		Type: javax.crypto.KeyGenerator
		Statement: $r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer27994)
		Method: <org.zoolu.sdp.SRTPKeySpec: byte[] makeKey(int)>
		SHA-256: bccfe26a70e841f33d4d5046bdad877bafe67787e96a810f12235dfc4068c0ff
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: ec9b0ac4a030d94fe97f5bc8789d3a331d3ff2c1b0b22683dd97941464e25d7
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r6, $r7)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(org.spongycastle.crypto.params.DSAPrivateKeyParameters)>
		SHA-256: 2d5d5ac1c460f68032e60a336ee4552b59000b4adb566ea09230715136a1ffd8
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.PublicKey
		Statement: $r15 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r2)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 66f6721ef88a634f9124366f374373262cef181b2cf4b73beefd6164e8c4154b
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>
		SHA-256: 51314679791b8846974991512c36196e1aa3b9e7da7427a9a3e79296a3ab25ab
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1)
		Method: <org.ice4j.attribute.MessageIntegrityAttribute: byte[] calculateHmacSha1(byte[],int,int,byte[])>
		SHA-256: 8fbdd44bb1291a73245ab92393dc5bf04f7e1a719e1503eac9011ed292b0b4ed
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jce.provider.JCEElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: 6b8822e70d4604e23c0ea07692bf2c9c1daaa36d64fb48b6df14aae465189041
		Secure: true
	Object:
		Variable: varReplacer26849
		Type: java.lang.String
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer26849)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: bb3fd03cb2a701494b09fd71a871b038ec9dc7302849190abda193c20882c51c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23252)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: 6d9909816db2823b6610ca5f6952716b3cc42d7e6ba22fb2405a128203e2b228
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Mac
		Statement: $r7 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] calculateHMAC(zorg.platform.j2se.DigestType,byte[],int,int,byte[])>
		SHA-256: 5c6dd63e2e5b8e5d83df4687669ca5b7e9ae15be9e863fa563c092a6969ca15c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void initializeDefault()>
		SHA-256: e372c8d5f3c022f0420723fb49c590e613e0421c79523205a6835ab17f0f1c15
		Secure: true
	Object:
		Variable: varReplacer26848
		Type: java.lang.String
		Statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer26848)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: fa9d996d40b884fadb890626357aad1918377ff72c9988dbf14e402022f3e6f7
		Secure: false
	Object:
		Variable: $r12
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r12.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r11, $r13, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,org.spongycastle.jce.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>
		SHA-256: a1d5c1019a937ff6b0dec47095ae3215e200e9859a8bed325078ed91f3857d0c
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 739cc9fc08fb84c67fc7967f6e477c9ba33c0eaac8062cdc3c87f59d8e1976a
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <org.zoolu.net.TcpSocket: void <clinit>()>
		SHA-256: 96b578e210ce6cbb8202c1e613b13f131d089920b04d0b06f08ccf043aa07677
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.SecretKey
		Statement: $r1 = virtualinvoke $r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.zoolu.sdp.SRTPKeySpec: byte[] makeKey(int)>
		SHA-256: bdb09bfe1980148de8b470a1cf5cf7f3a10ca239ce5814d0f39fe7889f6eb1ac
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21280)
		Method: <zorg.platform.j2se.EncryptorSuiteImpl: void <init>(byte[],byte[])>
		SHA-256: 3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.xbill.DNS.utils.HMAC: byte[] sign()>
		SHA-256: e1bd6cd60e2b1abe936c6525f13a02d956042586df0f64220869ac8d7f67784a
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPairGenerator
		Statement: $r11 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer12518)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: void setAlgorithm(zorg.KeyAgreementType)>
		SHA-256: 4a4a09a90568d2cb15c99788c700c21059989ed7b02f0f00ef293c12b822d2da
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c92706d2c91d64e0ae0bdfc585301ff52b9bdfb8205d8e444e45ff64f36af607
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECGOST3410Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: caabe0390e3d2386e10c04d6d72b0b44e335e1623efc6992e7ef060aaafe4388
		Secure: true
	Object:
		Variable: r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer28215)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesEncrypt(byte[],byte[],byte[])>
		SHA-256: 7a5c92b10bdcc7b3a73a7f485769481b71e0f1edaf116fa7ab44b1ed0d279e7f
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 55769ba8c754825ca57452ac3077c95d1c966f44b3e5ff2959f34465568fc0b3
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21275)
		Method: <zorg.platform.j2se.EncryptorSuiteImpl: byte[] encryptIV_for_prf(byte[])>
		SHA-256: 9cc2316ec909c728fe8f7555aebdef901a9999420fef7ef7c8ab8ca5cc8f7e06
		Secure: false
	Object:
		Variable: r1
		Type: java.security.SecureRandom
		Statement: specialinvoke r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.ECDSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>
		SHA-256: 907e1f5c07beb4945875e3d9df0753f4b7e3c9cbc7e6d6fca061334ed85525ba
		Secure: true
	Object:
		Variable: r0
		Type: org.spongycastle.jce.spec.ECNamedCurveSpec
		Statement: specialinvoke r0.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r7, $r8, $r4, $i0)
		Method: <org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>
		SHA-256: 9467b0dba295e5c529ef6991ca8d806071fc6e3901c07820fb802370f9b64f82
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.KeyAgreement
		Statement: $r12 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer26843)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 4f094a2131fa204235e25db140afe8801f034c191a0fbd2c0640fb4b439373fe
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.KeyPair
		Statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: aadd026eb861686e693690e72b434ddb064fe8bbbf9e5c4e4de2a60a071d8baf
		Secure: false
	Object:
		Variable: varReplacer14897
		Type: java.lang.String
		Statement: specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer14897)
		Method: <org.ice4j.attribute.MessageIntegrityAttribute: byte[] calculateHmacSha1(byte[],int,int,byte[])>
		SHA-256: c7a93ee5d7dea3868e213a47b6f746ff81b461cb705c2a54707c1ea6f6ad261e
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyPair
		Statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)
		Method: <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: java.security.KeyPair generateKeyPair()>
		SHA-256: e3023e7e692cb99b0c61179797dcf5cd3af59ae4a383bd7416c16c04ea37609a
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyPair
		Statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: e5641f7c625a5adf69656f7bfd86582f428ff3e5103d446bafee506d51fd603e
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.PublicKey
		Statement: $r15 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r4)
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: a1ce7b4dd8a7fd4c4ddcfdc105d5d71c3eb6f5f6391baba6c5ff776cee48de23
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <org.xbill.DNS.utils.HMAC: void <init>(java.lang.String,int,byte[])>
		SHA-256: 6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer24889)
		Method: <zorg.platform.j2se.RandomGeneratorImpl: void <init>()>
		SHA-256: 799741f99ea6fa5d7ae8373d0bc7abf5b8d6408367840034f8c9c8f206b3eef9
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.engines.ElGamalEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: cc0b332bb2ddc847ca308294e1c87841df1bdcc2359c6b4559abe498d8131c20
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: c5c5cb9bec6c89f6dc02736158ef1a0d54025fad80cfb6f3cb224c7ec7320f20
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r3.<java.security.MessageDigest: int digest(byte[],int,int)>($r1, $i0, $i1)
		Method: <zorg.platform.j2se.DigestImpl: int getDigest(byte[],int,boolean)>
		SHA-256: 7ea76ad6fcea7bd43870d7c18b44fd14cfad90a289dacee390925c18b3be65f2
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r3.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r5, $r6)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.crypto.params.DSAPublicKeyParameters)>
		SHA-256: 9390edae09a93724017ade479bb47ea94287e6460977d2dad3759cd566636f64
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r11.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r12, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: bb44b8f176969abcbf0260fbe8c7e948d19f63850a604e151470f5b883fc1bff
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5)
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlockOrRandom(byte[],int,int)>
		SHA-256: 9eea8fddf3b73e0efb96992710399017bdba4f031196eb2ff8f0c083e6630405
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r12.<javax.crypto.KeyAgreement: byte[] generateSecret()>()
		Method: <zorg.platform.j2se.DiffieHellmanSuiteImpl: byte[] getDhResult(byte[],int,boolean)>
		SHA-256: 7313f535f30c126a84bdc046b7c3a6f2a87a3ddc68f33de83719d446ae22e480
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r4.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r10, $r11, $r7, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey,java.security.spec.ECParameterSpec)>
		SHA-256: 75eb0cf148367f1ee1d5e20abbce2e3daa8e1c823696bec394a05f21805266a3
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer26906)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesDecrypt(byte[],int,int,byte[],byte[])>
		SHA-256: 7885065787c506ce70d12aa4be7f8e070ce15657b10060fdac479e1043e26fa0
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.signers.DSTU4145Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: bb98eee2eb82fb2c71e59ff99dcc6ac412ba5d86e67e379f475f490796e58a35
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.OAEPEncoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: 2927d56a192959dc3453ff63fb3830152d4c89781cce727cc1398f859f78edbf
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r5, $r13, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: 5c7feb4cfb8d8151025093d942db5e43c695a3cee0ea35deba16aa325fdb88e9
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: b0d1ba3da8064ca082b6ab923adae7a1f903b06296e62e14fc3b962758995d3f
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: a9c19b12994234db6ec00ed5b541d5738b556e23d3870b731ea4245dbf932de7
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25026)
		Method: <org.ice4j.security.LongTermCredentialSession: byte[] getLocalKey(java.lang.String)>
		SHA-256: a87c1b116068bd680581e8c999584623612d49532e9d99fd3067877740c2445e
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23254)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void <clinit>()>
		SHA-256: c65edc0f4c48f3f41915e9c160a8e8daf023c45a40e37c63ae0c2d74b912f9ee
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator: void initializeDefault()>
		SHA-256: 6fc5ae8de838d930d90af541e0c9e6ef7f5c576ff89b5cbca0fd6d98a8b5123b
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28315)
		Method: <org.zoolu.net.TcpSocket: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 505c378b3a660885bdf0d7bed33add3560778160d161324cfc50ca1cfae0bf7f
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
		SHA-256: c47b6631ce3720d818beeb3ff632397f4377b2c7bad13224726fa6668bbc6f5
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.TrustManager[]
		Statement: $r7 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.opentelecoms.util.crypto.AppendingTrustManager: void <init>(javax.net.ssl.X509TrustManager,java.security.KeyStore)>
		SHA-256: 6924cb7d247986770d264961a1550488d239aff0c73fd3b087f9fbf6b071116
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>
		SHA-256: 7da588f6ba11daef0648e917469639d98b077179b329759419eb3ea4368bb37f
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.spec.DSAParameterSpec
		Statement: specialinvoke $r9.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r10, $r11)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>
		SHA-256: ca8c57f00e636666523b3803cf2d449c7668aea2653306a5d436a81914fd7df0
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r2, $r5, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>
		SHA-256: 8afc5c7eb96b36d8829bf9167e10c334a2090367af9364094726e410dd8ac903
		Secure: true
	Object:
		Variable: $r7
		Type: javax.net.ssl.TrustManager[]
		Statement: $r7 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.zoolu.net.TcpSocket: javax.net.ssl.SSLContext getSSLContext()>
		SHA-256: 3739c4841258b3c52cd87ceecde4b1ced5cc339bb2466c5b5564b7f228678877
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>
		SHA-256: c298353e5545f70cbdb99b3ca11ca15c9b136f9fad09c5830e7caf4e4e6a61a9
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char)>
		SHA-256: f6029f09e7eaad0a79299673ca4a747029813212ccf99c394d2770a03fc5295a
		Secure: true
	Object:
		Variable: $r6
		Type: java.lang.String
		Statement: specialinvoke r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r6)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] calculateHMAC(zorg.platform.j2se.DigestType,byte[],int,int,byte[])>
		SHA-256: 378151b96cea44c55795e2f26dca4888ef6fe4b69fa45714557a11c5cb44d48d
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,int,boolean,byte[],boolean,boolean,org.spongycastle.crypto.Digest)>
		SHA-256: 8804dfbcedc43de8915d1844bd637bb3574c76388648172f6a7135bf1a8c7524
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r10.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r0, $r5, $r8, $i0)
		Method: <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec)>
		SHA-256: 2fa3c86e85d2988f97fab44a96b1c1f34f00138e6946e6999e9f09daa5df51fc
		Secure: true
	Object:
		Variable: varReplacer21283
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer21283)
		Method: <zorg.platform.j2se.EncryptorSuiteImpl: void <init>(byte[],byte[])>
		SHA-256: 2b7c11380febd827307da67061ea582207644bbb0a86cdad1dbebfe2d7e28b2b
		Secure: false
	Object:
		Variable: r1
		Type: java.security.SecureRandom
		Statement: specialinvoke r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.ice4j.ice.Agent: void <init>()>
		SHA-256: 8e4ccafb53a446b1859693ede7306776ef95a48995954f0c8cd2f487735eb226
		Secure: true
	Object:
		Variable: $r12
		Type: java.security.KeyPair
		Statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)
		Method: <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.KeyPair generateKeyPair()>
		SHA-256: 3b5b4a400dbb0e903101983900af5a2347a5591b934cf20d7dcb5432fcab63c8
		Secure: false
	Object:
		Variable: r2
		Type: java.security.SecureRandom
		Statement: specialinvoke r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.lumicall.android.sip.RegistrationActivity: java.lang.String generatePassword(int)>
		SHA-256: 191a51c7388d28ee399483b36cc966939e4fae2b878360a93821507193ffd7c2
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer21282)
		Method: <zorg.platform.j2se.EncryptorSuiteImpl: void <init>(byte[],byte[])>
		SHA-256: bb6bfce81286e15a92e68ac7b4b6d877b1e8c83e050269b47f40f1624dc3b971
		Secure: true
	Object:
		Variable: varReplacer28215
		Type: java.lang.String
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer28215)
		Method: <zorg.platform.j2se.CryptoUtilsImpl: byte[] aesEncrypt(byte[],byte[],byte[])>
		SHA-256: 926efc6c03ae00b26a42ef508f876e0af3c4a14a24d7f210d9c791bbeab65669
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4)
		Method: <org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: c908257ebef1e44e27421c3dc6127a4c79990e1515e273132ea2c2cb020fcdee
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.spongycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>
		SHA-256: d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59
		Secure: true
	Object:
		Variable: $i2
		Type: int
		Statement: $i2 = virtualinvoke r2.<java.security.SecureRandom: int nextInt(int)>($i2)
		Method: <org.lumicall.android.sip.RegistrationActivity: java.lang.String generatePassword(int)>
		SHA-256: bac7bce501f64e4789ea29d19e88fc2035eb07832d9c5ea83d26d217ab57fd95
		Secure: true

Findings in Java Class: org.sipdroid.sipua.SipdroidEngine

	 in Method: boolean StartEngine()
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #d133dea1ee049da8d0f88b7c2260b8a007d2c1b8e1631a4e6182c2406c6a1378)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r11.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, $r14)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #d133dea1ee049da8d0f88b7c2260b8a007d2c1b8e1631a4e6182c2406c6a1378)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r11.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, $r14)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #d133dea1ee049da8d0f88b7c2260b8a007d2c1b8e1631a4e6182c2406c6a1378)
			First parameter (with value "BKS") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer1975, varReplacer1976)


Findings in Java Class: org.ice4j.stack.StunStack

	 in Method: void <init>(org.ice4j.stack.PeerUdpMessageEventHandler,org.ice4j.stack.ChannelDataEventHandler)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #8d1fb517ebdc2b7bbe3442d359f64efcbc53c388909397d024cf0b034cb30043)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r4 = <org.ice4j.stack.StunStack: javax.crypto.Mac mac>

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #8d1fb517ebdc2b7bbe3442d359f64efcbc53c388909397d024cf0b034cb30043)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer13917)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #8d1fb517ebdc2b7bbe3442d359f64efcbc53c388909397d024cf0b034cb30043)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer13917)


Findings in Java Class: org.ice4j.attribute.MessageIntegrityAttribute

	 in Method: byte[] calculateHmacSha1(byte[],int,int,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer14897)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #23a14ccb423cfd32de9cfcbb3bc3f07acd0d5913c4b5fc01d650671ada685b33)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer14897)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #5d15e8ca3f925e21bd8c3a145a4be645a9a71cd7dd02f8a0dab7003c1ef72319)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer14899)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>(r3)


Findings in Java Class: zorg.platform.j2se.DiffieHellmanSuiteImpl

	 in Method: void setupEC(int)
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #6aa655d37b608856ba8fd8affe2358e380f702f1f4bd60b46b7109e55610408c)
			First parameter (with value "ECDH") should be any of {RSA, EC, DSA, DiffieHellman, DH}
			at statement: $r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer15496)


	 in Method: byte[] getDhResult(byte[],int,boolean)
		ConstraintError violating CrySL rule for java.security.KeyFactory (on Object #5ea95fa1e6abf8a3a385a3eb0ef2e5d6eba582a26ba68df5533ea237b4cb523b)
			First parameter (with value "ECDH") should be any of {RSA, DiffieHellman, DH, DSA, EC}
			at statement: $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer26848)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r12.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r14)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyAgreement
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r12.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r15, varReplacer26844)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r15 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r2)


Findings in Java Class: zorg.platform.j2se.EncryptorSuiteImpl

	 in Method: byte[] encryptIV_for_prf(byte[])
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #9cc2316ec909c728fe8f7555aebdef901a9999420fef7ef7c8ab8ca5cc8f7e06)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r1, varReplacer21277, varReplacer21278)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer21276, $r5, $r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer21276, $r5, $r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #9cc2316ec909c728fe8f7555aebdef901a9999420fef7ef7c8ab8ca5cc8f7e06)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21275)


	 in Method: void <init>(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer21283)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer21281, $r4, $r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer21281, $r4, $r5)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #d2d8eb933d85441b8a1fdfe33939ba24c99c092f626038fbf7c876d1b717ab81)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer21283)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21280)


	 in Method: void encrypt(byte[],byte[])
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init
			at statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r1, varReplacer21287, $i0)


Findings in Java Class: org.sipdroid.media.JAudioLauncher$ZRTPListener

	 in Method: boolean keyExchangeCompleted(byte[],byte[],byte[],byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i0 = virtualinvoke $r15.<zorg.SRTP: int startNewSession()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke $r18.<org.sipdroid.media.RtpStreamReceiver: void setSRTP(zorg.SRTP)>($r15)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke $r17.<org.sipdroid.media.RtpStreamSender: void setSRTP(zorg.SRTP)>($r15)


Findings in Java Class: zorg.SRTP

	 in Method: byte[] prf_128(byte[],byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r9 = interfaceinvoke $r8.<zorg.platform.CryptoUtils: zorg.platform.EncryptorSuite createEncryptorSuite(byte[],byte[])>($r1, $r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r1 = interfaceinvoke $r9.<zorg.platform.EncryptorSuite: byte[] encryptIV_for_prf(byte[])>(r3)


	 in Method: boolean rxSessionKeyDerivation()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r12 = interfaceinvoke $r10.<zorg.platform.CryptoUtils: zorg.platform.HMAC createHMACSHA1(byte[])>($r7)


Findings in Java Class: org.sipdroid.sipua.UserAgent

	 in Method: void launchMediaApplication()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: interfaceinvoke $r5.<org.sipdroid.media.MediaLauncher: boolean startMedia()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i3 = virtualinvoke r23.<zorg.SRTP: int startNewSession()>()


Findings in Java Class: org.sipdroid.media.JAudioLauncher

	 in Method: void <init>(java.net.DatagramSocket,int,java.lang.String,int,int,java.lang.String,java.lang.String,int,int,int,org.sipdroid.codecs.Codecs$Map,int,zorg.SRTP,zorg.ZRTP)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke $r12.<org.sipdroid.media.RtpStreamSender: void setDTMFpayloadType(int)>($i6)


Findings in Java Class: org.sipdroid.sipua.ui.Sipdroid

	 in Method: void prepareMulticastSocket()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i0 = virtualinvoke $r11.<zorg.SRTP: int startNewSession()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r11 = r0.<org.sipdroid.sipua.ui.Sipdroid: zorg.SRTP srtp>


Findings in Java Class: org.sipdroid.media.RtpStreamReceiver

	 in Method: void run()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r18 = r0.<org.sipdroid.media.RtpStreamReceiver: zorg.SRTP srtp>

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i6 = virtualinvoke $r18.<zorg.SRTP: int unprotect(zorg.platform.RtpPacket)>($r10)


Findings in Java Class: org.sipdroid.media.RtpStreamSender

	 in Method: void sendPacket(org.sipdroid.net.RtpPacket)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r3 = virtualinvoke $r2.<zorg.SRTP: zorg.platform.RtpPacket protect(zorg.platform.RtpPacket)>($r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3825ca6604362aa0767dc9ea83e5cf3cbeedbde2310bf80586e1bd46effbd116)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r2 = r0.<org.sipdroid.media.RtpStreamSender: zorg.SRTP srtp>


Findings in Java Class: zorg.platform.j2se.HMACSHA1Impl

	 in Method: void <init>(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			First parameter (with value "HmacSHA1") should be any of {HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer21284)


Findings in Java Class: org.ice4j.ice.Agent

	 in Method: void scheduleStunKeepAlive()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r1 = r0.<org.ice4j.ice.Agent: java.lang.Thread stunKeepAliveThread>

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke $r1.<java.lang.Thread: void start()>()


Findings in Java Class: zorg.ZRTP

	 in Method: void startSession()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke r1.<java.lang.Thread: void start()>()


	 in Method: java.lang.String calculateSHA256Hash(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: interfaceinvoke $r6.<zorg.platform.Digest: int getDigest(byte[],int,boolean)>(r2, $i5, varReplacer26816)


	 in Method: byte[] createSHA256Diggest(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: interfaceinvoke $r4.<zorg.platform.Digest: int getDigest(byte[],int,boolean)>($r1, varReplacer25593, varReplacer25593)


	 in Method: byte[] createRemoteHvi(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: interfaceinvoke $r2.<zorg.platform.Digest: int getDigest(byte[],int,boolean)>($r1, varReplacer25640, varReplacer25640)


	 in Method: void calculateSharedKeys()
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: interfaceinvoke $r6.<zorg.platform.Digest: int getDigest(byte[],int,boolean)>(r1, varReplacer25629, varReplacer25630)


Findings in Java Class: android.support.v4.view.ViewPropertyAnimatorCompat

	 in Method: android.support.v4.view.ViewPropertyAnimatorCompat translationX(float)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r4.<android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl: void translationX(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float)>(r0, r3, $f0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r3 = (android.view.View) $r1


	 in Method: void cancel()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r3 = (android.view.View) $r1

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r4.<android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl: void cancel(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View)>(r0, r3)


	 in Method: android.support.v4.view.ViewPropertyAnimatorCompat alpha(float)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r3 = (android.view.View) $r1

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r4.<android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl: void alpha(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float)>(r0, r3, $f0)


	 in Method: android.support.v4.view.ViewPropertyAnimatorCompat scaleY(float)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r4.<android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl: void scaleY(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float)>(r0, r3, $f0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r3 = (android.view.View) $r1


	 in Method: android.support.v4.view.ViewPropertyAnimatorCompat translationY(float)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r3 = (android.view.View) $r1

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r4.<android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl: void translationY(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float)>(r0, r3, $f0)


Findings in Java Class: android.support.v4.app.BackStackRecord

	 in Method: void run()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: r4 = specialinvoke r0.<android.support.v4.app.BackStackRecord: android.support.v4.app.BackStackRecord$TransitionState beginTransition(android.util.SparseArray,android.util.SparseArray,boolean)>(r5, r6, varReplacer4850)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke r0.<android.support.v4.app.BackStackRecord: void bumpBackStackNesting(int)>(varReplacer4846)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)


Findings in Java Class: android.support.v4.app.FragmentManagerImpl

	 in Method: boolean execPendingActions()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r11)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r11.<java.lang.Runnable: void run()>()


Findings in Java Class: org.ice4j.pseudotcp.PseudoTcpSocketImpl

	 in Method: void startThreads()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke $r3.<java.lang.Thread: void start()>()


Findings in Java Class: org.lumicall.android.ganglia.AndroidGScheduler

	 in Method: void onReceive(android.content.Context,android.content.Intent)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke r10.<java.lang.Runnable: void run()>()


Findings in Java Class: java.lang.Thread

	 in Method: void run()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke target.<java.lang.Runnable: void run()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: target = this.<java.lang.Thread: java.lang.Runnable target0>


Findings in Java Class: org.ice4j.socket.RelayedCandidateDatagramSocket

	 in Method: void createReceiveChannelDataThread()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke $r2.<java.lang.Thread: void start()>()


Findings in Java Class: android.support.v7.widget.Toolbar$ExpandedActionViewMenuPresenter

	 in Method: boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: interfaceinvoke $r9.<android.support.v7.view.CollapsibleActionView: void onActionViewExpanded()>()


Findings in Java Class: org.lumicall.android.reg.SMSProgressReceiver

	 in Method: void onReceive(android.content.Context,android.content.Intent)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke $r16.<java.lang.Thread: void start()>()


Findings in Java Class: org.ice4j.stack.Connector

	 in Method: void start()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e09ec0febc7340a29e345b65c7425b1a7ef0283acf65a930c862bce52dc39cda)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: virtualinvoke r1.<java.lang.Thread: void start()>()


Findings in Java Class: org.xbill.DNS.SimpleResolver

	 in Method: org.xbill.DNS.Message sendAXFR(org.xbill.DNS.Message)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, getInstance
			at statement: $r9 = virtualinvoke $r8.<org.xbill.DNS.ZoneTransferIn: java.util.List getAXFR()>()


Findings in Java Class: org.xbill.DNS.TSIG

	 in Method: org.xbill.DNS.TSIGRecord generate(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: r6 = null

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: virtualinvoke r6.<org.xbill.DNS.utils.HMAC: void update(byte[])>($r2)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: virtualinvoke r6.<org.xbill.DNS.utils.HMAC: void update(byte[])>($r2)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: virtualinvoke r6.<org.xbill.DNS.utils.HMAC: void update(byte[])>($r8)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: specialinvoke r6.<org.xbill.DNS.utils.HMAC: void <init>(java.lang.String,int,byte[])>($r7, $i1, $r8)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: $r2 = virtualinvoke r6.<org.xbill.DNS.utils.HMAC: byte[] sign()>()


	 in Method: byte verify(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: specialinvoke r4.<org.xbill.DNS.utils.HMAC: void <init>(java.lang.String,int,byte[])>($r6, $i0, $r7)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6166e08a9044525fac3743cdfeb133b2ef06f4f7bbc97074815e8c46585210b7)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: $i5 = virtualinvoke r4.<org.xbill.DNS.utils.HMAC: int digestLength()>()


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC

	 in Method: void <clinit>()
		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #4f19c9306168648e36889164d69bf10884a606e3ede68fbc13ea6c8a4659e68c)
			First parameter (with value "P-224") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23255)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #33eb0413f768bb8f62fb93b242f61b939077f84cb6af29bb3481476606b25604)
			First parameter (with value "P-521") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23257)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #6d9909816db2823b6610ca5f6952716b3cc42d7e6ba22fb2405a128203e2b228)
			First parameter (with value "prime192v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23252)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #c65edc0f4c48f3f41915e9c160a8e8daf023c45a40e37c63ae0c2d74b912f9ee)
			First parameter (with value "prime239v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23254)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #1b251ca7116beac93d6e40fcad228ad132078bc2b890395a53387232754a1e10)
			First parameter (with value "P-384") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23253)

		ConstraintError violating CrySL rule for java.security.spec.ECGenParameterSpec (on Object #c71a6304c2e5058ccc7839e7364503404588a75fcc9e9ba06c550ef9edd9c35b)
			First parameter (with value "prime256v1") should be any of {brainpoolP224r1, 1.3.36.3.3.2.8.1.1.5, brainpoolP256r1, 1.3.36.3.3.2.8.1.1.7, brainpoolP320r1, 1.3.36.3.3.2.8.1.1.9, brainpoolP384r1, 1.3.36.3.3.2.8.1.1.11, brainpoolP512r1, 1.3.36.3.3.2.8.1.1.13, secp224r1, NIST P-224, 1.3.132.0.33, secp256r1, NIST P-256, X9.62 prime256v1, 1.2.840.10045.3.1.7, secp384r1, NIST P-384, 1.3.132.0.34, secp521r1, NIST P-521, 1.3.132.0.35}
			at statement: specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer23256)


	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13)


Findings in Java Class: org.ice4j.security.LongTermCredentialSession

	 in Method: byte[] getLocalKey(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a87c1b116068bd680581e8c999584623612d49532e9d99fd3067877740c2445e)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer25026)


Findings in Java Class: zorg.platform.j2se.CryptoUtilsImpl

	 in Method: byte[] aesDecrypt(byte[],int,int,byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7885065787c506ce70d12aa4be7f8e070ce15657b10060fdac479e1043e26fa0)
			First parameter (with value "AES/CFB64/NoPadding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer26906)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer26905, r6, r5)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #7885065787c506ce70d12aa4be7f8e070ce15657b10060fdac479e1043e26fa0)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r1, $i0, $i1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer26907)


	 in Method: byte[] aesEncrypt(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer28216, r6, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer28215)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #fe3df4021521941e21de53690dcd4e45d9e26bb2cdd4809f8fd776dc23220e)
			First parameter (with value "AES/CFB64/NoPadding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer28214)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #fe3df4021521941e21de53690dcd4e45d9e26bb2cdd4809f8fd776dc23220e)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)


	 in Method: byte[] calculateHMAC(zorg.platform.j2se.DigestType,byte[],int,int,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Mac: void init(java.security.Key)>(r5)


Findings in Java Class: org.sipdroid.sipua.PublishAgent

	 in Method: void publish(org.sipdroid.sipua.BasicStatus,int,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a82bf318495848e7a80960e38670d3e3c3c9d1abfff8cd2778c6af7cd9c32912)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer27725)


Findings in Java Class: zorg.ZRTP$HashChain

	 in Method: void <init>(zorg.ZRTP)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #6c9e851c22a6528b4b6d21d5a10dcee2cbbbcc5fdf8b2333662d0abde4e8fb7a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest
			at statement: interfaceinvoke $r6.<zorg.platform.Digest: int getDigest(byte[],int,boolean)>($r2, varReplacer21595, varReplacer21596)


Findings in Java Class: org.zoolu.sdp.SRTPKeySpec

	 in Method: byte[] makeKey(int)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #bccfe26a70e841f33d4d5046bdad877bafe67787e96a810f12235dfc4068c0ff)
			First parameter (with value 112) should be any of {128, 192, 256}
			at statement: virtualinvoke $r0.<javax.crypto.KeyGenerator: void init(int)>($i0)


Findings in Java Class: org.zoolu.net.TcpSocket

	 in Method: javax.net.ssl.SSLContext getSSLContext()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer28314)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #505c378b3a660885bdf0d7bed33add3560778160d161324cfc50ca1cfae0bf7f)
			First parameter (with value "TLS") should be any of {TLSv1.2, TLSv1.3}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer28315)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer28318, $r7, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer28318, $r7, $r10)


Findings in Java Class: org.spongycastle.crypto.encodings.PKCS1Encoding

	 in Method: byte[] decodeBlockOrRandom(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()


	 in Method: byte[] encodeBlock(byte[],int,int)
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Unexpected call to method nextBytes on object of type java.security.SecureRandom. Expect a call to one of the following methods init,getInstanceStrong,getInstance
			at statement: virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>()


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.signers.PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.RSADigestSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.signers.X931Signer

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.encodings.OAEPEncoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


	 in Method: byte[] decodeBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: r2 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, varReplacer30465, $i0, $i1)


Findings in Java Class: org.spongycastle.crypto.tls.TlsRSAUtils

	 in Method: byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r10 = virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>(r5, varReplacer29657, $i0)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r10 = virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>(r5, varReplacer29657, $i0)


	 in Method: byte[] safeDecryptPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,byte[])
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r2 = virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r2, varReplacer30012, i0)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r2 = virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r2, varReplacer30012, i0)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2PSSSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r3)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r3)


Findings in Java Class: org.spongycastle.crypto.signers.ISO9796d2Signer

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r2)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r2)


Findings in Java Class: org.spongycastle.crypto.signers.GenericSigner

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.encodings.ISO9796d1Encoding

	 in Method: void init(boolean,org.spongycastle.crypto.CipherParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #d60d93481dd6262546132fe8ec2f6f2c42eb3a0a1bfa20b033056f89fc2c0c59)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1)


Findings in Java Class: org.spongycastle.crypto.engines.NaccacheSternEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.crypto.engines.ElGamalEngine

	 in Method: byte[] processBlock(byte[],int,int)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.ElGamalEngine: int getInputBlockSize()>()


Findings in Java Class: org.spongycastle.pqc.crypto.ntru.NTRUEngine

	 in Method: byte[] decrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters)
		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r5 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[])>(r3, $r1)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: $r6 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r10, $r5, $r6)

		IncompleteOperationError violating CrySL rule for java.security.SecureRandom (on Object #94642bb44c85c75f78f22ec3372247e7bdbb1cf02676b4bfb5838a813a31c51a)
			Operation on object of type java.security.SecureRandom object not completed. Expected call to init, getInstanceStrong, getInstance
			at statement: r13 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean)>($r1, i0, $i6, $z0)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


Findings in Java Class: org.opentelecoms.util.crypto.AppendingTrustManager

	 in Method: void <init>(javax.net.ssl.X509TrustManager,java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r2)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16)


Findings in Java Class: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13)


Findings in Java Class: org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 151

	CryptoAnalysis found the following violations. For details see description above.
	HardCodedError: 1
	NeverTypeOfError: 2
	TypestateError: 6
	ConstraintError: 21
	IncompleteOperationError: 92
	RequiredPredicateError: 44
=====================================================================
