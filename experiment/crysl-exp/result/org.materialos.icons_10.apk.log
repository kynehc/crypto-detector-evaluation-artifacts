0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.1.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Ruleset: 
	java.security.cert.TrustAnchor
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPair
	java.security.DigestOutputStream
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.OAEPParameterSpec
	javax.net.ssl.SSLContext
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.CipherOutputStream
	java.security.Key
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	java.security.KeyFactory
	javax.crypto.spec.PBEKeySpec
	java.security.spec.DSAGenParameterSpec
	java.security.KeyPairGenerator
	javax.crypto.CipherInputStream
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.cert.CertificateFactory
	java.security.SecureRandom
	java.security.spec.MGF1ParameterSpec
	javax.net.ssl.SSLEngine
	javax.crypto.spec.DHParameterSpec
	java.security.spec.DSAParameterSpec
	java.security.spec.ECParameterSpec
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.spec.IvParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	java.security.AlgorithmParameterGenerator
	java.security.spec.X509EncodedKeySpec
	javax.net.ssl.TrustManagerFactory
	java.security.DigestInputStream
	void
	javax.net.ssl.KeyManagerFactory
	java.security.cert.PKIXParameters
	java.net.PasswordAuthentication
	java.security.AlgorithmParameters
	javax.crypto.KeyAgreement
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.SSLParameters
	java.security.MessageDigest
	javax.crypto.SecretKey
	javax.crypto.KeyGenerator
	java.security.KeyStore
	javax.crypto.Mac
	java.security.spec.ECGenParameterSpec
	java.security.Signature

Analyzed Objects: 
	Object:
		Variable: $r12
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 2be18435da5845a85a621cf2f80cce42f76a23a9cb29b2054bcb6f671e7c6e60
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKeyFactory
		Statement: $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer11754)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: c0a6c1b311c2b3fe2da3ba08f3fc9314a2e81358f07dfb548ab52878f1204525
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer11753)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: e3aea765b7c14749dfa142008d9cdce5344c0e71e0af9c177618222ca1da65d2
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.vending.licensing.LicenseChecker: void <clinit>()>
		SHA-256: db6dac925326692e2db9bc12d14c8fc5c8c772354a99db96f1deb45338ec3783
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.Signature
		Statement: $r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer3990)
		Method: <com.google.android.vending.licensing.LicenseValidator: void verify(java.security.PublicKey,int,java.lang.String,java.lang.String)>
		SHA-256: c7aef72039fff6f23f54327f69dddcf1bfe844616d8eedd0efbf43fde828d732
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>
		SHA-256: 6763e0d09de34caa999df127c6d30dc02400c44c84c5c574d6dd222776edfb5c
		Secure: true
	Object:
		Variable: $r12
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 2be18435da5845a85a621cf2f80cce42f76a23a9cb29b2054bcb6f671e7c6e60
		Secure: false
	Object:
		Variable: $r11
		Type: javax.crypto.Cipher
		Statement: $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer11758)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 441f3fff90c6f537f79bb1f6bd50510c91ba610355e8fc2b558922b456e50535
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r6.<java.security.Signature: boolean verify(byte[])>($r7)
		Method: <com.google.android.vending.licensing.LicenseValidator: void verify(java.security.PublicKey,int,java.lang.String,java.lang.String)>
		SHA-256: 67559b2f76df88844ba345cc22ad9ae8da07cd36bd56fbe99707abadf7ff68cc
		Secure: false
	Object:
		Variable: varReplacer11753
		Type: java.lang.String
		Statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer11753)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: e7db115200e5a921cf836783245a8fb9b9043028c663c05bfb9adbae010ad6b6
		Secure: false
	Object:
		Variable: varReplacer11757
		Type: int
		Statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: bf922e561e1ab1e136060a4a16b3769884b3bf68067edcabdd4f385dfd52ad7a
		Secure: false
	Object:
		Variable: varReplacer11791
		Type: java.lang.String
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer11791)
		Method: <com.google.android.vending.licensing.LicenseChecker: java.security.PublicKey generatePublicKey(java.lang.String)>
		SHA-256: 44e8fb4fb895a82c91930b8ec0697f9a8dc5b832552f4fb751bfbfe4e46be17c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.PublicKey
		Statement: $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3)
		Method: <com.google.android.vending.licensing.LicenseChecker: java.security.PublicKey generatePublicKey(java.lang.String)>
		SHA-256: 4a4091161717c429716b6d5e02114faf47e04a0f5f940a842887cdd72d94f6e7
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 9698baaa8a817cc4b99850f4f1b0107c7503efa7df2b52226363974ae4dcca42
		Secure: false
	Object:
		Variable: $r11
		Type: javax.crypto.Cipher
		Statement: $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer11755)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 1a6cac55e766904db73677b15d3821047bcfc0022b91a6f6facb662e69b02338
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $z0 = virtualinvoke $r6.<java.security.Signature: boolean verify(byte[])>($r7)
		Method: <com.google.android.vending.licensing.LicenseValidator: void verify(java.security.PublicKey,int,java.lang.String,java.lang.String)>
		SHA-256: fe2f5507a96115beab0417c3fd68c83d7e7c1428c56bb12ec9db35155ed84689
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)
		Method: <com.google.android.vending.licensing.LicenseChecker: java.security.PublicKey generatePublicKey(java.lang.String)>
		SHA-256: 5440a52b30ee2ab405cb6a506717cd3489ce769bd227918fa1efb892cb6d2624
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.SecretKey
		Statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: b547f949806467ac091df16d81559a482a73b9280c9598c72a54f94f07e0e5b4
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyFactory
		Statement: $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer11791)
		Method: <com.google.android.vending.licensing.LicenseChecker: java.security.PublicKey generatePublicKey(java.lang.String)>
		SHA-256: 2c7d5d60e4cba0dd4df2149e21744719d6dbf09515c68e586e94b972a7dcc62d
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11874)
		Method: <com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>
		SHA-256: dbce294206452cea3d9d64fca2febde777a7bfa2b16e0cea482f996b29724a3e
		Secure: true

Findings in Java Class: com.google.android.vending.licensing.LicenseValidator

	 in Method: void verify(java.security.PublicKey,int,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r6.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #c7aef72039fff6f23f54327f69dddcf1bfe844616d8eedd0efbf43fde828d732)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA384withRSA, SHA512withRSA, SHA384withECDSA, SHA512withECDSA}
			at statement: $r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer3990)


Findings in Java Class: com.google.android.vending.licensing.AESObfuscator

	 in Method: void <init>(byte[],java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer11753)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer11761, r6, $r12)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9698baaa8a817cc4b99850f4f1b0107c7503efa7df2b52226363974ae4dcca42)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)

		HardCodedError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9698baaa8a817cc4b99850f4f1b0107c7503efa7df2b52226363974ae4dcca42)
			First parameter should never be hardcoded.
			at statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedIV [ with CBC, It's required to use IVParameterSpec]
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer11760, r6, $r12)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9698baaa8a817cc4b99850f4f1b0107c7503efa7df2b52226363974ae4dcca42)
			Third parameter (with value 1024)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9698baaa8a817cc4b99850f4f1b0107c7503efa7df2b52226363974ae4dcca42)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer11756, varReplacer11757)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #c0a6c1b311c2b3fe2da3ba08f3fc9314a2e81358f07dfb548ab52878f1204525)
			First parameter (with value "PBEWITHSHAAND256BITAES-CBC-BC") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer11754)


	 in Method: java.lang.String unobfuscate(java.lang.String,java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #1a6cac55e766904db73677b15d3821047bcfc0022b91a6f6facb662e69b02338)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher. Expect a call to one of the following methods init,updateAAD
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)


Findings in Java Class: com.bumptech.glide.load.engine.cache.SafeKeyGenerator

	 in Method: java.lang.String getSafeKey(com.bumptech.glide.load.Key)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #dbce294206452cea3d9d64fca2febde777a7bfa2b16e0cea482f996b29724a3e)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.google.android.vending.licensing.LicenseChecker

	 in Method: java.security.PublicKey generatePublicKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 49
	Number of Objects Analyzed: 20

	CryptoAnalysis found the following violations. For details see description above.
	HardCodedError: 1
	NeverTypeOfError: 1
	TypestateError: 2
	ConstraintError: 3
	IncompleteOperationError: 1
	RequiredPredicateError: 9
=====================================================================
